(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
    typeof define === 'function' && define.amd ? define(['react'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.quillReactCommercial = factory(global.React));
})(this, (function (React) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol */


    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Built-in value references. */
    var Symbol$1 = root.Symbol;

    /** Used for built-in method references. */
    var objectProto$s = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$o = objectProto$s.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$3 = objectProto$s.toString;

    /** Built-in value references. */
    var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty$o.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$3.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$r = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$2 = objectProto$r.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString$2.call(value);
    }

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /** `Object#toString` result references. */
    var symbolTag$3 = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag$3);
    }

    /** Used as references for various `Number` constants. */
    var NAN$2 = 0 / 0;

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN$2;
      }
      return +value;
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /** Used as references for various `Number` constants. */
    var INFINITY$5 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$2 = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$5) ? '-0' : result;
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /** Used to match a single whitespace character. */
    var reWhitespace = /\s/;

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex(string) {
      var index = string.length;

      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }

    /** Used to match leading whitespace. */
    var reTrimStart$2 = /^\s+/;

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim(string) {
      return string
        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart$2, '')
        : string;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /** Used as references for various `Number` constants. */
    var NAN$1 = 0 / 0;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN$1;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN$1 : +value);
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$4 = 1 / 0,
        MAX_INTEGER = 1.7976931348623157e+308;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY$4 || value === -INFINITY$4) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$b = 'Expected a function';

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$b);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag$2 = '[object Function]',
        genTag$1 = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /** Used for built-in method references. */
    var funcProto$2 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$2 = funcProto$2.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto$1 = Function.prototype,
        objectProto$q = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$n = objectProto$q.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString$1.call(hasOwnProperty$n).replace(reRegExpChar$1, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /* Built-in method references that are verified to be native. */
    var WeakMap$1 = getNative(root, 'WeakMap');

    /** Used to store function metadata. */
    var metaMap = WeakMap$1 && new WeakMap$1;

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$8 = 1;

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG$8,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$g = Math.max;

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax$g(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$f = Math.max;

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax$f(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */
    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$6 = 4294967295;

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH$6;
      this.__views__ = [];
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used for built-in method references. */
    var objectProto$p = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$m = objectProto$p.hasOwnProperty;

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty$m.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$o = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$l = objectProto$o.hasOwnProperty;

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty$l.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeNow = Date.now;

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /** Used to match wrap detail comments. */
    var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /** Used to match wrap detail comments. */
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$7 = 1,
        WRAP_BIND_KEY_FLAG$6 = 2,
        WRAP_CURRY_FLAG$6 = 8,
        WRAP_CURRY_RIGHT_FLAG$3 = 16,
        WRAP_PARTIAL_FLAG$6 = 32,
        WRAP_PARTIAL_RIGHT_FLAG$3 = 64,
        WRAP_ARY_FLAG$4 = 128,
        WRAP_REARG_FLAG$3 = 256,
        WRAP_FLIP_FLAG$2 = 512;

    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [
      ['ary', WRAP_ARY_FLAG$4],
      ['bind', WRAP_BIND_FLAG$7],
      ['bindKey', WRAP_BIND_KEY_FLAG$6],
      ['curry', WRAP_CURRY_FLAG$6],
      ['curryRight', WRAP_CURRY_RIGHT_FLAG$3],
      ['flip', WRAP_FLIP_FLAG$2],
      ['partial', WRAP_PARTIAL_FLAG$6],
      ['partialRight', WRAP_PARTIAL_RIGHT_FLAG$3],
      ['rearg', WRAP_REARG_FLAG$3]
    ];

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$6 = 1,
        WRAP_BIND_KEY_FLAG$5 = 2,
        WRAP_CURRY_BOUND_FLAG$1 = 4,
        WRAP_CURRY_FLAG$5 = 8,
        WRAP_PARTIAL_FLAG$5 = 32,
        WRAP_PARTIAL_RIGHT_FLAG$2 = 64;

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG$5,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG$5 : WRAP_PARTIAL_RIGHT_FLAG$2);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG$2 : WRAP_PARTIAL_FLAG$5);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG$1)) {
        bitmask &= ~(WRAP_BIND_FLAG$6 | WRAP_BIND_KEY_FLAG$5);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = func;
      return object.placeholder;
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$5 = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$5 : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$e = Math.min;

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin$e(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER$1 = '__lodash_placeholder__';

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER$1) {
          array[index] = PLACEHOLDER$1;
          result[resIndex++] = index;
        }
      }
      return result;
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$5 = 1,
        WRAP_BIND_KEY_FLAG$4 = 2,
        WRAP_CURRY_FLAG$4 = 8,
        WRAP_CURRY_RIGHT_FLAG$2 = 16,
        WRAP_ARY_FLAG$3 = 128,
        WRAP_FLIP_FLAG$1 = 512;

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG$3,
          isBind = bitmask & WRAP_BIND_FLAG$5,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG$4,
          isCurried = bitmask & (WRAP_CURRY_FLAG$4 | WRAP_CURRY_RIGHT_FLAG$2),
          isFlip = bitmask & WRAP_FLIP_FLAG$1,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$4 = 1;

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG$4,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$3 = 1,
        WRAP_BIND_KEY_FLAG$3 = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG$3 = 8,
        WRAP_ARY_FLAG$2 = 128,
        WRAP_REARG_FLAG$2 = 256;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$d = Math.min;

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG$3 | WRAP_BIND_KEY_FLAG$3 | WRAP_ARY_FLAG$2);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_CURRY_FLAG$3)) ||
        ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_REARG_FLAG$2) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG$2 | WRAP_REARG_FLAG$2)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG$3));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG$3) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG$3 ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG$2) {
        data[8] = data[8] == null ? source[8] : nativeMin$d(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$a = 'Expected a function';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$2 = 1,
        WRAP_BIND_KEY_FLAG$2 = 2,
        WRAP_CURRY_FLAG$2 = 8,
        WRAP_CURRY_RIGHT_FLAG$1 = 16,
        WRAP_PARTIAL_FLAG$4 = 32,
        WRAP_PARTIAL_RIGHT_FLAG$1 = 64;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$e = Math.max;

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG$2;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$a);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG$4 | WRAP_PARTIAL_RIGHT_FLAG$1);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax$e(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG$1) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax$e(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG$2 | WRAP_CURRY_RIGHT_FLAG$1)) {
        bitmask &= ~(WRAP_CURRY_FLAG$2 | WRAP_CURRY_RIGHT_FLAG$1);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG$2) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG$2 || bitmask == WRAP_CURRY_RIGHT_FLAG$1) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG$4 || bitmask == (WRAP_BIND_FLAG$2 | WRAP_PARTIAL_FLAG$4)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_ARY_FLAG$1 = 128;

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG$1, undefined, undefined, undefined, undefined, n);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /** Used for built-in method references. */
    var objectProto$n = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$k = objectProto$n.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$k.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$d = Math.max;

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax$d(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax$d(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$4 = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$4;
    }

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /** Used for built-in method references. */
    var objectProto$m = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$m;

      return value === proto;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /** `Object#toString` result references. */
    var argsTag$3 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag$3;
    }

    /** Used for built-in method references. */
    var objectProto$l = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$j = objectProto$l.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable$1 = objectProto$l.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty$j.call(value, 'callee') &&
        !propertyIsEnumerable$1.call(value, 'callee');
    };

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /** Detect free variable `exports`. */
    var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

    /** Built-in value references. */
    var Buffer$1 = moduleExports$2 ? root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /** `Object#toString` result references. */
    var argsTag$2 = '[object Arguments]',
        arrayTag$2 = '[object Array]',
        boolTag$4 = '[object Boolean]',
        dateTag$4 = '[object Date]',
        errorTag$3 = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag$9 = '[object Map]',
        numberTag$4 = '[object Number]',
        objectTag$4 = '[object Object]',
        regexpTag$4 = '[object RegExp]',
        setTag$9 = '[object Set]',
        stringTag$4 = '[object String]',
        weakMapTag$3 = '[object WeakMap]';

    var arrayBufferTag$4 = '[object ArrayBuffer]',
        dataViewTag$4 = '[object DataView]',
        float32Tag$2 = '[object Float32Array]',
        float64Tag$2 = '[object Float64Array]',
        int8Tag$2 = '[object Int8Array]',
        int16Tag$2 = '[object Int16Array]',
        int32Tag$2 = '[object Int32Array]',
        uint8Tag$2 = '[object Uint8Array]',
        uint8ClampedTag$2 = '[object Uint8ClampedArray]',
        uint16Tag$2 = '[object Uint16Array]',
        uint32Tag$2 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
    typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
    typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
    typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
    typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
    typedArrayTags[arrayBufferTag$4] = typedArrayTags[boolTag$4] =
    typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$4] =
    typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag$9] = typedArrayTags[numberTag$4] =
    typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$4] =
    typedArrayTags[setTag$9] = typedArrayTags[stringTag$4] =
    typedArrayTags[weakMapTag$3] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /** Detect free variable `exports`. */
    var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports$1 && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /** Used for built-in method references. */
    var objectProto$k = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$i = objectProto$k.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$i.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys = overArg(Object.keys, Object);

    /** Used for built-in method references. */
    var objectProto$j = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$h = objectProto$j.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$h.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /** Used for built-in method references. */
    var objectProto$i = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$g = objectProto$i.hasOwnProperty;

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty$g.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$h = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$f = objectProto$h.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty$f.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /* Built-in method references that are verified to be native. */
    var nativeCreate = getNative(Object, 'create');

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$g = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$e = objectProto$g.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? undefined : result;
      }
      return hasOwnProperty$e.call(data, key) ? data[key] : undefined;
    }

    /** Used for built-in method references. */
    var objectProto$f = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$d = objectProto$f.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$d.call(data, key);
    }

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
      return this;
    }

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /** Used for built-in method references. */
    var arrayProto$5 = Array.prototype;

    /** Built-in value references. */
    var splice$2 = arrayProto$5.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice$2.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /* Built-in method references that are verified to be native. */
    var Map$1 = getNative(root, 'Map');

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map$1 || ListCache),
        'string': new Hash
      };
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /** Error message constants. */
    var FUNC_ERROR_TEXT$9 = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT$9);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$3 = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /** Built-in value references. */
    var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : undefined;

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /** Built-in value references. */
    var getPrototype = overArg(Object.getPrototypeOf, Object);

    /** `Object#toString` result references. */
    var objectTag$3 = '[object Object]';

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto$e = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$c = objectProto$e.hasOwnProperty;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty$c.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /** `Object#toString` result references. */
    var domExcTag = '[object DOMException]',
        errorTag$2 = '[object Error]';

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag$2 || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /** Error message constants. */
    var FUNC_ERROR_TEXT$8 = 'Expected a function';

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$8);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$1 = 1,
        WRAP_PARTIAL_FLAG$3 = 32;

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG$1;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG$3;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    // Assign default placeholders.
    bind.placeholder = {};

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG$1 = 2,
        WRAP_PARTIAL_FLAG$2 = 32;

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG$1;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG$2;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    // Assign default placeholders.
    bindKey.placeholder = {};

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /** Used to compose unicode character classes. */
    var rsAstralRange$3 = '\\ud800-\\udfff',
        rsComboMarksRange$4 = '\\u0300-\\u036f',
        reComboHalfMarksRange$4 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$4 = '\\u20d0-\\u20ff',
        rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
        rsVarRange$3 = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsZWJ$3 = '\\u200d';

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ$3 + rsAstralRange$3  + rsComboRange$4 + rsVarRange$3 + ']');

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }

    /** Used to compose unicode character classes. */
    var rsAstralRange$2 = '\\ud800-\\udfff',
        rsComboMarksRange$3 = '\\u0300-\\u036f',
        reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
        rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
        rsVarRange$2 = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsAstral$1 = '[' + rsAstralRange$2 + ']',
        rsCombo$3 = '[' + rsComboRange$3 + ']',
        rsFitz$2 = '\\ud83c[\\udffb-\\udfff]',
        rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
        rsNonAstral$2 = '[^' + rsAstralRange$2 + ']',
        rsRegional$2 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair$2 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsZWJ$2 = '\\u200d';

    /** Used to compose unicode regexes. */
    var reOptMod$2 = rsModifier$2 + '?',
        rsOptVar$2 = '[' + rsVarRange$2 + ']?',
        rsOptJoin$2 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
        rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
        rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode$1) || [];
    }

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to compose unicode character classes. */
    var rsComboMarksRange$2 = '\\u0300-\\u036f',
        reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
        rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;

    /** Used to compose unicode capture groups. */
    var rsCombo$2 = '[' + rsComboRange$2 + ']';

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo$2, 'g');

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    /** Used to compose unicode character classes. */
    var rsAstralRange$1 = '\\ud800-\\udfff',
        rsComboMarksRange$1 = '\\u0300-\\u036f',
        reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
        rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange$1 = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos$1 = "['\u2019]",
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo$1 = '[' + rsComboRange$1 + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange$1 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
        rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
        rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
        rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ$1 = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod$1 = rsModifier$1 + '?',
        rsOptVar$1 = '[' + rsVarRange$1 + ']?',
        rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
        rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
      rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
      rsUpper + '+' + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]";

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsFinite$1 = root.isFinite,
        nativeMin$c = Math.min;

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin$c(toInteger(precision), 292);
        if (precision && nativeIsFinite$1(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil$3 = Math.ceil,
        nativeMax$c = Math.max;

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax$c(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil$3(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$2 = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map$1 || (pairs.length < LARGE_ARRAY_SIZE$2 - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /** Detect free variable `exports`. */
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /** Used for built-in method references. */
    var objectProto$d = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$d.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, 'DataView');

    /* Built-in method references that are verified to be native. */
    var Promise$1 = getNative(root, 'Promise');

    /* Built-in method references that are verified to be native. */
    var Set$1 = getNative(root, 'Set');

    /** `Object#toString` result references. */
    var mapTag$8 = '[object Map]',
        objectTag$2 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$8 = '[object Set]',
        weakMapTag$2 = '[object WeakMap]';

    var dataViewTag$3 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map$1),
        promiseCtorString = toSource(Promise$1),
        setCtorString = toSource(Set$1),
        weakMapCtorString = toSource(WeakMap$1);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$3) ||
        (Map$1 && getTag(new Map$1) != mapTag$8) ||
        (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||
        (Set$1 && getTag(new Set$1) != setTag$8) ||
        (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag$2)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag$2 ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag$3;
            case mapCtorString: return mapTag$8;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag$8;
            case weakMapCtorString: return weakMapTag$2;
          }
        }
        return result;
      };
    }

    var getTag$1 = getTag;

    /** Used for built-in method references. */
    var objectProto$c = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$b = objectProto$c.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty$b.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /** Built-in value references. */
    var Uint8Array$1 = root.Uint8Array;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags$1 = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags$1.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /** `Object#toString` result references. */
    var boolTag$3 = '[object Boolean]',
        dateTag$3 = '[object Date]',
        mapTag$7 = '[object Map]',
        numberTag$3 = '[object Number]',
        regexpTag$3 = '[object RegExp]',
        setTag$7 = '[object Set]',
        stringTag$3 = '[object String]',
        symbolTag$2 = '[object Symbol]';

    var arrayBufferTag$3 = '[object ArrayBuffer]',
        dataViewTag$2 = '[object DataView]',
        float32Tag$1 = '[object Float32Array]',
        float64Tag$1 = '[object Float64Array]',
        int8Tag$1 = '[object Int8Array]',
        int16Tag$1 = '[object Int16Array]',
        int32Tag$1 = '[object Int32Array]',
        uint8Tag$1 = '[object Uint8Array]',
        uint8ClampedTag$1 = '[object Uint8ClampedArray]',
        uint16Tag$1 = '[object Uint16Array]',
        uint32Tag$1 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$3:
          return cloneArrayBuffer(object);

        case boolTag$3:
        case dateTag$3:
          return new Ctor(+object);

        case dataViewTag$2:
          return cloneDataView(object, isDeep);

        case float32Tag$1: case float64Tag$1:
        case int8Tag$1: case int16Tag$1: case int32Tag$1:
        case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
          return cloneTypedArray(object, isDeep);

        case mapTag$7:
          return new Ctor;

        case numberTag$3:
        case stringTag$3:
          return new Ctor(object);

        case regexpTag$3:
          return cloneRegExp(object);

        case setTag$7:
          return new Ctor;

        case symbolTag$2:
          return cloneSymbol(object);
      }
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /** `Object#toString` result references. */
    var mapTag$6 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag$1(value) == mapTag$6;
    }

    /* Node.js helper references. */
    var nodeIsMap = nodeUtil && nodeUtil.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /** `Object#toString` result references. */
    var setTag$6 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag$1(value) == setTag$6;
    }

    /* Node.js helper references. */
    var nodeIsSet = nodeUtil && nodeUtil.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$7 = 1,
        CLONE_FLAT_FLAG$1 = 2,
        CLONE_SYMBOLS_FLAG$5 = 4;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]',
        arrayTag$1 = '[object Array]',
        boolTag$2 = '[object Boolean]',
        dateTag$2 = '[object Date]',
        errorTag$1 = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag$5 = '[object Map]',
        numberTag$2 = '[object Number]',
        objectTag$1 = '[object Object]',
        regexpTag$2 = '[object RegExp]',
        setTag$5 = '[object Set]',
        stringTag$2 = '[object String]',
        symbolTag$1 = '[object Symbol]',
        weakMapTag$1 = '[object WeakMap]';

    var arrayBufferTag$2 = '[object ArrayBuffer]',
        dataViewTag$1 = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
    cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$1] =
    cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag$5] =
    cloneableTags[numberTag$2] = cloneableTags[objectTag$1] =
    cloneableTags[regexpTag$2] = cloneableTags[setTag$5] =
    cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag$1] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG$7,
          isFlat = bitmask & CLONE_FLAT_FLAG$1,
          isFull = bitmask & CLONE_SYMBOLS_FLAG$5;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag$1(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag$1 || tag == argsTag$1 || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_SYMBOLS_FLAG$4 = 4;

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG$4);
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$6 = 1,
        CLONE_SYMBOLS_FLAG$3 = 4;

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep$1(value) {
      return baseClone(value, CLONE_DEEP_FLAG$6 | CLONE_SYMBOLS_FLAG$3);
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$5 = 1,
        CLONE_SYMBOLS_FLAG$2 = 4;

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG$5 | CLONE_SYMBOLS_FLAG$2, customizer);
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_SYMBOLS_FLAG$1 = 4;

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG$1, customizer);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat$a() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$5 = 1,
        COMPARE_UNORDERED_FLAG$3 = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$4 = 1,
        COMPARE_UNORDERED_FLAG$2 = 2;

    /** `Object#toString` result references. */
    var boolTag$1 = '[object Boolean]',
        dateTag$1 = '[object Date]',
        errorTag = '[object Error]',
        mapTag$4 = '[object Map]',
        numberTag$1 = '[object Number]',
        regexpTag$1 = '[object RegExp]',
        setTag$4 = '[object Set]',
        stringTag$1 = '[object String]',
        symbolTag = '[object Symbol]';

    var arrayBufferTag$1 = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag$1:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
            return false;
          }
          return true;

        case boolTag$1:
        case dateTag$1:
        case numberTag$1:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag$1:
        case stringTag$1:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag$4:
          var convert = mapToArray;

        case setTag$4:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$3 = 1;

    /** Used for built-in method references. */
    var objectProto$b = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$a = objectProto$b.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$a.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$2 = 1;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        objectTag = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$a = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$9 = objectProto$a.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag$1(object),
          othTag = othIsArr ? arrayTag : getTag$1(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty$9.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty$9.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$1 = 1,
        COMPARE_UNORDERED_FLAG$1 = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$7 = 'Expected a function';

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = baseIteratee;

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT$7);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$4 = 1;

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG$4));
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, baseIteratee(iteratee), accumulator);
      };
    }

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$8 = objectProto$9.hasOwnProperty;

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty$8.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_CURRY_FLAG$1 = 8;

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG$1, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    // Assign default placeholders.
    curry.placeholder = {};

    /** Used to compose bitmasks for function metadata. */
    var WRAP_CURRY_RIGHT_FLAG = 16;

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    // Assign default placeholders.
    curryRight.placeholder = {};

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = function() {
      return root.Date.now();
    };

    /** Error message constants. */
    var FUNC_ERROR_TEXT$6 = 'Expected a function';

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$b = Math.max,
        nativeMin$b = Math.min;

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$6);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax$b(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin$b(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /** Used for built-in method references. */
    var objectProto$8 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults$1 = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto$8[key]) && !hasOwnProperty$7.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /** Error message constants. */
    var FUNC_ERROR_TEXT$5 = 'Expected a function';

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$5);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$1 = 200;

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE$1) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, baseIteratee(predicate), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, baseIteratee(predicate), true)
        : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, castFunction(iteratee));
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, castFunction(iteratee));
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }

    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }

    /** `Object#toString` result references. */
    var mapTag$3 = '[object Map]',
        setTag$3 = '[object Set]';

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag$1(object);
        if (tag == mapTag$3) {
          return mapToArray(object);
        }
        if (tag == setTag$3) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    /** Used to match HTML entities and HTML characters. */
    var reUnescapedHtml = /[&<>"']/g,
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape$2(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, baseIteratee(predicate));
    }

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$5 = 4294967295;

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH$5) : 0;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, baseIteratee(predicate));
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = baseIteratee(predicate);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$a = Math.max;

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax$a(length + index, 0);
      }
      return baseFindIndex(array, baseIteratee(predicate), index);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, baseIteratee(predicate), baseForOwn);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$9 = Math.max,
        nativeMin$a = Math.min;

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax$9(length + index, 0)
          : nativeMin$a(index, length - 1);
      }
      return baseFindIndex(array, baseIteratee(predicate), index, true);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, baseIteratee(predicate), baseForOwnRight);
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, baseIteratee(iteratee));
    }

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$2 = 1 / 0;

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY$2);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0;

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY$1) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_FLIP_FLAG = 512;

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /** Error message constants. */
    var FUNC_ERROR_TEXT$4 = 'Expected a function';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_CURRY_FLAG = 8,
        WRAP_PARTIAL_FLAG$1 = 32,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG$1 = 256;

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT$4);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG$1 | WRAP_REARG_FLAG$1) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, castFunction(iteratee), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, castFunction(iteratee), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, castFunction(iteratee));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, castFunction(iteratee));
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty$6.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /** Used for built-in method references. */
    var objectProto$6 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty$5.call(object, key);
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$8 = Math.max,
        nativeMin$9 = Math.min;

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin$9(start, end) && number < nativeMax$8(start, end);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /** `Object#toString` result references. */
    var stringTag = '[object String]';

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$7 = Math.max;

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax$7(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$6 = Math.max;

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax$6(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$8 = Math.min;

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin$8(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, baseIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /** Used for built-in method references. */
    var objectProto$5 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$5.toString;

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString$1.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$4.toString;

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty$4.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, baseIteratee);

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    var arrayBufferTag = '[object ArrayBuffer]';

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /* Node.js helper references. */
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /** `Object#toString` result references. */
    var boolTag = '[object Boolean]';

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /** `Object#toString` result references. */
    var dateTag = '[object Date]';

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /* Node.js helper references. */
    var nodeIsDate = nodeUtil && nodeUtil.isDate;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /** `Object#toString` result references. */
    var mapTag$2 = '[object Map]',
        setTag$2 = '[object Set]';

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag$1(value);
      if (tag == mapTag$2 || tag == setTag$2) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty$3.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual$2(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsFinite = root.isFinite;

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /** `Object#toString` result references. */
    var numberTag = '[object Number]';

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /** Error message constants. */
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.';

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /** `Object#toString` result references. */
    var regexpTag = '[object RegExp]';

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /* Node.js helper references. */
    var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$3 = 9007199254740991;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER$3 && value <= MAX_SAFE_INTEGER$3;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /** `Object#toString` result references. */
    var weakMapTag = '[object WeakMap]';

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag$1(value) == weakMapTag;
    }

    /** `Object#toString` result references. */
    var weakSetTag = '[object WeakSet]';

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$3 = 1;

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG$3));
    }

    /** Used for built-in method references. */
    var arrayProto$4 = Array.prototype;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeJoin = arrayProto$4.join;

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join$1(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$5 = Math.max,
        nativeMin$7 = Math.min;

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax$5(length + index, 0) : nativeMin$7(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$2 = 1;

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG$2));
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$1 = 1;

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG$1));
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, baseIteratee(iteratee), baseGt)
        : undefined;
    }

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined) {
          result = result === undefined ? current : (result + current);
        }
      }
      return result;
    }

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? (baseSum(array, iteratee) / length) : NAN;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, baseIteratee(iteratee));
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, baseIteratee(iteratee), baseLt)
        : undefined;
    }

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin$1(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /** Error message constants. */
    var FUNC_ERROR_TEXT$3 = 'Expected a function';

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$3);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */
    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }

    /** `Object#toString` result references. */
    var mapTag$1 = '[object Map]',
        setTag$1 = '[object Set]';

    /** Built-in value references. */
    var symIterator$1 = Symbol$1 ? Symbol$1.iterator : undefined;

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator$1 && value[symIterator$1]) {
        return iteratorToArray(value[symIterator$1]());
      }
      var tag = getTag$1(value),
          func = tag == mapTag$1 ? mapToArray : (tag == setTag$1 ? setToArray : values);

      return func(value);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = baseIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(baseIteratee(predicate)));
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$6 = Math.min;

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(baseIteratee))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(baseIteratee));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin$6(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$2 = 9007199254740991;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeFloor$3 = Math.floor;

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER$2) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor$3(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = baseProperty('length');

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsVarRange = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsAstral = '[' + rsAstralRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return hasUnicode(string)
        ? unicodeSize(string)
        : asciiSize(string);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil$2 = Math.ceil;

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil$2(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil$1 = Math.ceil,
        nativeFloor$2 = Math.floor;

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor$2(mid), chars) +
        string +
        createPadding(nativeCeil$1(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /** Used to match leading whitespace. */
    var reTrimStart$1 = /^\s+/;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeParseInt = root.parseInt;

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt$1(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart$1, ''), radix || 0);
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_PARTIAL_FLAG = 32;

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    // Assign default placeholders.
    partial.placeholder = {};

    /** Used to compose bitmasks for function metadata. */
    var WRAP_PARTIAL_RIGHT_FLAG = 64;

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    // Assign default placeholders.
    partialRight.placeholder = {};

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /** Used for built-in method references. */
    var arrayProto$3 = Array.prototype;

    /** Built-in value references. */
    var splice$1 = arrayProto$3.splice;

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice$1.call(seen, fromIndex, 1);
          }
          splice$1.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, baseIteratee(iteratee))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /** Used for built-in method references. */
    var arrayProto$2 = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto$2.splice;

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeFloor$1 = Math.floor,
        nativeRandom$1 = Math.random;

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor$1(nativeRandom$1() * (upper - lower + 1));
    }

    /** Built-in method references without a dependency on `root`. */
    var freeParseFloat = parseFloat;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$5 = Math.min,
        nativeRandom = Math.random;

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin$5(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeMax$4 = Math.max;

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax$4(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /** Used to compose bitmasks for function metadata. */
    var WRAP_REARG_FLAG = 256;

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, baseIteratee(iteratee), accumulator, initAccum, baseEach);
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, baseIteratee(iteratee), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(baseIteratee(predicate)));
    }

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = baseIteratee(predicate);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$2 = 'Expected a function';

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$2);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /** Used for built-in method references. */
    var arrayProto$1 = Array.prototype;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeReverse = arrayProto$1.reverse;

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        setTag = '[object Set]';

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag$1(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, baseIteratee(predicate));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$4 = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH$4 - 1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeFloor = Math.floor,
        nativeMin$4 = Math.min;

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin$4(high, MAX_ARRAY_INDEX);
    }

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$3 = 4294967295,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH$3 >>> 1;

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, baseIteratee(iteratee));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, baseIteratee(iteratee), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, baseIteratee(iteratee))
        : [];
    }

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$2 = 4294967295;

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH$2 : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$1 = 'Expected a function';

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$3 = Math.max;

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      start = start == null ? 0 : nativeMax$3(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith$1(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, baseIteratee(iteratee))
        : 0;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, baseIteratee(predicate), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, baseIteratee(predicate))
        : [];
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto$2[key]) && !hasOwnProperty$2.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    /** Used to match template delimiters. */
    var reInterpolate = /<%=([\s\S]+?)%>/g;

    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g;

    /** Used to match template delimiters. */
    var reEvaluate = /<%([\s\S]+?)%>/g;

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    var templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': { 'escape': escape$2 }
      }
    };

    /** Error message constants. */
    var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    /**
     * Used to validate the `validate` option in `_.template` variable.
     *
     * Forbids characters which could potentially change the meaning of the function argument definition:
     * - "()," (modification of function parameters)
     * - "=" (default value)
     * - "[]{}" (destructuring of function parameters)
     * - "/" (beginning of a comment)
     * - whitespace
     */
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

    /**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;

    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = templateSettings.imports._.templateSettings || templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = hasOwnProperty$1.call(options, 'sourceURL')
        ? ('//# sourceURL=' +
           (options.sourceURL + '').replace(/\s/g, ' ') +
           '\n')
        : '';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty$1.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle$1(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$1 = 4294967295;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$3 = Math.min;

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER$1) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH$1,
          length = nativeMin$3(n, MAX_ARRAY_LENGTH$1);

      iteratee = castFunction(iteratee);
      n -= MAX_ARRAY_LENGTH$1;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = baseIteratee(iteratee);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /** Used to match leading whitespace. */
    var reTrimStart = /^\s+/;

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /** Used as default options for `_.truncate`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source);

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set$1 && (1 / setToArray(new Set$1([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set$1(values);
    };

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, baseIteratee(iteratee)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$2 = Math.max;

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax$2(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), baseIteratee(iteratee));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    var array = {
      chunk, compact, concat: concat$a, difference, differenceBy,
      differenceWith, drop, dropRight, dropRightWhile, dropWhile,
      fill, findIndex, findLastIndex, first: head, flatten,
      flattenDeep, flattenDepth, fromPairs, head, indexOf,
      initial, intersection, intersectionBy, intersectionWith, join: join$1,
      last, lastIndexOf, nth, pull, pullAll,
      pullAllBy, pullAllWith, pullAt, remove, reverse,
      slice, sortedIndex, sortedIndexBy, sortedIndexOf, sortedLastIndex,
      sortedLastIndexBy, sortedLastIndexOf, sortedUniq, sortedUniqBy, tail,
      take, takeRight, takeRightWhile, takeWhile, union,
      unionBy, unionWith, uniq, uniqBy, uniqWith,
      unzip, unzipWith, without, xor, xorBy,
      xorWith, zip, zipObject, zipObjectDeep, zipWith
    };

    var collection = {
      countBy, each: forEach, eachRight: forEachRight, every, filter,
      find, findLast, flatMap, flatMapDeep, flatMapDepth,
      forEach, forEachRight, groupBy, includes, invokeMap,
      keyBy, map, orderBy, partition, reduce,
      reduceRight, reject, sample, sampleSize, shuffle,
      size, some, sortBy
    };

    var date = {
      now
    };

    var func = {
      after, ary, before, bind, bindKey,
      curry, curryRight, debounce, defer, delay,
      flip, memoize, negate, once, overArgs,
      partial, partialRight, rearg, rest, spread,
      throttle: throttle$1, unary, wrap
    };

    var lang = {
      castArray, clone, cloneDeep: cloneDeep$1, cloneDeepWith, cloneWith,
      conformsTo, eq, gt, gte, isArguments,
      isArray, isArrayBuffer, isArrayLike, isArrayLikeObject, isBoolean,
      isBuffer, isDate, isElement, isEmpty, isEqual: isEqual$2,
      isEqualWith, isError, isFinite, isFunction, isInteger,
      isLength, isMap, isMatch, isMatchWith, isNaN,
      isNative, isNil, isNull, isNumber, isObject,
      isObjectLike, isPlainObject, isRegExp, isSafeInteger, isSet,
      isString, isSymbol, isTypedArray, isUndefined, isWeakMap,
      isWeakSet, lt, lte, toArray, toFinite,
      toInteger, toLength, toNumber, toPlainObject, toSafeInteger,
      toString
    };

    var math = {
      add, ceil, divide, floor, max,
      maxBy, mean, meanBy, min, minBy,
      multiply, round, subtract, sum, sumBy
    };

    var number = {
      clamp, inRange, random
    };

    var object = {
      assign, assignIn, assignInWith, assignWith, at,
      create, defaults: defaults$1, defaultsDeep, entries: toPairs, entriesIn: toPairsIn,
      extend: assignIn, extendWith: assignInWith, findKey, findLastKey, forIn,
      forInRight, forOwn, forOwnRight, functions, functionsIn,
      get, has, hasIn, invert, invertBy,
      invoke, keys, keysIn, mapKeys, mapValues,
      merge, mergeWith, omit, omitBy, pick,
      pickBy, result, set, setWith, toPairs,
      toPairsIn, transform, unset, update, updateWith,
      values, valuesIn
    };

    var seq = {
      at: wrapperAt, chain, commit: wrapperCommit, lodash, next: wrapperNext,
      plant: wrapperPlant, reverse: wrapperReverse, tap, thru, toIterator: wrapperToIterator,
      toJSON: wrapperValue, value: wrapperValue, valueOf: wrapperValue, wrapperChain
    };

    var string = {
      camelCase, capitalize, deburr, endsWith, escape: escape$2,
      escapeRegExp, kebabCase, lowerCase, lowerFirst, pad,
      padEnd, padStart, parseInt: parseInt$1, repeat, replace,
      snakeCase, split, startCase, startsWith: startsWith$1, template,
      templateSettings, toLower, toUpper, trim, trimEnd,
      trimStart, truncate, unescape, upperCase, upperFirst,
      words
    };

    var util = {
      attempt, bindAll, cond, conforms, constant,
      defaultTo, flow, flowRight, identity, iteratee,
      matches, matchesProperty, method, methodOf, mixin: mixin$1,
      noop, nthArg, over, overEvery, overSome,
      property, propertyOf, range, rangeRight, stubArray,
      stubFalse, stubObject, stubString, stubTrue, times,
      toPath, uniqueId
    };

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$1 = Math.max,
        nativeMin$2 = Math.min;

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin$2(end, start + size); break;
          case 'takeRight': start = nativeMax$1(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG$1 = 1,
        LAZY_MAP_FLAG = 2;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$1 = Math.min;

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin$1(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG$1) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /**
     * @license
     * Lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="es" -o ./`
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the semantic version number. */
    var VERSION = '4.17.21';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_KEY_FLAG = 2;

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_WHILE_FLAG = 3;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Built-in value references. */
    var symIterator = Symbol$1 ? Symbol$1.iterator : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max,
        nativeMin = Math.min;

    // wrap `_.mixin` so it works when provided only one argument
    var mixin = (function(func) {
      return function(object, source, options) {
        if (options == null) {
          var isObj = isObject(source),
              props = isObj && keys(source),
              methodNames = props && props.length && baseFunctions(source, props);

          if (!(methodNames ? methodNames.length : isObj)) {
            options = source;
            source = object;
            object = this;
          }
        }
        return func(object, source, options);
      };
    }(mixin$1));

    // Add methods that return wrapped values in chain sequences.
    lodash.after = func.after;
    lodash.ary = func.ary;
    lodash.assign = object.assign;
    lodash.assignIn = object.assignIn;
    lodash.assignInWith = object.assignInWith;
    lodash.assignWith = object.assignWith;
    lodash.at = object.at;
    lodash.before = func.before;
    lodash.bind = func.bind;
    lodash.bindAll = util.bindAll;
    lodash.bindKey = func.bindKey;
    lodash.castArray = lang.castArray;
    lodash.chain = seq.chain;
    lodash.chunk = array.chunk;
    lodash.compact = array.compact;
    lodash.concat = array.concat;
    lodash.cond = util.cond;
    lodash.conforms = util.conforms;
    lodash.constant = util.constant;
    lodash.countBy = collection.countBy;
    lodash.create = object.create;
    lodash.curry = func.curry;
    lodash.curryRight = func.curryRight;
    lodash.debounce = func.debounce;
    lodash.defaults = object.defaults;
    lodash.defaultsDeep = object.defaultsDeep;
    lodash.defer = func.defer;
    lodash.delay = func.delay;
    lodash.difference = array.difference;
    lodash.differenceBy = array.differenceBy;
    lodash.differenceWith = array.differenceWith;
    lodash.drop = array.drop;
    lodash.dropRight = array.dropRight;
    lodash.dropRightWhile = array.dropRightWhile;
    lodash.dropWhile = array.dropWhile;
    lodash.fill = array.fill;
    lodash.filter = collection.filter;
    lodash.flatMap = collection.flatMap;
    lodash.flatMapDeep = collection.flatMapDeep;
    lodash.flatMapDepth = collection.flatMapDepth;
    lodash.flatten = array.flatten;
    lodash.flattenDeep = array.flattenDeep;
    lodash.flattenDepth = array.flattenDepth;
    lodash.flip = func.flip;
    lodash.flow = util.flow;
    lodash.flowRight = util.flowRight;
    lodash.fromPairs = array.fromPairs;
    lodash.functions = object.functions;
    lodash.functionsIn = object.functionsIn;
    lodash.groupBy = collection.groupBy;
    lodash.initial = array.initial;
    lodash.intersection = array.intersection;
    lodash.intersectionBy = array.intersectionBy;
    lodash.intersectionWith = array.intersectionWith;
    lodash.invert = object.invert;
    lodash.invertBy = object.invertBy;
    lodash.invokeMap = collection.invokeMap;
    lodash.iteratee = util.iteratee;
    lodash.keyBy = collection.keyBy;
    lodash.keys = keys;
    lodash.keysIn = object.keysIn;
    lodash.map = collection.map;
    lodash.mapKeys = object.mapKeys;
    lodash.mapValues = object.mapValues;
    lodash.matches = util.matches;
    lodash.matchesProperty = util.matchesProperty;
    lodash.memoize = func.memoize;
    lodash.merge = object.merge;
    lodash.mergeWith = object.mergeWith;
    lodash.method = util.method;
    lodash.methodOf = util.methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = util.nthArg;
    lodash.omit = object.omit;
    lodash.omitBy = object.omitBy;
    lodash.once = func.once;
    lodash.orderBy = collection.orderBy;
    lodash.over = util.over;
    lodash.overArgs = func.overArgs;
    lodash.overEvery = util.overEvery;
    lodash.overSome = util.overSome;
    lodash.partial = func.partial;
    lodash.partialRight = func.partialRight;
    lodash.partition = collection.partition;
    lodash.pick = object.pick;
    lodash.pickBy = object.pickBy;
    lodash.property = util.property;
    lodash.propertyOf = util.propertyOf;
    lodash.pull = array.pull;
    lodash.pullAll = array.pullAll;
    lodash.pullAllBy = array.pullAllBy;
    lodash.pullAllWith = array.pullAllWith;
    lodash.pullAt = array.pullAt;
    lodash.range = util.range;
    lodash.rangeRight = util.rangeRight;
    lodash.rearg = func.rearg;
    lodash.reject = collection.reject;
    lodash.remove = array.remove;
    lodash.rest = func.rest;
    lodash.reverse = array.reverse;
    lodash.sampleSize = collection.sampleSize;
    lodash.set = object.set;
    lodash.setWith = object.setWith;
    lodash.shuffle = collection.shuffle;
    lodash.slice = array.slice;
    lodash.sortBy = collection.sortBy;
    lodash.sortedUniq = array.sortedUniq;
    lodash.sortedUniqBy = array.sortedUniqBy;
    lodash.split = string.split;
    lodash.spread = func.spread;
    lodash.tail = array.tail;
    lodash.take = array.take;
    lodash.takeRight = array.takeRight;
    lodash.takeRightWhile = array.takeRightWhile;
    lodash.takeWhile = array.takeWhile;
    lodash.tap = seq.tap;
    lodash.throttle = func.throttle;
    lodash.thru = thru;
    lodash.toArray = lang.toArray;
    lodash.toPairs = object.toPairs;
    lodash.toPairsIn = object.toPairsIn;
    lodash.toPath = util.toPath;
    lodash.toPlainObject = lang.toPlainObject;
    lodash.transform = object.transform;
    lodash.unary = func.unary;
    lodash.union = array.union;
    lodash.unionBy = array.unionBy;
    lodash.unionWith = array.unionWith;
    lodash.uniq = array.uniq;
    lodash.uniqBy = array.uniqBy;
    lodash.uniqWith = array.uniqWith;
    lodash.unset = object.unset;
    lodash.unzip = array.unzip;
    lodash.unzipWith = array.unzipWith;
    lodash.update = object.update;
    lodash.updateWith = object.updateWith;
    lodash.values = object.values;
    lodash.valuesIn = object.valuesIn;
    lodash.without = array.without;
    lodash.words = string.words;
    lodash.wrap = func.wrap;
    lodash.xor = array.xor;
    lodash.xorBy = array.xorBy;
    lodash.xorWith = array.xorWith;
    lodash.zip = array.zip;
    lodash.zipObject = array.zipObject;
    lodash.zipObjectDeep = array.zipObjectDeep;
    lodash.zipWith = array.zipWith;

    // Add aliases.
    lodash.entries = object.toPairs;
    lodash.entriesIn = object.toPairsIn;
    lodash.extend = object.assignIn;
    lodash.extendWith = object.assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = math.add;
    lodash.attempt = util.attempt;
    lodash.camelCase = string.camelCase;
    lodash.capitalize = string.capitalize;
    lodash.ceil = math.ceil;
    lodash.clamp = number.clamp;
    lodash.clone = lang.clone;
    lodash.cloneDeep = lang.cloneDeep;
    lodash.cloneDeepWith = lang.cloneDeepWith;
    lodash.cloneWith = lang.cloneWith;
    lodash.conformsTo = lang.conformsTo;
    lodash.deburr = string.deburr;
    lodash.defaultTo = util.defaultTo;
    lodash.divide = math.divide;
    lodash.endsWith = string.endsWith;
    lodash.eq = lang.eq;
    lodash.escape = string.escape;
    lodash.escapeRegExp = string.escapeRegExp;
    lodash.every = collection.every;
    lodash.find = collection.find;
    lodash.findIndex = array.findIndex;
    lodash.findKey = object.findKey;
    lodash.findLast = collection.findLast;
    lodash.findLastIndex = array.findLastIndex;
    lodash.findLastKey = object.findLastKey;
    lodash.floor = math.floor;
    lodash.forEach = collection.forEach;
    lodash.forEachRight = collection.forEachRight;
    lodash.forIn = object.forIn;
    lodash.forInRight = object.forInRight;
    lodash.forOwn = object.forOwn;
    lodash.forOwnRight = object.forOwnRight;
    lodash.get = object.get;
    lodash.gt = lang.gt;
    lodash.gte = lang.gte;
    lodash.has = object.has;
    lodash.hasIn = object.hasIn;
    lodash.head = array.head;
    lodash.identity = identity;
    lodash.includes = collection.includes;
    lodash.indexOf = array.indexOf;
    lodash.inRange = number.inRange;
    lodash.invoke = object.invoke;
    lodash.isArguments = lang.isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = lang.isArrayBuffer;
    lodash.isArrayLike = lang.isArrayLike;
    lodash.isArrayLikeObject = lang.isArrayLikeObject;
    lodash.isBoolean = lang.isBoolean;
    lodash.isBuffer = lang.isBuffer;
    lodash.isDate = lang.isDate;
    lodash.isElement = lang.isElement;
    lodash.isEmpty = lang.isEmpty;
    lodash.isEqual = lang.isEqual;
    lodash.isEqualWith = lang.isEqualWith;
    lodash.isError = lang.isError;
    lodash.isFinite = lang.isFinite;
    lodash.isFunction = lang.isFunction;
    lodash.isInteger = lang.isInteger;
    lodash.isLength = lang.isLength;
    lodash.isMap = lang.isMap;
    lodash.isMatch = lang.isMatch;
    lodash.isMatchWith = lang.isMatchWith;
    lodash.isNaN = lang.isNaN;
    lodash.isNative = lang.isNative;
    lodash.isNil = lang.isNil;
    lodash.isNull = lang.isNull;
    lodash.isNumber = lang.isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = lang.isObjectLike;
    lodash.isPlainObject = lang.isPlainObject;
    lodash.isRegExp = lang.isRegExp;
    lodash.isSafeInteger = lang.isSafeInteger;
    lodash.isSet = lang.isSet;
    lodash.isString = lang.isString;
    lodash.isSymbol = lang.isSymbol;
    lodash.isTypedArray = lang.isTypedArray;
    lodash.isUndefined = lang.isUndefined;
    lodash.isWeakMap = lang.isWeakMap;
    lodash.isWeakSet = lang.isWeakSet;
    lodash.join = array.join;
    lodash.kebabCase = string.kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = array.lastIndexOf;
    lodash.lowerCase = string.lowerCase;
    lodash.lowerFirst = string.lowerFirst;
    lodash.lt = lang.lt;
    lodash.lte = lang.lte;
    lodash.max = math.max;
    lodash.maxBy = math.maxBy;
    lodash.mean = math.mean;
    lodash.meanBy = math.meanBy;
    lodash.min = math.min;
    lodash.minBy = math.minBy;
    lodash.stubArray = util.stubArray;
    lodash.stubFalse = util.stubFalse;
    lodash.stubObject = util.stubObject;
    lodash.stubString = util.stubString;
    lodash.stubTrue = util.stubTrue;
    lodash.multiply = math.multiply;
    lodash.nth = array.nth;
    lodash.noop = util.noop;
    lodash.now = date.now;
    lodash.pad = string.pad;
    lodash.padEnd = string.padEnd;
    lodash.padStart = string.padStart;
    lodash.parseInt = string.parseInt;
    lodash.random = number.random;
    lodash.reduce = collection.reduce;
    lodash.reduceRight = collection.reduceRight;
    lodash.repeat = string.repeat;
    lodash.replace = string.replace;
    lodash.result = object.result;
    lodash.round = math.round;
    lodash.sample = collection.sample;
    lodash.size = collection.size;
    lodash.snakeCase = string.snakeCase;
    lodash.some = collection.some;
    lodash.sortedIndex = array.sortedIndex;
    lodash.sortedIndexBy = array.sortedIndexBy;
    lodash.sortedIndexOf = array.sortedIndexOf;
    lodash.sortedLastIndex = array.sortedLastIndex;
    lodash.sortedLastIndexBy = array.sortedLastIndexBy;
    lodash.sortedLastIndexOf = array.sortedLastIndexOf;
    lodash.startCase = string.startCase;
    lodash.startsWith = string.startsWith;
    lodash.subtract = math.subtract;
    lodash.sum = math.sum;
    lodash.sumBy = math.sumBy;
    lodash.template = string.template;
    lodash.times = util.times;
    lodash.toFinite = lang.toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = lang.toLength;
    lodash.toLower = string.toLower;
    lodash.toNumber = lang.toNumber;
    lodash.toSafeInteger = lang.toSafeInteger;
    lodash.toString = lang.toString;
    lodash.toUpper = string.toUpper;
    lodash.trim = string.trim;
    lodash.trimEnd = string.trimEnd;
    lodash.trimStart = string.trimStart;
    lodash.truncate = string.truncate;
    lodash.unescape = string.unescape;
    lodash.uniqueId = util.uniqueId;
    lodash.upperCase = string.upperCase;
    lodash.upperFirst = string.upperFirst;

    // Add aliases.
    lodash.each = collection.forEach;
    lodash.eachRight = collection.forEachRight;
    lodash.first = array.head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;
    (lodash.templateSettings = string.templateSettings).imports._ = lodash;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': baseIteratee(iteratee),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(baseIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = seq.at;
    lodash.prototype.chain = seq.wrapperChain;
    lodash.prototype.commit = seq.commit;
    lodash.prototype.next = seq.next;
    lodash.prototype.plant = seq.plant;
    lodash.prototype.reverse = seq.reverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = seq.value;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = seq.toIterator;
    }

    var Scope = /* @__PURE__ */ ((Scope2) => (Scope2[Scope2.TYPE = 3] = "TYPE", Scope2[Scope2.LEVEL = 12] = "LEVEL", Scope2[Scope2.ATTRIBUTE = 13] = "ATTRIBUTE", Scope2[Scope2.BLOT = 14] = "BLOT", Scope2[Scope2.INLINE = 7] = "INLINE", Scope2[Scope2.BLOCK = 11] = "BLOCK", Scope2[Scope2.BLOCK_BLOT = 10] = "BLOCK_BLOT", Scope2[Scope2.INLINE_BLOT = 6] = "INLINE_BLOT", Scope2[Scope2.BLOCK_ATTRIBUTE = 9] = "BLOCK_ATTRIBUTE", Scope2[Scope2.INLINE_ATTRIBUTE = 5] = "INLINE_ATTRIBUTE", Scope2[Scope2.ANY = 15] = "ANY", Scope2))(Scope || {});
    class Attributor {
      constructor(attrName, keyName, options = {}) {
        this.attrName = attrName, this.keyName = keyName;
        const attributeBit = Scope.TYPE & Scope.ATTRIBUTE;
        this.scope = options.scope != null ? (
          // Ignore type bits, force attribute bit
          options.scope & Scope.LEVEL | attributeBit
        ) : Scope.ATTRIBUTE, options.whitelist != null && (this.whitelist = options.whitelist);
      }
      static keys(node) {
        return Array.from(node.attributes).map((item) => item.name);
      }
      add(node, value) {
        return this.canAdd(node, value) ? (node.setAttribute(this.keyName, value), !0) : !1;
      }
      canAdd(_node, value) {
        return this.whitelist == null ? !0 : typeof value == "string" ? this.whitelist.indexOf(value.replace(/["']/g, "")) > -1 : this.whitelist.indexOf(value) > -1;
      }
      remove(node) {
        node.removeAttribute(this.keyName);
      }
      value(node) {
        const value = node.getAttribute(this.keyName);
        return this.canAdd(node, value) && value ? value : "";
      }
    }
    class ParchmentError extends Error {
      constructor(message) {
        message = "[Parchment] " + message, super(message), this.message = message, this.name = this.constructor.name;
      }
    }
    const _Registry = class _Registry {
      constructor() {
        this.attributes = {}, this.classes = {}, this.tags = {}, this.types = {};
      }
      static find(node, bubble = !1) {
        if (node == null)
          return null;
        if (this.blots.has(node))
          return this.blots.get(node) || null;
        if (bubble) {
          let parentNode = null;
          try {
            parentNode = node.parentNode;
          } catch {
            return null;
          }
          return this.find(parentNode, bubble);
        }
        return null;
      }
      create(scroll, input, value) {
        const match2 = this.query(input);
        if (match2 == null)
          throw new ParchmentError(`Unable to create ${input} blot`);
        const blotClass = match2, node = (
          // @ts-expect-error Fix me later
          input instanceof Node || input.nodeType === Node.TEXT_NODE ? input : blotClass.create(value)
        ), blot = new blotClass(scroll, node, value);
        return _Registry.blots.set(blot.domNode, blot), blot;
      }
      find(node, bubble = !1) {
        return _Registry.find(node, bubble);
      }
      query(query, scope = Scope.ANY) {
        let match2;
        return typeof query == "string" ? match2 = this.types[query] || this.attributes[query] : query instanceof Text || query.nodeType === Node.TEXT_NODE ? match2 = this.types.text : typeof query == "number" ? query & Scope.LEVEL & Scope.BLOCK ? match2 = this.types.block : query & Scope.LEVEL & Scope.INLINE && (match2 = this.types.inline) : query instanceof Element && ((query.getAttribute("class") || "").split(/\s+/).some((name) => (match2 = this.classes[name], !!match2)), match2 = match2 || this.tags[query.tagName]), match2 == null ? null : "scope" in match2 && scope & Scope.LEVEL & match2.scope && scope & Scope.TYPE & match2.scope ? match2 : null;
      }
      register(...definitions) {
        return definitions.map((definition) => {
          const isBlot = "blotName" in definition, isAttr = "attrName" in definition;
          if (!isBlot && !isAttr)
            throw new ParchmentError("Invalid definition");
          if (isBlot && definition.blotName === "abstract")
            throw new ParchmentError("Cannot register abstract class");
          const key = isBlot ? definition.blotName : isAttr ? definition.attrName : void 0;
          return this.types[key] = definition, isAttr ? typeof definition.keyName == "string" && (this.attributes[definition.keyName] = definition) : isBlot && (definition.className && (this.classes[definition.className] = definition), definition.tagName && (Array.isArray(definition.tagName) ? definition.tagName = definition.tagName.map((tagName) => tagName.toUpperCase()) : definition.tagName = definition.tagName.toUpperCase(), (Array.isArray(definition.tagName) ? definition.tagName : [definition.tagName]).forEach((tag) => {
            (this.tags[tag] == null || definition.className == null) && (this.tags[tag] = definition);
          }))), definition;
        });
      }
    };
    _Registry.blots = /* @__PURE__ */ new WeakMap();
    let Registry = _Registry;
    function match(node, prefix) {
      return (node.getAttribute("class") || "").split(/\s+/).filter((name) => name.indexOf(`${prefix}-`) === 0);
    }
    class ClassAttributor extends Attributor {
      static keys(node) {
        return (node.getAttribute("class") || "").split(/\s+/).map((name) => name.split("-").slice(0, -1).join("-"));
      }
      add(node, value) {
        return this.canAdd(node, value) ? (this.remove(node), node.classList.add(`${this.keyName}-${value}`), !0) : !1;
      }
      remove(node) {
        match(node, this.keyName).forEach((name) => {
          node.classList.remove(name);
        }), node.classList.length === 0 && node.removeAttribute("class");
      }
      value(node) {
        const value = (match(node, this.keyName)[0] || "").slice(this.keyName.length + 1);
        return this.canAdd(node, value) ? value : "";
      }
    }
    const ClassAttributor$1 = ClassAttributor;
    function camelize(name) {
      const parts = name.split("-"), rest = parts.slice(1).map((part) => part[0].toUpperCase() + part.slice(1)).join("");
      return parts[0] + rest;
    }
    class StyleAttributor extends Attributor {
      static keys(node) {
        return (node.getAttribute("style") || "").split(";").map((value) => value.split(":")[0].trim());
      }
      add(node, value) {
        return this.canAdd(node, value) ? (node.style[camelize(this.keyName)] = value, !0) : !1;
      }
      remove(node) {
        node.style[camelize(this.keyName)] = "", node.getAttribute("style") || node.removeAttribute("style");
      }
      value(node) {
        const value = node.style[camelize(this.keyName)];
        return this.canAdd(node, value) ? value : "";
      }
    }
    const StyleAttributor$1 = StyleAttributor;
    class AttributorStore {
      constructor(domNode) {
        this.attributes = {}, this.domNode = domNode, this.build();
      }
      attribute(attribute, value) {
        value ? attribute.add(this.domNode, value) && (attribute.value(this.domNode) != null ? this.attributes[attribute.attrName] = attribute : delete this.attributes[attribute.attrName]) : (attribute.remove(this.domNode), delete this.attributes[attribute.attrName]);
      }
      build() {
        this.attributes = {};
        const blot = Registry.find(this.domNode);
        if (blot == null)
          return;
        const attributes = Attributor.keys(this.domNode), classes = ClassAttributor$1.keys(this.domNode), styles = StyleAttributor$1.keys(this.domNode);
        attributes.concat(classes).concat(styles).forEach((name) => {
          const attr = blot.scroll.query(name, Scope.ATTRIBUTE);
          attr instanceof Attributor && (this.attributes[attr.attrName] = attr);
        });
      }
      copy(target) {
        Object.keys(this.attributes).forEach((key) => {
          const value = this.attributes[key].value(this.domNode);
          target.format(key, value);
        });
      }
      move(target) {
        this.copy(target), Object.keys(this.attributes).forEach((key) => {
          this.attributes[key].remove(this.domNode);
        }), this.attributes = {};
      }
      values() {
        return Object.keys(this.attributes).reduce(
          (attributes, name) => (attributes[name] = this.attributes[name].value(this.domNode), attributes),
          {}
        );
      }
    }
    const AttributorStore$1 = AttributorStore, _ShadowBlot = class _ShadowBlot {
      constructor(scroll, domNode) {
        this.scroll = scroll, this.domNode = domNode, Registry.blots.set(domNode, this), this.prev = null, this.next = null;
      }
      static create(rawValue) {
        if (this.tagName == null)
          throw new ParchmentError("Blot definition missing tagName");
        let node, value;
        return Array.isArray(this.tagName) ? (typeof rawValue == "string" ? (value = rawValue.toUpperCase(), parseInt(value, 10).toString() === value && (value = parseInt(value, 10))) : typeof rawValue == "number" && (value = rawValue), typeof value == "number" ? node = document.createElement(this.tagName[value - 1]) : value && this.tagName.indexOf(value) > -1 ? node = document.createElement(value) : node = document.createElement(this.tagName[0])) : node = document.createElement(this.tagName), this.className && node.classList.add(this.className), node;
      }
      // Hack for accessing inherited static methods
      get statics() {
        return this.constructor;
      }
      attach() {
      }
      clone() {
        const domNode = this.domNode.cloneNode(!1);
        return this.scroll.create(domNode);
      }
      detach() {
        this.parent != null && this.parent.removeChild(this), Registry.blots.delete(this.domNode);
      }
      deleteAt(index, length) {
        this.isolate(index, length).remove();
      }
      formatAt(index, length, name, value) {
        const blot = this.isolate(index, length);
        if (this.scroll.query(name, Scope.BLOT) != null && value)
          blot.wrap(name, value);
        else if (this.scroll.query(name, Scope.ATTRIBUTE) != null) {
          const parent = this.scroll.create(this.statics.scope);
          blot.wrap(parent), parent.format(name, value);
        }
      }
      insertAt(index, value, def) {
        const blot = def == null ? this.scroll.create("text", value) : this.scroll.create(value, def), ref = this.split(index);
        this.parent.insertBefore(blot, ref || void 0);
      }
      isolate(index, length) {
        const target = this.split(index);
        if (target == null)
          throw new Error("Attempt to isolate at end");
        return target.split(length), target;
      }
      length() {
        return 1;
      }
      offset(root = this.parent) {
        return this.parent == null || this === root ? 0 : this.parent.children.offset(this) + this.parent.offset(root);
      }
      optimize(_context) {
        this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer) && this.wrap(this.statics.requiredContainer.blotName);
      }
      remove() {
        this.domNode.parentNode != null && this.domNode.parentNode.removeChild(this.domNode), this.detach();
      }
      replaceWith(name, value) {
        const replacement = typeof name == "string" ? this.scroll.create(name, value) : name;
        return this.parent != null && (this.parent.insertBefore(replacement, this.next || void 0), this.remove()), replacement;
      }
      split(index, _force) {
        return index === 0 ? this : this.next;
      }
      update(_mutations, _context) {
      }
      wrap(name, value) {
        const wrapper = typeof name == "string" ? this.scroll.create(name, value) : name;
        if (this.parent != null && this.parent.insertBefore(wrapper, this.next || void 0), typeof wrapper.appendChild != "function")
          throw new ParchmentError(`Cannot wrap ${name}`);
        return wrapper.appendChild(this), wrapper;
      }
    };
    _ShadowBlot.blotName = "abstract";
    let ShadowBlot = _ShadowBlot;
    const _LeafBlot = class _LeafBlot extends ShadowBlot {
      /**
       * Returns the value represented by domNode if it is this Blot's type
       * No checking that domNode can represent this Blot type is required so
       * applications needing it should check externally before calling.
       */
      static value(_domNode) {
        return !0;
      }
      /**
       * Given location represented by node and offset from DOM Selection Range,
       * return index to that location.
       */
      index(node, offset) {
        return this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY ? Math.min(offset, 1) : -1;
      }
      /**
       * Given index to location within blot, return node and offset representing
       * that location, consumable by DOM Selection Range
       */
      position(index, _inclusive) {
        let offset = Array.from(this.parent.domNode.childNodes).indexOf(this.domNode);
        return index > 0 && (offset += 1), [this.parent.domNode, offset];
      }
      /**
       * Return value represented by this blot
       * Should not change without interaction from API or
       * user change detectable by update()
       */
      value() {
        return {
          [this.statics.blotName]: this.statics.value(this.domNode) || !0
        };
      }
    };
    _LeafBlot.scope = Scope.INLINE_BLOT;
    let LeafBlot = _LeafBlot;
    const LeafBlot$1 = LeafBlot;
    class LinkedList {
      constructor() {
        this.head = null, this.tail = null, this.length = 0;
      }
      append(...nodes) {
        if (this.insertBefore(nodes[0], null), nodes.length > 1) {
          const rest = nodes.slice(1);
          this.append(...rest);
        }
      }
      at(index) {
        const next = this.iterator();
        let cur = next();
        for (; cur && index > 0; )
          index -= 1, cur = next();
        return cur;
      }
      contains(node) {
        const next = this.iterator();
        let cur = next();
        for (; cur; ) {
          if (cur === node)
            return !0;
          cur = next();
        }
        return !1;
      }
      indexOf(node) {
        const next = this.iterator();
        let cur = next(), index = 0;
        for (; cur; ) {
          if (cur === node)
            return index;
          index += 1, cur = next();
        }
        return -1;
      }
      insertBefore(node, refNode) {
        node != null && (this.remove(node), node.next = refNode, refNode != null ? (node.prev = refNode.prev, refNode.prev != null && (refNode.prev.next = node), refNode.prev = node, refNode === this.head && (this.head = node)) : this.tail != null ? (this.tail.next = node, node.prev = this.tail, this.tail = node) : (node.prev = null, this.head = this.tail = node), this.length += 1);
      }
      offset(target) {
        let index = 0, cur = this.head;
        for (; cur != null; ) {
          if (cur === target)
            return index;
          index += cur.length(), cur = cur.next;
        }
        return -1;
      }
      remove(node) {
        this.contains(node) && (node.prev != null && (node.prev.next = node.next), node.next != null && (node.next.prev = node.prev), node === this.head && (this.head = node.next), node === this.tail && (this.tail = node.prev), this.length -= 1);
      }
      iterator(curNode = this.head) {
        return () => {
          const ret = curNode;
          return curNode != null && (curNode = curNode.next), ret;
        };
      }
      find(index, inclusive = !1) {
        const next = this.iterator();
        let cur = next();
        for (; cur; ) {
          const length = cur.length();
          if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0))
            return [cur, index];
          index -= length, cur = next();
        }
        return [null, 0];
      }
      forEach(callback) {
        const next = this.iterator();
        let cur = next();
        for (; cur; )
          callback(cur), cur = next();
      }
      forEachAt(index, length, callback) {
        if (length <= 0)
          return;
        const [startNode, offset] = this.find(index);
        let curIndex = index - offset;
        const next = this.iterator(startNode);
        let cur = next();
        for (; cur && curIndex < index + length; ) {
          const curLength = cur.length();
          index > curIndex ? callback(
            cur,
            index - curIndex,
            Math.min(length, curIndex + curLength - index)
          ) : callback(cur, 0, Math.min(curLength, index + length - curIndex)), curIndex += curLength, cur = next();
        }
      }
      map(callback) {
        return this.reduce((memo, cur) => (memo.push(callback(cur)), memo), []);
      }
      reduce(callback, memo) {
        const next = this.iterator();
        let cur = next();
        for (; cur; )
          memo = callback(memo, cur), cur = next();
        return memo;
      }
    }
    function makeAttachedBlot(node, scroll) {
      const found = scroll.find(node);
      if (found)
        return found;
      try {
        return scroll.create(node);
      } catch {
        const blot = scroll.create(Scope.INLINE);
        return Array.from(node.childNodes).forEach((child) => {
          blot.domNode.appendChild(child);
        }), node.parentNode && node.parentNode.replaceChild(blot.domNode, node), blot.attach(), blot;
      }
    }
    const _ParentBlot = class _ParentBlot extends ShadowBlot {
      constructor(scroll, domNode) {
        super(scroll, domNode), this.uiNode = null, this.build();
      }
      appendChild(other) {
        this.insertBefore(other);
      }
      attach() {
        super.attach(), this.children.forEach((child) => {
          child.attach();
        });
      }
      attachUI(node) {
        this.uiNode != null && this.uiNode.remove(), this.uiNode = node, _ParentBlot.uiClass && this.uiNode.classList.add(_ParentBlot.uiClass), this.uiNode.setAttribute("contenteditable", "false"), this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);
      }
      /**
       * Called during construction, should fill its own children LinkedList.
       */
      build() {
        this.children = new LinkedList(), Array.from(this.domNode.childNodes).filter((node) => node !== this.uiNode).reverse().forEach((node) => {
          try {
            const child = makeAttachedBlot(node, this.scroll);
            this.insertBefore(child, this.children.head || void 0);
          } catch (err) {
            if (err instanceof ParchmentError)
              return;
            throw err;
          }
        });
      }
      deleteAt(index, length) {
        if (index === 0 && length === this.length())
          return this.remove();
        this.children.forEachAt(index, length, (child, offset, childLength) => {
          child.deleteAt(offset, childLength);
        });
      }
      descendant(criteria, index = 0) {
        const [child, offset] = this.children.find(index);
        return criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria ? [child, offset] : child instanceof _ParentBlot ? child.descendant(criteria, offset) : [null, -1];
      }
      descendants(criteria, index = 0, length = Number.MAX_VALUE) {
        let descendants = [], lengthLeft = length;
        return this.children.forEachAt(
          index,
          length,
          (child, childIndex, childLength) => {
            (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) && descendants.push(child), child instanceof _ParentBlot && (descendants = descendants.concat(
              child.descendants(criteria, childIndex, lengthLeft)
            )), lengthLeft -= childLength;
          }
        ), descendants;
      }
      detach() {
        this.children.forEach((child) => {
          child.detach();
        }), super.detach();
      }
      enforceAllowedChildren() {
        let done = !1;
        this.children.forEach((child) => {
          done || this.statics.allowedChildren.some(
            (def) => child instanceof def
          ) || (child.statics.scope === Scope.BLOCK_BLOT ? (child.next != null && this.splitAfter(child), child.prev != null && this.splitAfter(child.prev), child.parent.unwrap(), done = !0) : child instanceof _ParentBlot ? child.unwrap() : child.remove());
        });
      }
      formatAt(index, length, name, value) {
        this.children.forEachAt(index, length, (child, offset, childLength) => {
          child.formatAt(offset, childLength, name, value);
        });
      }
      insertAt(index, value, def) {
        const [child, offset] = this.children.find(index);
        if (child)
          child.insertAt(offset, value, def);
        else {
          const blot = def == null ? this.scroll.create("text", value) : this.scroll.create(value, def);
          this.appendChild(blot);
        }
      }
      insertBefore(childBlot, refBlot) {
        childBlot.parent != null && childBlot.parent.children.remove(childBlot);
        let refDomNode = null;
        this.children.insertBefore(childBlot, refBlot || null), childBlot.parent = this, refBlot != null && (refDomNode = refBlot.domNode), (this.domNode.parentNode !== childBlot.domNode || this.domNode.nextSibling !== refDomNode) && this.domNode.insertBefore(childBlot.domNode, refDomNode), childBlot.attach();
      }
      length() {
        return this.children.reduce((memo, child) => memo + child.length(), 0);
      }
      moveChildren(targetParent, refNode) {
        this.children.forEach((child) => {
          targetParent.insertBefore(child, refNode);
        });
      }
      optimize(context) {
        if (super.optimize(context), this.enforceAllowedChildren(), this.uiNode != null && this.uiNode !== this.domNode.firstChild && this.domNode.insertBefore(this.uiNode, this.domNode.firstChild), this.children.length === 0)
          if (this.statics.defaultChild != null) {
            const child = this.scroll.create(this.statics.defaultChild.blotName);
            this.appendChild(child);
          } else
            this.remove();
      }
      path(index, inclusive = !1) {
        const [child, offset] = this.children.find(index, inclusive), position = [[this, index]];
        return child instanceof _ParentBlot ? position.concat(child.path(offset, inclusive)) : (child != null && position.push([child, offset]), position);
      }
      removeChild(child) {
        this.children.remove(child);
      }
      replaceWith(name, value) {
        const replacement = typeof name == "string" ? this.scroll.create(name, value) : name;
        return replacement instanceof _ParentBlot && this.moveChildren(replacement), super.replaceWith(replacement);
      }
      split(index, force = !1) {
        if (!force) {
          if (index === 0)
            return this;
          if (index === this.length())
            return this.next;
        }
        const after = this.clone();
        return this.parent && this.parent.insertBefore(after, this.next || void 0), this.children.forEachAt(index, this.length(), (child, offset, _length) => {
          const split = child.split(offset, force);
          split != null && after.appendChild(split);
        }), after;
      }
      splitAfter(child) {
        const after = this.clone();
        for (; child.next != null; )
          after.appendChild(child.next);
        return this.parent && this.parent.insertBefore(after, this.next || void 0), after;
      }
      unwrap() {
        this.parent && this.moveChildren(this.parent, this.next || void 0), this.remove();
      }
      update(mutations, _context) {
        const addedNodes = [], removedNodes = [];
        mutations.forEach((mutation) => {
          mutation.target === this.domNode && mutation.type === "childList" && (addedNodes.push(...mutation.addedNodes), removedNodes.push(...mutation.removedNodes));
        }), removedNodes.forEach((node) => {
          if (node.parentNode != null && // @ts-expect-error Fix me later
          node.tagName !== "IFRAME" && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY)
            return;
          const blot = this.scroll.find(node);
          blot != null && (blot.domNode.parentNode == null || blot.domNode.parentNode === this.domNode) && blot.detach();
        }), addedNodes.filter((node) => node.parentNode === this.domNode && node !== this.uiNode).sort((a, b) => a === b ? 0 : a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING ? 1 : -1).forEach((node) => {
          let refBlot = null;
          node.nextSibling != null && (refBlot = this.scroll.find(node.nextSibling));
          const blot = makeAttachedBlot(node, this.scroll);
          (blot.next !== refBlot || blot.next == null) && (blot.parent != null && blot.parent.removeChild(this), this.insertBefore(blot, refBlot || void 0));
        }), this.enforceAllowedChildren();
      }
    };
    _ParentBlot.uiClass = "";
    let ParentBlot = _ParentBlot;
    const ParentBlot$1 = ParentBlot;
    function isEqual$1(obj1, obj2) {
      if (Object.keys(obj1).length !== Object.keys(obj2).length)
        return !1;
      for (const prop in obj1)
        if (obj1[prop] !== obj2[prop])
          return !1;
      return !0;
    }
    const _InlineBlot = class _InlineBlot extends ParentBlot$1 {
      static create(value) {
        return super.create(value);
      }
      static formats(domNode, scroll) {
        const match2 = scroll.query(_InlineBlot.blotName);
        if (!(match2 != null && domNode.tagName === match2.tagName)) {
          if (typeof this.tagName == "string")
            return !0;
          if (Array.isArray(this.tagName))
            return domNode.tagName.toLowerCase();
        }
      }
      constructor(scroll, domNode) {
        super(scroll, domNode), this.attributes = new AttributorStore$1(this.domNode);
      }
      format(name, value) {
        if (name === this.statics.blotName && !value)
          this.children.forEach((child) => {
            child instanceof _InlineBlot || (child = child.wrap(_InlineBlot.blotName, !0)), this.attributes.copy(child);
          }), this.unwrap();
        else {
          const format = this.scroll.query(name, Scope.INLINE);
          if (format == null)
            return;
          format instanceof Attributor ? this.attributes.attribute(format, value) : value && (name !== this.statics.blotName || this.formats()[name] !== value) && this.replaceWith(name, value);
        }
      }
      formats() {
        const formats = this.attributes.values(), format = this.statics.formats(this.domNode, this.scroll);
        return format != null && (formats[this.statics.blotName] = format), formats;
      }
      formatAt(index, length, name, value) {
        this.formats()[name] != null || this.scroll.query(name, Scope.ATTRIBUTE) ? this.isolate(index, length).format(name, value) : super.formatAt(index, length, name, value);
      }
      optimize(context) {
        super.optimize(context);
        const formats = this.formats();
        if (Object.keys(formats).length === 0)
          return this.unwrap();
        const next = this.next;
        next instanceof _InlineBlot && next.prev === this && isEqual$1(formats, next.formats()) && (next.moveChildren(this), next.remove());
      }
      replaceWith(name, value) {
        const replacement = super.replaceWith(name, value);
        return this.attributes.copy(replacement), replacement;
      }
      update(mutations, context) {
        super.update(mutations, context), mutations.some(
          (mutation) => mutation.target === this.domNode && mutation.type === "attributes"
        ) && this.attributes.build();
      }
      wrap(name, value) {
        const wrapper = super.wrap(name, value);
        return wrapper instanceof _InlineBlot && this.attributes.move(wrapper), wrapper;
      }
    };
    _InlineBlot.allowedChildren = [_InlineBlot, LeafBlot$1], _InlineBlot.blotName = "inline", _InlineBlot.scope = Scope.INLINE_BLOT, _InlineBlot.tagName = "SPAN";
    let InlineBlot = _InlineBlot;
    const InlineBlot$1 = InlineBlot, _BlockBlot = class _BlockBlot extends ParentBlot$1 {
      static create(value) {
        return super.create(value);
      }
      static formats(domNode, scroll) {
        const match2 = scroll.query(_BlockBlot.blotName);
        if (!(match2 != null && domNode.tagName === match2.tagName)) {
          if (typeof this.tagName == "string")
            return !0;
          if (Array.isArray(this.tagName))
            return domNode.tagName.toLowerCase();
        }
      }
      constructor(scroll, domNode) {
        super(scroll, domNode), this.attributes = new AttributorStore$1(this.domNode);
      }
      format(name, value) {
        const format = this.scroll.query(name, Scope.BLOCK);
        format != null && (format instanceof Attributor ? this.attributes.attribute(format, value) : name === this.statics.blotName && !value ? this.replaceWith(_BlockBlot.blotName) : value && (name !== this.statics.blotName || this.formats()[name] !== value) && this.replaceWith(name, value));
      }
      formats() {
        const formats = this.attributes.values(), format = this.statics.formats(this.domNode, this.scroll);
        return format != null && (formats[this.statics.blotName] = format), formats;
      }
      formatAt(index, length, name, value) {
        this.scroll.query(name, Scope.BLOCK) != null ? this.format(name, value) : super.formatAt(index, length, name, value);
      }
      insertAt(index, value, def) {
        if (def == null || this.scroll.query(value, Scope.INLINE) != null)
          super.insertAt(index, value, def);
        else {
          const after = this.split(index);
          if (after != null) {
            const blot = this.scroll.create(value, def);
            after.parent.insertBefore(blot, after);
          } else
            throw new Error("Attempt to insertAt after block boundaries");
        }
      }
      replaceWith(name, value) {
        const replacement = super.replaceWith(name, value);
        return this.attributes.copy(replacement), replacement;
      }
      update(mutations, context) {
        super.update(mutations, context), mutations.some(
          (mutation) => mutation.target === this.domNode && mutation.type === "attributes"
        ) && this.attributes.build();
      }
    };
    _BlockBlot.blotName = "block", _BlockBlot.scope = Scope.BLOCK_BLOT, _BlockBlot.tagName = "P", _BlockBlot.allowedChildren = [
      InlineBlot$1,
      _BlockBlot,
      LeafBlot$1
    ];
    let BlockBlot = _BlockBlot;
    const BlockBlot$1 = BlockBlot, _ContainerBlot = class _ContainerBlot extends ParentBlot$1 {
      checkMerge() {
        return this.next !== null && this.next.statics.blotName === this.statics.blotName;
      }
      deleteAt(index, length) {
        super.deleteAt(index, length), this.enforceAllowedChildren();
      }
      formatAt(index, length, name, value) {
        super.formatAt(index, length, name, value), this.enforceAllowedChildren();
      }
      insertAt(index, value, def) {
        super.insertAt(index, value, def), this.enforceAllowedChildren();
      }
      optimize(context) {
        super.optimize(context), this.children.length > 0 && this.next != null && this.checkMerge() && (this.next.moveChildren(this), this.next.remove());
      }
    };
    _ContainerBlot.blotName = "container", _ContainerBlot.scope = Scope.BLOCK_BLOT;
    let ContainerBlot = _ContainerBlot;
    const ContainerBlot$1 = ContainerBlot;
    class EmbedBlot extends LeafBlot$1 {
      static formats(_domNode, _scroll) {
      }
      format(name, value) {
        super.formatAt(0, this.length(), name, value);
      }
      formatAt(index, length, name, value) {
        index === 0 && length === this.length() ? this.format(name, value) : super.formatAt(index, length, name, value);
      }
      formats() {
        return this.statics.formats(this.domNode, this.scroll);
      }
    }
    const EmbedBlot$1 = EmbedBlot, OBSERVER_CONFIG = {
      attributes: !0,
      characterData: !0,
      characterDataOldValue: !0,
      childList: !0,
      subtree: !0
    }, MAX_OPTIMIZE_ITERATIONS = 100, _ScrollBlot = class _ScrollBlot extends ParentBlot$1 {
      constructor(registry, node) {
        super(null, node), this.registry = registry, this.scroll = this, this.build(), this.observer = new MutationObserver((mutations) => {
          this.update(mutations);
        }), this.observer.observe(this.domNode, OBSERVER_CONFIG), this.attach();
      }
      create(input, value) {
        return this.registry.create(this, input, value);
      }
      find(node, bubble = !1) {
        const blot = this.registry.find(node, bubble);
        return blot ? blot.scroll === this ? blot : bubble ? this.find(blot.scroll.domNode.parentNode, !0) : null : null;
      }
      query(query, scope = Scope.ANY) {
        return this.registry.query(query, scope);
      }
      register(...definitions) {
        return this.registry.register(...definitions);
      }
      build() {
        this.scroll != null && super.build();
      }
      detach() {
        super.detach(), this.observer.disconnect();
      }
      deleteAt(index, length) {
        this.update(), index === 0 && length === this.length() ? this.children.forEach((child) => {
          child.remove();
        }) : super.deleteAt(index, length);
      }
      formatAt(index, length, name, value) {
        this.update(), super.formatAt(index, length, name, value);
      }
      insertAt(index, value, def) {
        this.update(), super.insertAt(index, value, def);
      }
      optimize(mutations = [], context = {}) {
        super.optimize(context);
        const mutationsMap = context.mutationsMap || /* @__PURE__ */ new WeakMap();
        let records = Array.from(this.observer.takeRecords());
        for (; records.length > 0; )
          mutations.push(records.pop());
        const mark = (blot, markParent = !0) => {
          blot == null || blot === this || blot.domNode.parentNode != null && (mutationsMap.has(blot.domNode) || mutationsMap.set(blot.domNode, []), markParent && mark(blot.parent));
        }, optimize = (blot) => {
          mutationsMap.has(blot.domNode) && (blot instanceof ParentBlot$1 && blot.children.forEach(optimize), mutationsMap.delete(blot.domNode), blot.optimize(context));
        };
        let remaining = mutations;
        for (let i = 0; remaining.length > 0; i += 1) {
          if (i >= MAX_OPTIMIZE_ITERATIONS)
            throw new Error("[Parchment] Maximum optimize iterations reached");
          for (remaining.forEach((mutation) => {
            const blot = this.find(mutation.target, !0);
            blot != null && (blot.domNode === mutation.target && (mutation.type === "childList" ? (mark(this.find(mutation.previousSibling, !1)), Array.from(mutation.addedNodes).forEach((node) => {
              const child = this.find(node, !1);
              mark(child, !1), child instanceof ParentBlot$1 && child.children.forEach((grandChild) => {
                mark(grandChild, !1);
              });
            })) : mutation.type === "attributes" && mark(blot.prev)), mark(blot));
          }), this.children.forEach(optimize), remaining = Array.from(this.observer.takeRecords()), records = remaining.slice(); records.length > 0; )
            mutations.push(records.pop());
        }
      }
      update(mutations, context = {}) {
        mutations = mutations || this.observer.takeRecords();
        const mutationsMap = /* @__PURE__ */ new WeakMap();
        mutations.map((mutation) => {
          const blot = this.find(mutation.target, !0);
          return blot == null ? null : mutationsMap.has(blot.domNode) ? (mutationsMap.get(blot.domNode).push(mutation), null) : (mutationsMap.set(blot.domNode, [mutation]), blot);
        }).forEach((blot) => {
          blot != null && blot !== this && mutationsMap.has(blot.domNode) && blot.update(mutationsMap.get(blot.domNode) || [], context);
        }), context.mutationsMap = mutationsMap, mutationsMap.has(this.domNode) && super.update(mutationsMap.get(this.domNode), context), this.optimize(mutations, context);
      }
    };
    _ScrollBlot.blotName = "scroll", _ScrollBlot.defaultChild = BlockBlot$1, _ScrollBlot.allowedChildren = [BlockBlot$1, ContainerBlot$1], _ScrollBlot.scope = Scope.BLOCK_BLOT, _ScrollBlot.tagName = "DIV";
    let ScrollBlot = _ScrollBlot;
    const ScrollBlot$1 = ScrollBlot, _TextBlot = class _TextBlot extends LeafBlot$1 {
      static create(value) {
        return document.createTextNode(value);
      }
      static value(domNode) {
        return domNode.data;
      }
      constructor(scroll, node) {
        super(scroll, node), this.text = this.statics.value(this.domNode);
      }
      deleteAt(index, length) {
        this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
      }
      index(node, offset) {
        return this.domNode === node ? offset : -1;
      }
      insertAt(index, value, def) {
        def == null ? (this.text = this.text.slice(0, index) + value + this.text.slice(index), this.domNode.data = this.text) : super.insertAt(index, value, def);
      }
      length() {
        return this.text.length;
      }
      optimize(context) {
        super.optimize(context), this.text = this.statics.value(this.domNode), this.text.length === 0 ? this.remove() : this.next instanceof _TextBlot && this.next.prev === this && (this.insertAt(this.length(), this.next.value()), this.next.remove());
      }
      position(index, _inclusive = !1) {
        return [this.domNode, index];
      }
      split(index, force = !1) {
        if (!force) {
          if (index === 0)
            return this;
          if (index === this.length())
            return this.next;
        }
        const after = this.scroll.create(this.domNode.splitText(index));
        return this.parent.insertBefore(after, this.next || void 0), this.text = this.statics.value(this.domNode), after;
      }
      update(mutations, _context) {
        mutations.some((mutation) => mutation.type === "characterData" && mutation.target === this.domNode) && (this.text = this.statics.value(this.domNode));
      }
      value() {
        return this.text;
      }
    };
    _TextBlot.blotName = "text", _TextBlot.scope = Scope.INLINE_BLOT;
    let TextBlot = _TextBlot;
    const TextBlot$1 = TextBlot;

    var Parchment$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Attributor: Attributor,
        AttributorStore: AttributorStore$1,
        BlockBlot: BlockBlot$1,
        ClassAttributor: ClassAttributor$1,
        ContainerBlot: ContainerBlot$1,
        EmbedBlot: EmbedBlot$1,
        InlineBlot: InlineBlot$1,
        LeafBlot: LeafBlot$1,
        ParentBlot: ParentBlot$1,
        Registry: Registry,
        Scope: Scope,
        ScrollBlot: ScrollBlot$1,
        StyleAttributor: StyleAttributor$1,
        TextBlot: TextBlot$1
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var DeltaExports = {};
    var Delta$4 = {
      get exports(){ return DeltaExports; },
      set exports(v){ DeltaExports = v; },
    };

    /**
     * This library modifies the diff-patch-match library by Neil Fraser
     * by removing the patch and match functionality and certain advanced
     * options in the diff function. The original license is as follows:
     *
     * ===
     *
     * Diff Match and Patch
     *
     * Copyright 2006 Google Inc.
     * http://code.google.com/p/google-diff-match-patch/
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * The data structure representing a diff is an array of tuples:
     * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
     * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
     */
    var DIFF_DELETE$1 = -1;
    var DIFF_INSERT$1 = 1;
    var DIFF_EQUAL$1 = 0;

    /**
     * Find the differences between two texts.  Simplifies the problem by stripping
     * any common prefix or suffix off the texts before diffing.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info
     * @param {boolean} [cleanup] Apply semantic cleanup before returning.
     * @return {Array} Array of diff tuples.
     */
    function diff_main$1(text1, text2, cursor_pos, cleanup, _fix_unicode) {
      // Check for equality
      if (text1 === text2) {
        if (text1) {
          return [[DIFF_EQUAL$1, text1]];
        }
        return [];
      }

      if (cursor_pos != null) {
        var editdiff = find_cursor_edit_diff$1(text1, text2, cursor_pos);
        if (editdiff) {
          return editdiff;
        }
      }

      // Trim off common prefix (speedup).
      var commonlength = diff_commonPrefix$1(text1, text2);
      var commonprefix = text1.substring(0, commonlength);
      text1 = text1.substring(commonlength);
      text2 = text2.substring(commonlength);

      // Trim off common suffix (speedup).
      commonlength = diff_commonSuffix$1(text1, text2);
      var commonsuffix = text1.substring(text1.length - commonlength);
      text1 = text1.substring(0, text1.length - commonlength);
      text2 = text2.substring(0, text2.length - commonlength);

      // Compute the diff on the middle block.
      var diffs = diff_compute_$1(text1, text2);

      // Restore the prefix and suffix.
      if (commonprefix) {
        diffs.unshift([DIFF_EQUAL$1, commonprefix]);
      }
      if (commonsuffix) {
        diffs.push([DIFF_EQUAL$1, commonsuffix]);
      }
      diff_cleanupMerge$1(diffs, _fix_unicode);
      if (cleanup) {
        diff_cleanupSemantic(diffs);
      }
      return diffs;
    }

    /**
     * Find the differences between two texts.  Assumes that the texts do not
     * have any common prefix or suffix.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @return {Array} Array of diff tuples.
     */
    function diff_compute_$1(text1, text2) {
      var diffs;

      if (!text1) {
        // Just add some text (speedup).
        return [[DIFF_INSERT$1, text2]];
      }

      if (!text2) {
        // Just delete some text (speedup).
        return [[DIFF_DELETE$1, text1]];
      }

      var longtext = text1.length > text2.length ? text1 : text2;
      var shorttext = text1.length > text2.length ? text2 : text1;
      var i = longtext.indexOf(shorttext);
      if (i !== -1) {
        // Shorter text is inside the longer text (speedup).
        diffs = [
          [DIFF_INSERT$1, longtext.substring(0, i)],
          [DIFF_EQUAL$1, shorttext],
          [DIFF_INSERT$1, longtext.substring(i + shorttext.length)],
        ];
        // Swap insertions for deletions if diff is reversed.
        if (text1.length > text2.length) {
          diffs[0][0] = diffs[2][0] = DIFF_DELETE$1;
        }
        return diffs;
      }

      if (shorttext.length === 1) {
        // Single character string.
        // After the previous speedup, the character can't be an equality.
        return [
          [DIFF_DELETE$1, text1],
          [DIFF_INSERT$1, text2],
        ];
      }

      // Check to see if the problem can be split in two.
      var hm = diff_halfMatch_$1(text1, text2);
      if (hm) {
        // A half-match was found, sort out the return data.
        var text1_a = hm[0];
        var text1_b = hm[1];
        var text2_a = hm[2];
        var text2_b = hm[3];
        var mid_common = hm[4];
        // Send both pairs off for separate processing.
        var diffs_a = diff_main$1(text1_a, text2_a);
        var diffs_b = diff_main$1(text1_b, text2_b);
        // Merge the results.
        return diffs_a.concat([[DIFF_EQUAL$1, mid_common]], diffs_b);
      }

      return diff_bisect_$1(text1, text2);
    }

    /**
     * Find the 'middle snake' of a diff, split the problem in two
     * and return the recursively constructed diff.
     * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @return {Array} Array of diff tuples.
     * @private
     */
    function diff_bisect_$1(text1, text2) {
      // Cache the text lengths to prevent multiple calls.
      var text1_length = text1.length;
      var text2_length = text2.length;
      var max_d = Math.ceil((text1_length + text2_length) / 2);
      var v_offset = max_d;
      var v_length = 2 * max_d;
      var v1 = new Array(v_length);
      var v2 = new Array(v_length);
      // Setting all elements to -1 is faster in Chrome & Firefox than mixing
      // integers and undefined.
      for (var x = 0; x < v_length; x++) {
        v1[x] = -1;
        v2[x] = -1;
      }
      v1[v_offset + 1] = 0;
      v2[v_offset + 1] = 0;
      var delta = text1_length - text2_length;
      // If the total number of characters is odd, then the front path will collide
      // with the reverse path.
      var front = delta % 2 !== 0;
      // Offsets for start and end of k loop.
      // Prevents mapping of space beyond the grid.
      var k1start = 0;
      var k1end = 0;
      var k2start = 0;
      var k2end = 0;
      for (var d = 0; d < max_d; d++) {
        // Walk the front path one step.
        for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
          var k1_offset = v_offset + k1;
          var x1;
          if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
            x1 = v1[k1_offset + 1];
          } else {
            x1 = v1[k1_offset - 1] + 1;
          }
          var y1 = x1 - k1;
          while (
            x1 < text1_length &&
            y1 < text2_length &&
            text1.charAt(x1) === text2.charAt(y1)
          ) {
            x1++;
            y1++;
          }
          v1[k1_offset] = x1;
          if (x1 > text1_length) {
            // Ran off the right of the graph.
            k1end += 2;
          } else if (y1 > text2_length) {
            // Ran off the bottom of the graph.
            k1start += 2;
          } else if (front) {
            var k2_offset = v_offset + delta - k1;
            if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {
              // Mirror x2 onto top-left coordinate system.
              var x2 = text1_length - v2[k2_offset];
              if (x1 >= x2) {
                // Overlap detected.
                return diff_bisectSplit_$1(text1, text2, x1, y1);
              }
            }
          }
        }

        // Walk the reverse path one step.
        for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
          var k2_offset = v_offset + k2;
          var x2;
          if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
            x2 = v2[k2_offset + 1];
          } else {
            x2 = v2[k2_offset - 1] + 1;
          }
          var y2 = x2 - k2;
          while (
            x2 < text1_length &&
            y2 < text2_length &&
            text1.charAt(text1_length - x2 - 1) ===
              text2.charAt(text2_length - y2 - 1)
          ) {
            x2++;
            y2++;
          }
          v2[k2_offset] = x2;
          if (x2 > text1_length) {
            // Ran off the left of the graph.
            k2end += 2;
          } else if (y2 > text2_length) {
            // Ran off the top of the graph.
            k2start += 2;
          } else if (!front) {
            var k1_offset = v_offset + delta - k2;
            if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {
              var x1 = v1[k1_offset];
              var y1 = v_offset + x1 - k1_offset;
              // Mirror x2 onto top-left coordinate system.
              x2 = text1_length - x2;
              if (x1 >= x2) {
                // Overlap detected.
                return diff_bisectSplit_$1(text1, text2, x1, y1);
              }
            }
          }
        }
      }
      // Diff took too long and hit the deadline or
      // number of diffs equals number of characters, no commonality at all.
      return [
        [DIFF_DELETE$1, text1],
        [DIFF_INSERT$1, text2],
      ];
    }

    /**
     * Given the location of the 'middle snake', split the diff in two parts
     * and recurse.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {number} x Index of split point in text1.
     * @param {number} y Index of split point in text2.
     * @return {Array} Array of diff tuples.
     */
    function diff_bisectSplit_$1(text1, text2, x, y) {
      var text1a = text1.substring(0, x);
      var text2a = text2.substring(0, y);
      var text1b = text1.substring(x);
      var text2b = text2.substring(y);

      // Compute both diffs serially.
      var diffs = diff_main$1(text1a, text2a);
      var diffsb = diff_main$1(text1b, text2b);

      return diffs.concat(diffsb);
    }

    /**
     * Determine the common prefix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the start of each
     *     string.
     */
    function diff_commonPrefix$1(text1, text2) {
      // Quick check for common null cases.
      if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {
        return 0;
      }
      // Binary search.
      // Performance analysis: http://neil.fraser.name/news/2007/10/09/
      var pointermin = 0;
      var pointermax = Math.min(text1.length, text2.length);
      var pointermid = pointermax;
      var pointerstart = 0;
      while (pointermin < pointermid) {
        if (
          text1.substring(pointerstart, pointermid) ==
          text2.substring(pointerstart, pointermid)
        ) {
          pointermin = pointermid;
          pointerstart = pointermin;
        } else {
          pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }

      if (is_surrogate_pair_start$1(text1.charCodeAt(pointermid - 1))) {
        pointermid--;
      }

      return pointermid;
    }

    /**
     * Determine if the suffix of one string is the prefix of another.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the end of the first
     *     string and the start of the second string.
     * @private
     */
    function diff_commonOverlap_(text1, text2) {
      // Cache the text lengths to prevent multiple calls.
      var text1_length = text1.length;
      var text2_length = text2.length;
      // Eliminate the null case.
      if (text1_length == 0 || text2_length == 0) {
        return 0;
      }
      // Truncate the longer string.
      if (text1_length > text2_length) {
        text1 = text1.substring(text1_length - text2_length);
      } else if (text1_length < text2_length) {
        text2 = text2.substring(0, text1_length);
      }
      var text_length = Math.min(text1_length, text2_length);
      // Quick check for the worst case.
      if (text1 == text2) {
        return text_length;
      }

      // Start by looking for a single character match
      // and increase length until no match is found.
      // Performance analysis: http://neil.fraser.name/news/2010/11/04/
      var best = 0;
      var length = 1;
      while (true) {
        var pattern = text1.substring(text_length - length);
        var found = text2.indexOf(pattern);
        if (found == -1) {
          return best;
        }
        length += found;
        if (
          found == 0 ||
          text1.substring(text_length - length) == text2.substring(0, length)
        ) {
          best = length;
          length++;
        }
      }
    }

    /**
     * Determine the common suffix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the end of each string.
     */
    function diff_commonSuffix$1(text1, text2) {
      // Quick check for common null cases.
      if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {
        return 0;
      }
      // Binary search.
      // Performance analysis: http://neil.fraser.name/news/2007/10/09/
      var pointermin = 0;
      var pointermax = Math.min(text1.length, text2.length);
      var pointermid = pointermax;
      var pointerend = 0;
      while (pointermin < pointermid) {
        if (
          text1.substring(text1.length - pointermid, text1.length - pointerend) ==
          text2.substring(text2.length - pointermid, text2.length - pointerend)
        ) {
          pointermin = pointermid;
          pointerend = pointermin;
        } else {
          pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }

      if (is_surrogate_pair_end$1(text1.charCodeAt(text1.length - pointermid))) {
        pointermid--;
      }

      return pointermid;
    }

    /**
     * Do the two texts share a substring which is at least half the length of the
     * longer text?
     * This speedup can produce non-minimal diffs.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {Array.<string>} Five element Array, containing the prefix of
     *     text1, the suffix of text1, the prefix of text2, the suffix of
     *     text2 and the common middle.  Or null if there was no match.
     */
    function diff_halfMatch_$1(text1, text2) {
      var longtext = text1.length > text2.length ? text1 : text2;
      var shorttext = text1.length > text2.length ? text2 : text1;
      if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
        return null; // Pointless.
      }

      /**
       * Does a substring of shorttext exist within longtext such that the substring
       * is at least half the length of longtext?
       * Closure, but does not reference any external variables.
       * @param {string} longtext Longer string.
       * @param {string} shorttext Shorter string.
       * @param {number} i Start index of quarter length substring within longtext.
       * @return {Array.<string>} Five element Array, containing the prefix of
       *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
       *     of shorttext and the common middle.  Or null if there was no match.
       * @private
       */
      function diff_halfMatchI_(longtext, shorttext, i) {
        // Start with a 1/4 length substring at position i as a seed.
        var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
        var j = -1;
        var best_common = "";
        var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
        while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {
          var prefixLength = diff_commonPrefix$1(
            longtext.substring(i),
            shorttext.substring(j)
          );
          var suffixLength = diff_commonSuffix$1(
            longtext.substring(0, i),
            shorttext.substring(0, j)
          );
          if (best_common.length < suffixLength + prefixLength) {
            best_common =
              shorttext.substring(j - suffixLength, j) +
              shorttext.substring(j, j + prefixLength);
            best_longtext_a = longtext.substring(0, i - suffixLength);
            best_longtext_b = longtext.substring(i + prefixLength);
            best_shorttext_a = shorttext.substring(0, j - suffixLength);
            best_shorttext_b = shorttext.substring(j + prefixLength);
          }
        }
        if (best_common.length * 2 >= longtext.length) {
          return [
            best_longtext_a,
            best_longtext_b,
            best_shorttext_a,
            best_shorttext_b,
            best_common,
          ];
        } else {
          return null;
        }
      }

      // First check if the second quarter is the seed for a half-match.
      var hm1 = diff_halfMatchI_(
        longtext,
        shorttext,
        Math.ceil(longtext.length / 4)
      );
      // Check again based on the third quarter.
      var hm2 = diff_halfMatchI_(
        longtext,
        shorttext,
        Math.ceil(longtext.length / 2)
      );
      var hm;
      if (!hm1 && !hm2) {
        return null;
      } else if (!hm2) {
        hm = hm1;
      } else if (!hm1) {
        hm = hm2;
      } else {
        // Both matched.  Select the longest.
        hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
      }

      // A half-match was found, sort out the return data.
      var text1_a, text1_b, text2_a, text2_b;
      if (text1.length > text2.length) {
        text1_a = hm[0];
        text1_b = hm[1];
        text2_a = hm[2];
        text2_b = hm[3];
      } else {
        text2_a = hm[0];
        text2_b = hm[1];
        text1_a = hm[2];
        text1_b = hm[3];
      }
      var mid_common = hm[4];
      return [text1_a, text1_b, text2_a, text2_b, mid_common];
    }

    /**
     * Reduce the number of edits by eliminating semantically trivial equalities.
     * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
     */
    function diff_cleanupSemantic(diffs) {
      var changes = false;
      var equalities = []; // Stack of indices where equalities are found.
      var equalitiesLength = 0; // Keeping our own length var is faster in JS.
      /** @type {?string} */
      var lastequality = null;
      // Always equal to diffs[equalities[equalitiesLength - 1]][1]
      var pointer = 0; // Index of current position.
      // Number of characters that changed prior to the equality.
      var length_insertions1 = 0;
      var length_deletions1 = 0;
      // Number of characters that changed after the equality.
      var length_insertions2 = 0;
      var length_deletions2 = 0;
      while (pointer < diffs.length) {
        if (diffs[pointer][0] == DIFF_EQUAL$1) {
          // Equality found.
          equalities[equalitiesLength++] = pointer;
          length_insertions1 = length_insertions2;
          length_deletions1 = length_deletions2;
          length_insertions2 = 0;
          length_deletions2 = 0;
          lastequality = diffs[pointer][1];
        } else {
          // An insertion or deletion.
          if (diffs[pointer][0] == DIFF_INSERT$1) {
            length_insertions2 += diffs[pointer][1].length;
          } else {
            length_deletions2 += diffs[pointer][1].length;
          }
          // Eliminate an equality that is smaller or equal to the edits on both
          // sides of it.
          if (
            lastequality &&
            lastequality.length <=
              Math.max(length_insertions1, length_deletions1) &&
            lastequality.length <= Math.max(length_insertions2, length_deletions2)
          ) {
            // Duplicate record.
            diffs.splice(equalities[equalitiesLength - 1], 0, [
              DIFF_DELETE$1,
              lastequality,
            ]);
            // Change second copy to insert.
            diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT$1;
            // Throw away the equality we just deleted.
            equalitiesLength--;
            // Throw away the previous equality (it needs to be reevaluated).
            equalitiesLength--;
            pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
            length_insertions1 = 0; // Reset the counters.
            length_deletions1 = 0;
            length_insertions2 = 0;
            length_deletions2 = 0;
            lastequality = null;
            changes = true;
          }
        }
        pointer++;
      }

      // Normalize the diff.
      if (changes) {
        diff_cleanupMerge$1(diffs);
      }
      diff_cleanupSemanticLossless(diffs);

      // Find any overlaps between deletions and insertions.
      // e.g: <del>abcxxx</del><ins>xxxdef</ins>
      //   -> <del>abc</del>xxx<ins>def</ins>
      // e.g: <del>xxxabc</del><ins>defxxx</ins>
      //   -> <ins>def</ins>xxx<del>abc</del>
      // Only extract an overlap if it is as big as the edit ahead or behind it.
      pointer = 1;
      while (pointer < diffs.length) {
        if (
          diffs[pointer - 1][0] == DIFF_DELETE$1 &&
          diffs[pointer][0] == DIFF_INSERT$1
        ) {
          var deletion = diffs[pointer - 1][1];
          var insertion = diffs[pointer][1];
          var overlap_length1 = diff_commonOverlap_(deletion, insertion);
          var overlap_length2 = diff_commonOverlap_(insertion, deletion);
          if (overlap_length1 >= overlap_length2) {
            if (
              overlap_length1 >= deletion.length / 2 ||
              overlap_length1 >= insertion.length / 2
            ) {
              // Overlap found.  Insert an equality and trim the surrounding edits.
              diffs.splice(pointer, 0, [
                DIFF_EQUAL$1,
                insertion.substring(0, overlap_length1),
              ]);
              diffs[pointer - 1][1] = deletion.substring(
                0,
                deletion.length - overlap_length1
              );
              diffs[pointer + 1][1] = insertion.substring(overlap_length1);
              pointer++;
            }
          } else {
            if (
              overlap_length2 >= deletion.length / 2 ||
              overlap_length2 >= insertion.length / 2
            ) {
              // Reverse overlap found.
              // Insert an equality and swap and trim the surrounding edits.
              diffs.splice(pointer, 0, [
                DIFF_EQUAL$1,
                deletion.substring(0, overlap_length2),
              ]);
              diffs[pointer - 1][0] = DIFF_INSERT$1;
              diffs[pointer - 1][1] = insertion.substring(
                0,
                insertion.length - overlap_length2
              );
              diffs[pointer + 1][0] = DIFF_DELETE$1;
              diffs[pointer + 1][1] = deletion.substring(overlap_length2);
              pointer++;
            }
          }
          pointer++;
        }
        pointer++;
      }
    }

    var nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
    var whitespaceRegex_ = /\s/;
    var linebreakRegex_ = /[\r\n]/;
    var blanklineEndRegex_ = /\n\r?\n$/;
    var blanklineStartRegex_ = /^\r?\n\r?\n/;

    /**
     * Look for single edits surrounded on both sides by equalities
     * which can be shifted sideways to align the edit to a word boundary.
     * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
     * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
     */
    function diff_cleanupSemanticLossless(diffs) {
      /**
       * Given two strings, compute a score representing whether the internal
       * boundary falls on logical boundaries.
       * Scores range from 6 (best) to 0 (worst).
       * Closure, but does not reference any external variables.
       * @param {string} one First string.
       * @param {string} two Second string.
       * @return {number} The score.
       * @private
       */
      function diff_cleanupSemanticScore_(one, two) {
        if (!one || !two) {
          // Edges are the best.
          return 6;
        }

        // Each port of this function behaves slightly differently due to
        // subtle differences in each language's definition of things like
        // 'whitespace'.  Since this function's purpose is largely cosmetic,
        // the choice has been made to use each language's native features
        // rather than force total conformity.
        var char1 = one.charAt(one.length - 1);
        var char2 = two.charAt(0);
        var nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex_);
        var nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex_);
        var whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex_);
        var whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex_);
        var lineBreak1 = whitespace1 && char1.match(linebreakRegex_);
        var lineBreak2 = whitespace2 && char2.match(linebreakRegex_);
        var blankLine1 = lineBreak1 && one.match(blanklineEndRegex_);
        var blankLine2 = lineBreak2 && two.match(blanklineStartRegex_);

        if (blankLine1 || blankLine2) {
          // Five points for blank lines.
          return 5;
        } else if (lineBreak1 || lineBreak2) {
          // Four points for line breaks.
          return 4;
        } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
          // Three points for end of sentences.
          return 3;
        } else if (whitespace1 || whitespace2) {
          // Two points for whitespace.
          return 2;
        } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
          // One point for non-alphanumeric.
          return 1;
        }
        return 0;
      }

      var pointer = 1;
      // Intentionally ignore the first and last element (don't need checking).
      while (pointer < diffs.length - 1) {
        if (
          diffs[pointer - 1][0] == DIFF_EQUAL$1 &&
          diffs[pointer + 1][0] == DIFF_EQUAL$1
        ) {
          // This is a single edit surrounded by equalities.
          var equality1 = diffs[pointer - 1][1];
          var edit = diffs[pointer][1];
          var equality2 = diffs[pointer + 1][1];

          // First, shift the edit as far left as possible.
          var commonOffset = diff_commonSuffix$1(equality1, edit);
          if (commonOffset) {
            var commonString = edit.substring(edit.length - commonOffset);
            equality1 = equality1.substring(0, equality1.length - commonOffset);
            edit = commonString + edit.substring(0, edit.length - commonOffset);
            equality2 = commonString + equality2;
          }

          // Second, step character by character right, looking for the best fit.
          var bestEquality1 = equality1;
          var bestEdit = edit;
          var bestEquality2 = equality2;
          var bestScore =
            diff_cleanupSemanticScore_(equality1, edit) +
            diff_cleanupSemanticScore_(edit, equality2);
          while (edit.charAt(0) === equality2.charAt(0)) {
            equality1 += edit.charAt(0);
            edit = edit.substring(1) + equality2.charAt(0);
            equality2 = equality2.substring(1);
            var score =
              diff_cleanupSemanticScore_(equality1, edit) +
              diff_cleanupSemanticScore_(edit, equality2);
            // The >= encourages trailing rather than leading whitespace on edits.
            if (score >= bestScore) {
              bestScore = score;
              bestEquality1 = equality1;
              bestEdit = edit;
              bestEquality2 = equality2;
            }
          }

          if (diffs[pointer - 1][1] != bestEquality1) {
            // We have an improvement, save it back to the diff.
            if (bestEquality1) {
              diffs[pointer - 1][1] = bestEquality1;
            } else {
              diffs.splice(pointer - 1, 1);
              pointer--;
            }
            diffs[pointer][1] = bestEdit;
            if (bestEquality2) {
              diffs[pointer + 1][1] = bestEquality2;
            } else {
              diffs.splice(pointer + 1, 1);
              pointer--;
            }
          }
        }
        pointer++;
      }
    }

    /**
     * Reorder and merge like edit sections.  Merge equalities.
     * Any edit section can move as long as it doesn't cross an equality.
     * @param {Array} diffs Array of diff tuples.
     * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff
     */
    function diff_cleanupMerge$1(diffs, fix_unicode) {
      diffs.push([DIFF_EQUAL$1, ""]); // Add a dummy entry at the end.
      var pointer = 0;
      var count_delete = 0;
      var count_insert = 0;
      var text_delete = "";
      var text_insert = "";
      var commonlength;
      while (pointer < diffs.length) {
        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
          diffs.splice(pointer, 1);
          continue;
        }
        switch (diffs[pointer][0]) {
          case DIFF_INSERT$1:
            count_insert++;
            text_insert += diffs[pointer][1];
            pointer++;
            break;
          case DIFF_DELETE$1:
            count_delete++;
            text_delete += diffs[pointer][1];
            pointer++;
            break;
          case DIFF_EQUAL$1:
            var previous_equality = pointer - count_insert - count_delete - 1;
            if (fix_unicode) {
              // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,
              // we assume that the old and new text in the diff are complete and correct
              // unicode-encoded JS strings, but the tuple boundaries may fall between
              // surrogate pairs.  we fix this by shaving off stray surrogates from the end
              // of the previous equality and the beginning of this equality.  this may create
              // empty equalities or a common prefix or suffix.  for example, if AB and AC are
              // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and
              // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this
              // particular case, both equalities go away, we absorb any previous inequalities,
              // and we keep scanning for the next equality before rewriting the tuples.
              if (
                previous_equality >= 0 &&
                ends_with_pair_start$1(diffs[previous_equality][1])
              ) {
                var stray = diffs[previous_equality][1].slice(-1);
                diffs[previous_equality][1] = diffs[previous_equality][1].slice(
                  0,
                  -1
                );
                text_delete = stray + text_delete;
                text_insert = stray + text_insert;
                if (!diffs[previous_equality][1]) {
                  // emptied out previous equality, so delete it and include previous delete/insert
                  diffs.splice(previous_equality, 1);
                  pointer--;
                  var k = previous_equality - 1;
                  if (diffs[k] && diffs[k][0] === DIFF_INSERT$1) {
                    count_insert++;
                    text_insert = diffs[k][1] + text_insert;
                    k--;
                  }
                  if (diffs[k] && diffs[k][0] === DIFF_DELETE$1) {
                    count_delete++;
                    text_delete = diffs[k][1] + text_delete;
                    k--;
                  }
                  previous_equality = k;
                }
              }
              if (starts_with_pair_end$1(diffs[pointer][1])) {
                var stray = diffs[pointer][1].charAt(0);
                diffs[pointer][1] = diffs[pointer][1].slice(1);
                text_delete += stray;
                text_insert += stray;
              }
            }
            if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
              // for empty equality not at end, wait for next equality
              diffs.splice(pointer, 1);
              break;
            }
            if (text_delete.length > 0 || text_insert.length > 0) {
              // note that diff_commonPrefix and diff_commonSuffix are unicode-aware
              if (text_delete.length > 0 && text_insert.length > 0) {
                // Factor out any common prefixes.
                commonlength = diff_commonPrefix$1(text_insert, text_delete);
                if (commonlength !== 0) {
                  if (previous_equality >= 0) {
                    diffs[previous_equality][1] += text_insert.substring(
                      0,
                      commonlength
                    );
                  } else {
                    diffs.splice(0, 0, [
                      DIFF_EQUAL$1,
                      text_insert.substring(0, commonlength),
                    ]);
                    pointer++;
                  }
                  text_insert = text_insert.substring(commonlength);
                  text_delete = text_delete.substring(commonlength);
                }
                // Factor out any common suffixes.
                commonlength = diff_commonSuffix$1(text_insert, text_delete);
                if (commonlength !== 0) {
                  diffs[pointer][1] =
                    text_insert.substring(text_insert.length - commonlength) +
                    diffs[pointer][1];
                  text_insert = text_insert.substring(
                    0,
                    text_insert.length - commonlength
                  );
                  text_delete = text_delete.substring(
                    0,
                    text_delete.length - commonlength
                  );
                }
              }
              // Delete the offending records and add the merged ones.
              var n = count_insert + count_delete;
              if (text_delete.length === 0 && text_insert.length === 0) {
                diffs.splice(pointer - n, n);
                pointer = pointer - n;
              } else if (text_delete.length === 0) {
                diffs.splice(pointer - n, n, [DIFF_INSERT$1, text_insert]);
                pointer = pointer - n + 1;
              } else if (text_insert.length === 0) {
                diffs.splice(pointer - n, n, [DIFF_DELETE$1, text_delete]);
                pointer = pointer - n + 1;
              } else {
                diffs.splice(
                  pointer - n,
                  n,
                  [DIFF_DELETE$1, text_delete],
                  [DIFF_INSERT$1, text_insert]
                );
                pointer = pointer - n + 2;
              }
            }
            if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL$1) {
              // Merge this equality with the previous one.
              diffs[pointer - 1][1] += diffs[pointer][1];
              diffs.splice(pointer, 1);
            } else {
              pointer++;
            }
            count_insert = 0;
            count_delete = 0;
            text_delete = "";
            text_insert = "";
            break;
        }
      }
      if (diffs[diffs.length - 1][1] === "") {
        diffs.pop(); // Remove the dummy entry at the end.
      }

      // Second pass: look for single edits surrounded on both sides by equalities
      // which can be shifted sideways to eliminate an equality.
      // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
      var changes = false;
      pointer = 1;
      // Intentionally ignore the first and last element (don't need checking).
      while (pointer < diffs.length - 1) {
        if (
          diffs[pointer - 1][0] === DIFF_EQUAL$1 &&
          diffs[pointer + 1][0] === DIFF_EQUAL$1
        ) {
          // This is a single edit surrounded by equalities.
          if (
            diffs[pointer][1].substring(
              diffs[pointer][1].length - diffs[pointer - 1][1].length
            ) === diffs[pointer - 1][1]
          ) {
            // Shift the edit over the previous equality.
            diffs[pointer][1] =
              diffs[pointer - 1][1] +
              diffs[pointer][1].substring(
                0,
                diffs[pointer][1].length - diffs[pointer - 1][1].length
              );
            diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
            diffs.splice(pointer - 1, 1);
            changes = true;
          } else if (
            diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
            diffs[pointer + 1][1]
          ) {
            // Shift the edit over the next equality.
            diffs[pointer - 1][1] += diffs[pointer + 1][1];
            diffs[pointer][1] =
              diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
              diffs[pointer + 1][1];
            diffs.splice(pointer + 1, 1);
            changes = true;
          }
        }
        pointer++;
      }
      // If shifts were made, the diff needs reordering and another shift sweep.
      if (changes) {
        diff_cleanupMerge$1(diffs, fix_unicode);
      }
    }

    function is_surrogate_pair_start$1(charCode) {
      return charCode >= 0xd800 && charCode <= 0xdbff;
    }

    function is_surrogate_pair_end$1(charCode) {
      return charCode >= 0xdc00 && charCode <= 0xdfff;
    }

    function starts_with_pair_end$1(str) {
      return is_surrogate_pair_end$1(str.charCodeAt(0));
    }

    function ends_with_pair_start$1(str) {
      return is_surrogate_pair_start$1(str.charCodeAt(str.length - 1));
    }

    function remove_empty_tuples$1(tuples) {
      var ret = [];
      for (var i = 0; i < tuples.length; i++) {
        if (tuples[i][1].length > 0) {
          ret.push(tuples[i]);
        }
      }
      return ret;
    }

    function make_edit_splice$1(before, oldMiddle, newMiddle, after) {
      if (ends_with_pair_start$1(before) || starts_with_pair_end$1(after)) {
        return null;
      }
      return remove_empty_tuples$1([
        [DIFF_EQUAL$1, before],
        [DIFF_DELETE$1, oldMiddle],
        [DIFF_INSERT$1, newMiddle],
        [DIFF_EQUAL$1, after],
      ]);
    }

    function find_cursor_edit_diff$1(oldText, newText, cursor_pos) {
      // note: this runs after equality check has ruled out exact equality
      var oldRange =
        typeof cursor_pos === "number"
          ? { index: cursor_pos, length: 0 }
          : cursor_pos.oldRange;
      var newRange = typeof cursor_pos === "number" ? null : cursor_pos.newRange;
      // take into account the old and new selection to generate the best diff
      // possible for a text edit.  for example, a text change from "xxx" to "xx"
      // could be a delete or forwards-delete of any one of the x's, or the
      // result of selecting two of the x's and typing "x".
      var oldLength = oldText.length;
      var newLength = newText.length;
      if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {
        // see if we have an insert or delete before or after cursor
        var oldCursor = oldRange.index;
        var oldBefore = oldText.slice(0, oldCursor);
        var oldAfter = oldText.slice(oldCursor);
        var maybeNewCursor = newRange ? newRange.index : null;
        editBefore: {
          // is this an insert or delete right before oldCursor?
          var newCursor = oldCursor + newLength - oldLength;
          if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {
            break editBefore;
          }
          if (newCursor < 0 || newCursor > newLength) {
            break editBefore;
          }
          var newBefore = newText.slice(0, newCursor);
          var newAfter = newText.slice(newCursor);
          if (newAfter !== oldAfter) {
            break editBefore;
          }
          var prefixLength = Math.min(oldCursor, newCursor);
          var oldPrefix = oldBefore.slice(0, prefixLength);
          var newPrefix = newBefore.slice(0, prefixLength);
          if (oldPrefix !== newPrefix) {
            break editBefore;
          }
          var oldMiddle = oldBefore.slice(prefixLength);
          var newMiddle = newBefore.slice(prefixLength);
          return make_edit_splice$1(oldPrefix, oldMiddle, newMiddle, oldAfter);
        }
        editAfter: {
          // is this an insert or delete right after oldCursor?
          if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {
            break editAfter;
          }
          var cursor = oldCursor;
          var newBefore = newText.slice(0, cursor);
          var newAfter = newText.slice(cursor);
          if (newBefore !== oldBefore) {
            break editAfter;
          }
          var suffixLength = Math.min(oldLength - cursor, newLength - cursor);
          var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);
          var newSuffix = newAfter.slice(newAfter.length - suffixLength);
          if (oldSuffix !== newSuffix) {
            break editAfter;
          }
          var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);
          var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);
          return make_edit_splice$1(oldBefore, oldMiddle, newMiddle, oldSuffix);
        }
      }
      if (oldRange.length > 0 && newRange && newRange.length === 0) {
        replaceRange: {
          // see if diff could be a splice of the old selection range
          var oldPrefix = oldText.slice(0, oldRange.index);
          var oldSuffix = oldText.slice(oldRange.index + oldRange.length);
          var prefixLength = oldPrefix.length;
          var suffixLength = oldSuffix.length;
          if (newLength < prefixLength + suffixLength) {
            break replaceRange;
          }
          var newPrefix = newText.slice(0, prefixLength);
          var newSuffix = newText.slice(newLength - suffixLength);
          if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {
            break replaceRange;
          }
          var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);
          var newMiddle = newText.slice(prefixLength, newLength - suffixLength);
          return make_edit_splice$1(oldPrefix, oldMiddle, newMiddle, oldSuffix);
        }
      }

      return null;
    }

    function diff$1(text1, text2, cursor_pos, cleanup) {
      // only pass fix_unicode=true at the top level, not when diff_main is
      // recursively invoked
      return diff_main$1(text1, text2, cursor_pos, cleanup, true);
    }

    diff$1.INSERT = DIFF_INSERT$1;
    diff$1.DELETE = DIFF_DELETE$1;
    diff$1.EQUAL = DIFF_EQUAL$1;

    var diff_1$1 = diff$1;

    var lodash_clonedeepExports = {};
    var lodash_clonedeep = {
      get exports(){ return lodash_clonedeepExports; },
      set exports(v){ lodash_clonedeepExports = v; },
    };

    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    (function (module, exports) {
    	/** Used as the size to enable large array optimizations. */
    	var LARGE_ARRAY_SIZE = 200;

    	/** Used to stand-in for `undefined` hash values. */
    	var HASH_UNDEFINED = '__lodash_hash_undefined__';

    	/** Used as references for various `Number` constants. */
    	var MAX_SAFE_INTEGER = 9007199254740991;

    	/** `Object#toString` result references. */
    	var argsTag = '[object Arguments]',
    	    arrayTag = '[object Array]',
    	    boolTag = '[object Boolean]',
    	    dateTag = '[object Date]',
    	    errorTag = '[object Error]',
    	    funcTag = '[object Function]',
    	    genTag = '[object GeneratorFunction]',
    	    mapTag = '[object Map]',
    	    numberTag = '[object Number]',
    	    objectTag = '[object Object]',
    	    promiseTag = '[object Promise]',
    	    regexpTag = '[object RegExp]',
    	    setTag = '[object Set]',
    	    stringTag = '[object String]',
    	    symbolTag = '[object Symbol]',
    	    weakMapTag = '[object WeakMap]';

    	var arrayBufferTag = '[object ArrayBuffer]',
    	    dataViewTag = '[object DataView]',
    	    float32Tag = '[object Float32Array]',
    	    float64Tag = '[object Float64Array]',
    	    int8Tag = '[object Int8Array]',
    	    int16Tag = '[object Int16Array]',
    	    int32Tag = '[object Int32Array]',
    	    uint8Tag = '[object Uint8Array]',
    	    uint8ClampedTag = '[object Uint8ClampedArray]',
    	    uint16Tag = '[object Uint16Array]',
    	    uint32Tag = '[object Uint32Array]';

    	/**
    	 * Used to match `RegExp`
    	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
    	 */
    	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    	/** Used to match `RegExp` flags from their coerced string values. */
    	var reFlags = /\w*$/;

    	/** Used to detect host constructors (Safari). */
    	var reIsHostCtor = /^\[object .+?Constructor\]$/;

    	/** Used to detect unsigned integer values. */
    	var reIsUint = /^(?:0|[1-9]\d*)$/;

    	/** Used to identify `toStringTag` values supported by `_.clone`. */
    	var cloneableTags = {};
    	cloneableTags[argsTag] = cloneableTags[arrayTag] =
    	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    	cloneableTags[boolTag] = cloneableTags[dateTag] =
    	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    	cloneableTags[int32Tag] = cloneableTags[mapTag] =
    	cloneableTags[numberTag] = cloneableTags[objectTag] =
    	cloneableTags[regexpTag] = cloneableTags[setTag] =
    	cloneableTags[stringTag] = cloneableTags[symbolTag] =
    	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    	cloneableTags[errorTag] = cloneableTags[funcTag] =
    	cloneableTags[weakMapTag] = false;

    	/** Detect free variable `global` from Node.js. */
    	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    	/** Detect free variable `self`. */
    	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    	/** Used as a reference to the global object. */
    	var root = freeGlobal || freeSelf || Function('return this')();

    	/** Detect free variable `exports`. */
    	var freeExports = exports && !exports.nodeType && exports;

    	/** Detect free variable `module`. */
    	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	/** Detect the popular CommonJS extension `module.exports`. */
    	var moduleExports = freeModule && freeModule.exports === freeExports;

    	/**
    	 * Adds the key-value `pair` to `map`.
    	 *
    	 * @private
    	 * @param {Object} map The map to modify.
    	 * @param {Array} pair The key-value pair to add.
    	 * @returns {Object} Returns `map`.
    	 */
    	function addMapEntry(map, pair) {
    	  // Don't return `map.set` because it's not chainable in IE 11.
    	  map.set(pair[0], pair[1]);
    	  return map;
    	}

    	/**
    	 * Adds `value` to `set`.
    	 *
    	 * @private
    	 * @param {Object} set The set to modify.
    	 * @param {*} value The value to add.
    	 * @returns {Object} Returns `set`.
    	 */
    	function addSetEntry(set, value) {
    	  // Don't return `set.add` because it's not chainable in IE 11.
    	  set.add(value);
    	  return set;
    	}

    	/**
    	 * A specialized version of `_.forEach` for arrays without support for
    	 * iteratee shorthands.
    	 *
    	 * @private
    	 * @param {Array} [array] The array to iterate over.
    	 * @param {Function} iteratee The function invoked per iteration.
    	 * @returns {Array} Returns `array`.
    	 */
    	function arrayEach(array, iteratee) {
    	  var index = -1,
    	      length = array ? array.length : 0;

    	  while (++index < length) {
    	    if (iteratee(array[index], index, array) === false) {
    	      break;
    	    }
    	  }
    	  return array;
    	}

    	/**
    	 * Appends the elements of `values` to `array`.
    	 *
    	 * @private
    	 * @param {Array} array The array to modify.
    	 * @param {Array} values The values to append.
    	 * @returns {Array} Returns `array`.
    	 */
    	function arrayPush(array, values) {
    	  var index = -1,
    	      length = values.length,
    	      offset = array.length;

    	  while (++index < length) {
    	    array[offset + index] = values[index];
    	  }
    	  return array;
    	}

    	/**
    	 * A specialized version of `_.reduce` for arrays without support for
    	 * iteratee shorthands.
    	 *
    	 * @private
    	 * @param {Array} [array] The array to iterate over.
    	 * @param {Function} iteratee The function invoked per iteration.
    	 * @param {*} [accumulator] The initial value.
    	 * @param {boolean} [initAccum] Specify using the first element of `array` as
    	 *  the initial value.
    	 * @returns {*} Returns the accumulated value.
    	 */
    	function arrayReduce(array, iteratee, accumulator, initAccum) {
    	  var index = -1,
    	      length = array ? array.length : 0;

    	  if (initAccum && length) {
    	    accumulator = array[++index];
    	  }
    	  while (++index < length) {
    	    accumulator = iteratee(accumulator, array[index], index, array);
    	  }
    	  return accumulator;
    	}

    	/**
    	 * The base implementation of `_.times` without support for iteratee shorthands
    	 * or max array length checks.
    	 *
    	 * @private
    	 * @param {number} n The number of times to invoke `iteratee`.
    	 * @param {Function} iteratee The function invoked per iteration.
    	 * @returns {Array} Returns the array of results.
    	 */
    	function baseTimes(n, iteratee) {
    	  var index = -1,
    	      result = Array(n);

    	  while (++index < n) {
    	    result[index] = iteratee(index);
    	  }
    	  return result;
    	}

    	/**
    	 * Gets the value at `key` of `object`.
    	 *
    	 * @private
    	 * @param {Object} [object] The object to query.
    	 * @param {string} key The key of the property to get.
    	 * @returns {*} Returns the property value.
    	 */
    	function getValue(object, key) {
    	  return object == null ? undefined : object[key];
    	}

    	/**
    	 * Checks if `value` is a host object in IE < 9.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
    	 */
    	function isHostObject(value) {
    	  // Many host objects are `Object` objects that can coerce to strings
    	  // despite having improperly defined `toString` methods.
    	  var result = false;
    	  if (value != null && typeof value.toString != 'function') {
    	    try {
    	      result = !!(value + '');
    	    } catch (e) {}
    	  }
    	  return result;
    	}

    	/**
    	 * Converts `map` to its key-value pairs.
    	 *
    	 * @private
    	 * @param {Object} map The map to convert.
    	 * @returns {Array} Returns the key-value pairs.
    	 */
    	function mapToArray(map) {
    	  var index = -1,
    	      result = Array(map.size);

    	  map.forEach(function(value, key) {
    	    result[++index] = [key, value];
    	  });
    	  return result;
    	}

    	/**
    	 * Creates a unary function that invokes `func` with its argument transformed.
    	 *
    	 * @private
    	 * @param {Function} func The function to wrap.
    	 * @param {Function} transform The argument transform.
    	 * @returns {Function} Returns the new function.
    	 */
    	function overArg(func, transform) {
    	  return function(arg) {
    	    return func(transform(arg));
    	  };
    	}

    	/**
    	 * Converts `set` to an array of its values.
    	 *
    	 * @private
    	 * @param {Object} set The set to convert.
    	 * @returns {Array} Returns the values.
    	 */
    	function setToArray(set) {
    	  var index = -1,
    	      result = Array(set.size);

    	  set.forEach(function(value) {
    	    result[++index] = value;
    	  });
    	  return result;
    	}

    	/** Used for built-in method references. */
    	var arrayProto = Array.prototype,
    	    funcProto = Function.prototype,
    	    objectProto = Object.prototype;

    	/** Used to detect overreaching core-js shims. */
    	var coreJsData = root['__core-js_shared__'];

    	/** Used to detect methods masquerading as native. */
    	var maskSrcKey = (function() {
    	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    	  return uid ? ('Symbol(src)_1.' + uid) : '';
    	}());

    	/** Used to resolve the decompiled source of functions. */
    	var funcToString = funcProto.toString;

    	/** Used to check objects for own properties. */
    	var hasOwnProperty = objectProto.hasOwnProperty;

    	/**
    	 * Used to resolve the
    	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
    	 * of values.
    	 */
    	var objectToString = objectProto.toString;

    	/** Used to detect if a method is native. */
    	var reIsNative = RegExp('^' +
    	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    	);

    	/** Built-in value references. */
    	var Buffer = moduleExports ? root.Buffer : undefined,
    	    Symbol = root.Symbol,
    	    Uint8Array = root.Uint8Array,
    	    getPrototype = overArg(Object.getPrototypeOf, Object),
    	    objectCreate = Object.create,
    	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    	    splice = arrayProto.splice;

    	/* Built-in method references for those with the same name as other `lodash` methods. */
    	var nativeGetSymbols = Object.getOwnPropertySymbols,
    	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    	    nativeKeys = overArg(Object.keys, Object);

    	/* Built-in method references that are verified to be native. */
    	var DataView = getNative(root, 'DataView'),
    	    Map = getNative(root, 'Map'),
    	    Promise = getNative(root, 'Promise'),
    	    Set = getNative(root, 'Set'),
    	    WeakMap = getNative(root, 'WeakMap'),
    	    nativeCreate = getNative(Object, 'create');

    	/** Used to detect maps, sets, and weakmaps. */
    	var dataViewCtorString = toSource(DataView),
    	    mapCtorString = toSource(Map),
    	    promiseCtorString = toSource(Promise),
    	    setCtorString = toSource(Set),
    	    weakMapCtorString = toSource(WeakMap);

    	/** Used to convert symbols to primitives and strings. */
    	var symbolProto = Symbol ? Symbol.prototype : undefined,
    	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    	/**
    	 * Creates a hash object.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function Hash(entries) {
    	  var index = -1,
    	      length = entries ? entries.length : 0;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the hash.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf Hash
    	 */
    	function hashClear() {
    	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
    	}

    	/**
    	 * Removes `key` and its value from the hash.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf Hash
    	 * @param {Object} hash The hash to modify.
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function hashDelete(key) {
    	  return this.has(key) && delete this.__data__[key];
    	}

    	/**
    	 * Gets the hash value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf Hash
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function hashGet(key) {
    	  var data = this.__data__;
    	  if (nativeCreate) {
    	    var result = data[key];
    	    return result === HASH_UNDEFINED ? undefined : result;
    	  }
    	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
    	}

    	/**
    	 * Checks if a hash value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf Hash
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function hashHas(key) {
    	  var data = this.__data__;
    	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    	}

    	/**
    	 * Sets the hash `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf Hash
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the hash instance.
    	 */
    	function hashSet(key, value) {
    	  var data = this.__data__;
    	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    	  return this;
    	}

    	// Add methods to `Hash`.
    	Hash.prototype.clear = hashClear;
    	Hash.prototype['delete'] = hashDelete;
    	Hash.prototype.get = hashGet;
    	Hash.prototype.has = hashHas;
    	Hash.prototype.set = hashSet;

    	/**
    	 * Creates an list cache object.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function ListCache(entries) {
    	  var index = -1,
    	      length = entries ? entries.length : 0;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the list cache.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf ListCache
    	 */
    	function listCacheClear() {
    	  this.__data__ = [];
    	}

    	/**
    	 * Removes `key` and its value from the list cache.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function listCacheDelete(key) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  if (index < 0) {
    	    return false;
    	  }
    	  var lastIndex = data.length - 1;
    	  if (index == lastIndex) {
    	    data.pop();
    	  } else {
    	    splice.call(data, index, 1);
    	  }
    	  return true;
    	}

    	/**
    	 * Gets the list cache value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function listCacheGet(key) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  return index < 0 ? undefined : data[index][1];
    	}

    	/**
    	 * Checks if a list cache value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf ListCache
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function listCacheHas(key) {
    	  return assocIndexOf(this.__data__, key) > -1;
    	}

    	/**
    	 * Sets the list cache `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the list cache instance.
    	 */
    	function listCacheSet(key, value) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  if (index < 0) {
    	    data.push([key, value]);
    	  } else {
    	    data[index][1] = value;
    	  }
    	  return this;
    	}

    	// Add methods to `ListCache`.
    	ListCache.prototype.clear = listCacheClear;
    	ListCache.prototype['delete'] = listCacheDelete;
    	ListCache.prototype.get = listCacheGet;
    	ListCache.prototype.has = listCacheHas;
    	ListCache.prototype.set = listCacheSet;

    	/**
    	 * Creates a map cache object to store key-value pairs.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function MapCache(entries) {
    	  var index = -1,
    	      length = entries ? entries.length : 0;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the map.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf MapCache
    	 */
    	function mapCacheClear() {
    	  this.__data__ = {
    	    'hash': new Hash,
    	    'map': new (Map || ListCache),
    	    'string': new Hash
    	  };
    	}

    	/**
    	 * Removes `key` and its value from the map.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function mapCacheDelete(key) {
    	  return getMapData(this, key)['delete'](key);
    	}

    	/**
    	 * Gets the map value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function mapCacheGet(key) {
    	  return getMapData(this, key).get(key);
    	}

    	/**
    	 * Checks if a map value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf MapCache
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function mapCacheHas(key) {
    	  return getMapData(this, key).has(key);
    	}

    	/**
    	 * Sets the map `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the map cache instance.
    	 */
    	function mapCacheSet(key, value) {
    	  getMapData(this, key).set(key, value);
    	  return this;
    	}

    	// Add methods to `MapCache`.
    	MapCache.prototype.clear = mapCacheClear;
    	MapCache.prototype['delete'] = mapCacheDelete;
    	MapCache.prototype.get = mapCacheGet;
    	MapCache.prototype.has = mapCacheHas;
    	MapCache.prototype.set = mapCacheSet;

    	/**
    	 * Creates a stack cache object to store key-value pairs.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function Stack(entries) {
    	  this.__data__ = new ListCache(entries);
    	}

    	/**
    	 * Removes all key-value entries from the stack.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf Stack
    	 */
    	function stackClear() {
    	  this.__data__ = new ListCache;
    	}

    	/**
    	 * Removes `key` and its value from the stack.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function stackDelete(key) {
    	  return this.__data__['delete'](key);
    	}

    	/**
    	 * Gets the stack value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function stackGet(key) {
    	  return this.__data__.get(key);
    	}

    	/**
    	 * Checks if a stack value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf Stack
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function stackHas(key) {
    	  return this.__data__.has(key);
    	}

    	/**
    	 * Sets the stack `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the stack cache instance.
    	 */
    	function stackSet(key, value) {
    	  var cache = this.__data__;
    	  if (cache instanceof ListCache) {
    	    var pairs = cache.__data__;
    	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
    	      pairs.push([key, value]);
    	      return this;
    	    }
    	    cache = this.__data__ = new MapCache(pairs);
    	  }
    	  cache.set(key, value);
    	  return this;
    	}

    	// Add methods to `Stack`.
    	Stack.prototype.clear = stackClear;
    	Stack.prototype['delete'] = stackDelete;
    	Stack.prototype.get = stackGet;
    	Stack.prototype.has = stackHas;
    	Stack.prototype.set = stackSet;

    	/**
    	 * Creates an array of the enumerable property names of the array-like `value`.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @param {boolean} inherited Specify returning inherited property names.
    	 * @returns {Array} Returns the array of property names.
    	 */
    	function arrayLikeKeys(value, inherited) {
    	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    	  // Safari 9 makes `arguments.length` enumerable in strict mode.
    	  var result = (isArray(value) || isArguments(value))
    	    ? baseTimes(value.length, String)
    	    : [];

    	  var length = result.length,
    	      skipIndexes = !!length;

    	  for (var key in value) {
    	    if ((inherited || hasOwnProperty.call(value, key)) &&
    	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
    	      result.push(key);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
    	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	 * for equality comparisons.
    	 *
    	 * @private
    	 * @param {Object} object The object to modify.
    	 * @param {string} key The key of the property to assign.
    	 * @param {*} value The value to assign.
    	 */
    	function assignValue(object, key, value) {
    	  var objValue = object[key];
    	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
    	      (value === undefined && !(key in object))) {
    	    object[key] = value;
    	  }
    	}

    	/**
    	 * Gets the index at which the `key` is found in `array` of key-value pairs.
    	 *
    	 * @private
    	 * @param {Array} array The array to inspect.
    	 * @param {*} key The key to search for.
    	 * @returns {number} Returns the index of the matched value, else `-1`.
    	 */
    	function assocIndexOf(array, key) {
    	  var length = array.length;
    	  while (length--) {
    	    if (eq(array[length][0], key)) {
    	      return length;
    	    }
    	  }
    	  return -1;
    	}

    	/**
    	 * The base implementation of `_.assign` without support for multiple sources
    	 * or `customizer` functions.
    	 *
    	 * @private
    	 * @param {Object} object The destination object.
    	 * @param {Object} source The source object.
    	 * @returns {Object} Returns `object`.
    	 */
    	function baseAssign(object, source) {
    	  return object && copyObject(source, keys(source), object);
    	}

    	/**
    	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
    	 * traversed objects.
    	 *
    	 * @private
    	 * @param {*} value The value to clone.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @param {boolean} [isFull] Specify a clone including symbols.
    	 * @param {Function} [customizer] The function to customize cloning.
    	 * @param {string} [key] The key of `value`.
    	 * @param {Object} [object] The parent object of `value`.
    	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
    	 * @returns {*} Returns the cloned value.
    	 */
    	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    	  var result;
    	  if (customizer) {
    	    result = object ? customizer(value, key, object, stack) : customizer(value);
    	  }
    	  if (result !== undefined) {
    	    return result;
    	  }
    	  if (!isObject(value)) {
    	    return value;
    	  }
    	  var isArr = isArray(value);
    	  if (isArr) {
    	    result = initCloneArray(value);
    	    if (!isDeep) {
    	      return copyArray(value, result);
    	    }
    	  } else {
    	    var tag = getTag(value),
    	        isFunc = tag == funcTag || tag == genTag;

    	    if (isBuffer(value)) {
    	      return cloneBuffer(value, isDeep);
    	    }
    	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
    	      if (isHostObject(value)) {
    	        return object ? value : {};
    	      }
    	      result = initCloneObject(isFunc ? {} : value);
    	      if (!isDeep) {
    	        return copySymbols(value, baseAssign(result, value));
    	      }
    	    } else {
    	      if (!cloneableTags[tag]) {
    	        return object ? value : {};
    	      }
    	      result = initCloneByTag(value, tag, baseClone, isDeep);
    	    }
    	  }
    	  // Check for circular references and return its corresponding clone.
    	  stack || (stack = new Stack);
    	  var stacked = stack.get(value);
    	  if (stacked) {
    	    return stacked;
    	  }
    	  stack.set(value, result);

    	  if (!isArr) {
    	    var props = isFull ? getAllKeys(value) : keys(value);
    	  }
    	  arrayEach(props || value, function(subValue, key) {
    	    if (props) {
    	      key = subValue;
    	      subValue = value[key];
    	    }
    	    // Recursively populate clone (susceptible to call stack limits).
    	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
    	  });
    	  return result;
    	}

    	/**
    	 * The base implementation of `_.create` without support for assigning
    	 * properties to the created object.
    	 *
    	 * @private
    	 * @param {Object} prototype The object to inherit from.
    	 * @returns {Object} Returns the new object.
    	 */
    	function baseCreate(proto) {
    	  return isObject(proto) ? objectCreate(proto) : {};
    	}

    	/**
    	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
    	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
    	 * symbols of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @param {Function} keysFunc The function to get the keys of `object`.
    	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
    	 * @returns {Array} Returns the array of property names and symbols.
    	 */
    	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    	  var result = keysFunc(object);
    	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    	}

    	/**
    	 * The base implementation of `getTag`.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @returns {string} Returns the `toStringTag`.
    	 */
    	function baseGetTag(value) {
    	  return objectToString.call(value);
    	}

    	/**
    	 * The base implementation of `_.isNative` without bad shim checks.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a native function,
    	 *  else `false`.
    	 */
    	function baseIsNative(value) {
    	  if (!isObject(value) || isMasked(value)) {
    	    return false;
    	  }
    	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
    	  return pattern.test(toSource(value));
    	}

    	/**
    	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names.
    	 */
    	function baseKeys(object) {
    	  if (!isPrototype(object)) {
    	    return nativeKeys(object);
    	  }
    	  var result = [];
    	  for (var key in Object(object)) {
    	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
    	      result.push(key);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * Creates a clone of  `buffer`.
    	 *
    	 * @private
    	 * @param {Buffer} buffer The buffer to clone.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @returns {Buffer} Returns the cloned buffer.
    	 */
    	function cloneBuffer(buffer, isDeep) {
    	  if (isDeep) {
    	    return buffer.slice();
    	  }
    	  var result = new buffer.constructor(buffer.length);
    	  buffer.copy(result);
    	  return result;
    	}

    	/**
    	 * Creates a clone of `arrayBuffer`.
    	 *
    	 * @private
    	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
    	 * @returns {ArrayBuffer} Returns the cloned array buffer.
    	 */
    	function cloneArrayBuffer(arrayBuffer) {
    	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    	  return result;
    	}

    	/**
    	 * Creates a clone of `dataView`.
    	 *
    	 * @private
    	 * @param {Object} dataView The data view to clone.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @returns {Object} Returns the cloned data view.
    	 */
    	function cloneDataView(dataView, isDeep) {
    	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    	}

    	/**
    	 * Creates a clone of `map`.
    	 *
    	 * @private
    	 * @param {Object} map The map to clone.
    	 * @param {Function} cloneFunc The function to clone values.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @returns {Object} Returns the cloned map.
    	 */
    	function cloneMap(map, isDeep, cloneFunc) {
    	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
    	  return arrayReduce(array, addMapEntry, new map.constructor);
    	}

    	/**
    	 * Creates a clone of `regexp`.
    	 *
    	 * @private
    	 * @param {Object} regexp The regexp to clone.
    	 * @returns {Object} Returns the cloned regexp.
    	 */
    	function cloneRegExp(regexp) {
    	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    	  result.lastIndex = regexp.lastIndex;
    	  return result;
    	}

    	/**
    	 * Creates a clone of `set`.
    	 *
    	 * @private
    	 * @param {Object} set The set to clone.
    	 * @param {Function} cloneFunc The function to clone values.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @returns {Object} Returns the cloned set.
    	 */
    	function cloneSet(set, isDeep, cloneFunc) {
    	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
    	  return arrayReduce(array, addSetEntry, new set.constructor);
    	}

    	/**
    	 * Creates a clone of the `symbol` object.
    	 *
    	 * @private
    	 * @param {Object} symbol The symbol object to clone.
    	 * @returns {Object} Returns the cloned symbol object.
    	 */
    	function cloneSymbol(symbol) {
    	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    	}

    	/**
    	 * Creates a clone of `typedArray`.
    	 *
    	 * @private
    	 * @param {Object} typedArray The typed array to clone.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @returns {Object} Returns the cloned typed array.
    	 */
    	function cloneTypedArray(typedArray, isDeep) {
    	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    	}

    	/**
    	 * Copies the values of `source` to `array`.
    	 *
    	 * @private
    	 * @param {Array} source The array to copy values from.
    	 * @param {Array} [array=[]] The array to copy values to.
    	 * @returns {Array} Returns `array`.
    	 */
    	function copyArray(source, array) {
    	  var index = -1,
    	      length = source.length;

    	  array || (array = Array(length));
    	  while (++index < length) {
    	    array[index] = source[index];
    	  }
    	  return array;
    	}

    	/**
    	 * Copies properties of `source` to `object`.
    	 *
    	 * @private
    	 * @param {Object} source The object to copy properties from.
    	 * @param {Array} props The property identifiers to copy.
    	 * @param {Object} [object={}] The object to copy properties to.
    	 * @param {Function} [customizer] The function to customize copied values.
    	 * @returns {Object} Returns `object`.
    	 */
    	function copyObject(source, props, object, customizer) {
    	  object || (object = {});

    	  var index = -1,
    	      length = props.length;

    	  while (++index < length) {
    	    var key = props[index];

    	    var newValue = customizer
    	      ? customizer(object[key], source[key], key, object, source)
    	      : undefined;

    	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
    	  }
    	  return object;
    	}

    	/**
    	 * Copies own symbol properties of `source` to `object`.
    	 *
    	 * @private
    	 * @param {Object} source The object to copy symbols from.
    	 * @param {Object} [object={}] The object to copy symbols to.
    	 * @returns {Object} Returns `object`.
    	 */
    	function copySymbols(source, object) {
    	  return copyObject(source, getSymbols(source), object);
    	}

    	/**
    	 * Creates an array of own enumerable property names and symbols of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names and symbols.
    	 */
    	function getAllKeys(object) {
    	  return baseGetAllKeys(object, keys, getSymbols);
    	}

    	/**
    	 * Gets the data for `map`.
    	 *
    	 * @private
    	 * @param {Object} map The map to query.
    	 * @param {string} key The reference key.
    	 * @returns {*} Returns the map data.
    	 */
    	function getMapData(map, key) {
    	  var data = map.__data__;
    	  return isKeyable(key)
    	    ? data[typeof key == 'string' ? 'string' : 'hash']
    	    : data.map;
    	}

    	/**
    	 * Gets the native function at `key` of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @param {string} key The key of the method to get.
    	 * @returns {*} Returns the function if it's native, else `undefined`.
    	 */
    	function getNative(object, key) {
    	  var value = getValue(object, key);
    	  return baseIsNative(value) ? value : undefined;
    	}

    	/**
    	 * Creates an array of the own enumerable symbol properties of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of symbols.
    	 */
    	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

    	/**
    	 * Gets the `toStringTag` of `value`.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @returns {string} Returns the `toStringTag`.
    	 */
    	var getTag = baseGetTag;

    	// Fallback for data views, maps, sets, and weak maps in IE 11,
    	// for data views in Edge < 14, and promises in Node.js.
    	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    	    (Map && getTag(new Map) != mapTag) ||
    	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    	    (Set && getTag(new Set) != setTag) ||
    	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    	  getTag = function(value) {
    	    var result = objectToString.call(value),
    	        Ctor = result == objectTag ? value.constructor : undefined,
    	        ctorString = Ctor ? toSource(Ctor) : undefined;

    	    if (ctorString) {
    	      switch (ctorString) {
    	        case dataViewCtorString: return dataViewTag;
    	        case mapCtorString: return mapTag;
    	        case promiseCtorString: return promiseTag;
    	        case setCtorString: return setTag;
    	        case weakMapCtorString: return weakMapTag;
    	      }
    	    }
    	    return result;
    	  };
    	}

    	/**
    	 * Initializes an array clone.
    	 *
    	 * @private
    	 * @param {Array} array The array to clone.
    	 * @returns {Array} Returns the initialized clone.
    	 */
    	function initCloneArray(array) {
    	  var length = array.length,
    	      result = array.constructor(length);

    	  // Add properties assigned by `RegExp#exec`.
    	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    	    result.index = array.index;
    	    result.input = array.input;
    	  }
    	  return result;
    	}

    	/**
    	 * Initializes an object clone.
    	 *
    	 * @private
    	 * @param {Object} object The object to clone.
    	 * @returns {Object} Returns the initialized clone.
    	 */
    	function initCloneObject(object) {
    	  return (typeof object.constructor == 'function' && !isPrototype(object))
    	    ? baseCreate(getPrototype(object))
    	    : {};
    	}

    	/**
    	 * Initializes an object clone based on its `toStringTag`.
    	 *
    	 * **Note:** This function only supports cloning values with tags of
    	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
    	 *
    	 * @private
    	 * @param {Object} object The object to clone.
    	 * @param {string} tag The `toStringTag` of the object to clone.
    	 * @param {Function} cloneFunc The function to clone values.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @returns {Object} Returns the initialized clone.
    	 */
    	function initCloneByTag(object, tag, cloneFunc, isDeep) {
    	  var Ctor = object.constructor;
    	  switch (tag) {
    	    case arrayBufferTag:
    	      return cloneArrayBuffer(object);

    	    case boolTag:
    	    case dateTag:
    	      return new Ctor(+object);

    	    case dataViewTag:
    	      return cloneDataView(object, isDeep);

    	    case float32Tag: case float64Tag:
    	    case int8Tag: case int16Tag: case int32Tag:
    	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
    	      return cloneTypedArray(object, isDeep);

    	    case mapTag:
    	      return cloneMap(object, isDeep, cloneFunc);

    	    case numberTag:
    	    case stringTag:
    	      return new Ctor(object);

    	    case regexpTag:
    	      return cloneRegExp(object);

    	    case setTag:
    	      return cloneSet(object, isDeep, cloneFunc);

    	    case symbolTag:
    	      return cloneSymbol(object);
    	  }
    	}

    	/**
    	 * Checks if `value` is a valid array-like index.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
    	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
    	 */
    	function isIndex(value, length) {
    	  length = length == null ? MAX_SAFE_INTEGER : length;
    	  return !!length &&
    	    (typeof value == 'number' || reIsUint.test(value)) &&
    	    (value > -1 && value % 1 == 0 && value < length);
    	}

    	/**
    	 * Checks if `value` is suitable for use as unique object key.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
    	 */
    	function isKeyable(value) {
    	  var type = typeof value;
    	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    	    ? (value !== '__proto__')
    	    : (value === null);
    	}

    	/**
    	 * Checks if `func` has its source masked.
    	 *
    	 * @private
    	 * @param {Function} func The function to check.
    	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
    	 */
    	function isMasked(func) {
    	  return !!maskSrcKey && (maskSrcKey in func);
    	}

    	/**
    	 * Checks if `value` is likely a prototype object.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
    	 */
    	function isPrototype(value) {
    	  var Ctor = value && value.constructor,
    	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    	  return value === proto;
    	}

    	/**
    	 * Converts `func` to its source code.
    	 *
    	 * @private
    	 * @param {Function} func The function to process.
    	 * @returns {string} Returns the source code.
    	 */
    	function toSource(func) {
    	  if (func != null) {
    	    try {
    	      return funcToString.call(func);
    	    } catch (e) {}
    	    try {
    	      return (func + '');
    	    } catch (e) {}
    	  }
    	  return '';
    	}

    	/**
    	 * This method is like `_.clone` except that it recursively clones `value`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 1.0.0
    	 * @category Lang
    	 * @param {*} value The value to recursively clone.
    	 * @returns {*} Returns the deep cloned value.
    	 * @see _.clone
    	 * @example
    	 *
    	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
    	 *
    	 * var deep = _.cloneDeep(objects);
    	 * console.log(deep[0] === objects[0]);
    	 * // => false
    	 */
    	function cloneDeep(value) {
    	  return baseClone(value, true, true);
    	}

    	/**
    	 * Performs a
    	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	 * comparison between two values to determine if they are equivalent.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to compare.
    	 * @param {*} other The other value to compare.
    	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	 * @example
    	 *
    	 * var object = { 'a': 1 };
    	 * var other = { 'a': 1 };
    	 *
    	 * _.eq(object, object);
    	 * // => true
    	 *
    	 * _.eq(object, other);
    	 * // => false
    	 *
    	 * _.eq('a', 'a');
    	 * // => true
    	 *
    	 * _.eq('a', Object('a'));
    	 * // => false
    	 *
    	 * _.eq(NaN, NaN);
    	 * // => true
    	 */
    	function eq(value, other) {
    	  return value === other || (value !== value && other !== other);
    	}

    	/**
    	 * Checks if `value` is likely an `arguments` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	 *  else `false`.
    	 * @example
    	 *
    	 * _.isArguments(function() { return arguments; }());
    	 * // => true
    	 *
    	 * _.isArguments([1, 2, 3]);
    	 * // => false
    	 */
    	function isArguments(value) {
    	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    	}

    	/**
    	 * Checks if `value` is classified as an `Array` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
    	 * @example
    	 *
    	 * _.isArray([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArray(document.body.children);
    	 * // => false
    	 *
    	 * _.isArray('abc');
    	 * // => false
    	 *
    	 * _.isArray(_.noop);
    	 * // => false
    	 */
    	var isArray = Array.isArray;

    	/**
    	 * Checks if `value` is array-like. A value is considered array-like if it's
    	 * not a function and has a `value.length` that's an integer greater than or
    	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
    	 * @example
    	 *
    	 * _.isArrayLike([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArrayLike(document.body.children);
    	 * // => true
    	 *
    	 * _.isArrayLike('abc');
    	 * // => true
    	 *
    	 * _.isArrayLike(_.noop);
    	 * // => false
    	 */
    	function isArrayLike(value) {
    	  return value != null && isLength(value.length) && !isFunction(value);
    	}

    	/**
    	 * This method is like `_.isArrayLike` except that it also checks if `value`
    	 * is an object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an array-like object,
    	 *  else `false`.
    	 * @example
    	 *
    	 * _.isArrayLikeObject([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArrayLikeObject(document.body.children);
    	 * // => true
    	 *
    	 * _.isArrayLikeObject('abc');
    	 * // => false
    	 *
    	 * _.isArrayLikeObject(_.noop);
    	 * // => false
    	 */
    	function isArrayLikeObject(value) {
    	  return isObjectLike(value) && isArrayLike(value);
    	}

    	/**
    	 * Checks if `value` is a buffer.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.3.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
    	 * @example
    	 *
    	 * _.isBuffer(new Buffer(2));
    	 * // => true
    	 *
    	 * _.isBuffer(new Uint8Array(2));
    	 * // => false
    	 */
    	var isBuffer = nativeIsBuffer || stubFalse;

    	/**
    	 * Checks if `value` is classified as a `Function` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
    	 * @example
    	 *
    	 * _.isFunction(_);
    	 * // => true
    	 *
    	 * _.isFunction(/abc/);
    	 * // => false
    	 */
    	function isFunction(value) {
    	  // The use of `Object#toString` avoids issues with the `typeof` operator
    	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
    	  var tag = isObject(value) ? objectToString.call(value) : '';
    	  return tag == funcTag || tag == genTag;
    	}

    	/**
    	 * Checks if `value` is a valid array-like length.
    	 *
    	 * **Note:** This method is loosely based on
    	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
    	 * @example
    	 *
    	 * _.isLength(3);
    	 * // => true
    	 *
    	 * _.isLength(Number.MIN_VALUE);
    	 * // => false
    	 *
    	 * _.isLength(Infinity);
    	 * // => false
    	 *
    	 * _.isLength('3');
    	 * // => false
    	 */
    	function isLength(value) {
    	  return typeof value == 'number' &&
    	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    	}

    	/**
    	 * Checks if `value` is the
    	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
    	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
    	 * @example
    	 *
    	 * _.isObject({});
    	 * // => true
    	 *
    	 * _.isObject([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isObject(_.noop);
    	 * // => true
    	 *
    	 * _.isObject(null);
    	 * // => false
    	 */
    	function isObject(value) {
    	  var type = typeof value;
    	  return !!value && (type == 'object' || type == 'function');
    	}

    	/**
    	 * Checks if `value` is object-like. A value is object-like if it's not `null`
    	 * and has a `typeof` result of "object".
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
    	 * @example
    	 *
    	 * _.isObjectLike({});
    	 * // => true
    	 *
    	 * _.isObjectLike([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isObjectLike(_.noop);
    	 * // => false
    	 *
    	 * _.isObjectLike(null);
    	 * // => false
    	 */
    	function isObjectLike(value) {
    	  return !!value && typeof value == 'object';
    	}

    	/**
    	 * Creates an array of the own enumerable property names of `object`.
    	 *
    	 * **Note:** Non-object values are coerced to objects. See the
    	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	 * for more details.
    	 *
    	 * @static
    	 * @since 0.1.0
    	 * @memberOf _
    	 * @category Object
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names.
    	 * @example
    	 *
    	 * function Foo() {
    	 *   this.a = 1;
    	 *   this.b = 2;
    	 * }
    	 *
    	 * Foo.prototype.c = 3;
    	 *
    	 * _.keys(new Foo);
    	 * // => ['a', 'b'] (iteration order is not guaranteed)
    	 *
    	 * _.keys('hi');
    	 * // => ['0', '1']
    	 */
    	function keys(object) {
    	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    	}

    	/**
    	 * This method returns a new empty array.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.13.0
    	 * @category Util
    	 * @returns {Array} Returns the new empty array.
    	 * @example
    	 *
    	 * var arrays = _.times(2, _.stubArray);
    	 *
    	 * console.log(arrays);
    	 * // => [[], []]
    	 *
    	 * console.log(arrays[0] === arrays[1]);
    	 * // => false
    	 */
    	function stubArray() {
    	  return [];
    	}

    	/**
    	 * This method returns `false`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.13.0
    	 * @category Util
    	 * @returns {boolean} Returns `false`.
    	 * @example
    	 *
    	 * _.times(2, _.stubFalse);
    	 * // => [false, false]
    	 */
    	function stubFalse() {
    	  return false;
    	}

    	module.exports = cloneDeep;
    } (lodash_clonedeep, lodash_clonedeepExports));

    var lodash_isequalExports = {};
    var lodash_isequal = {
      get exports(){ return lodash_isequalExports; },
      set exports(v){ lodash_isequalExports = v; },
    };

    /**
     * Lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright JS Foundation and other contributors <https://js.foundation/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    (function (module, exports) {
    	/** Used as the size to enable large array optimizations. */
    	var LARGE_ARRAY_SIZE = 200;

    	/** Used to stand-in for `undefined` hash values. */
    	var HASH_UNDEFINED = '__lodash_hash_undefined__';

    	/** Used to compose bitmasks for value comparisons. */
    	var COMPARE_PARTIAL_FLAG = 1,
    	    COMPARE_UNORDERED_FLAG = 2;

    	/** Used as references for various `Number` constants. */
    	var MAX_SAFE_INTEGER = 9007199254740991;

    	/** `Object#toString` result references. */
    	var argsTag = '[object Arguments]',
    	    arrayTag = '[object Array]',
    	    asyncTag = '[object AsyncFunction]',
    	    boolTag = '[object Boolean]',
    	    dateTag = '[object Date]',
    	    errorTag = '[object Error]',
    	    funcTag = '[object Function]',
    	    genTag = '[object GeneratorFunction]',
    	    mapTag = '[object Map]',
    	    numberTag = '[object Number]',
    	    nullTag = '[object Null]',
    	    objectTag = '[object Object]',
    	    promiseTag = '[object Promise]',
    	    proxyTag = '[object Proxy]',
    	    regexpTag = '[object RegExp]',
    	    setTag = '[object Set]',
    	    stringTag = '[object String]',
    	    symbolTag = '[object Symbol]',
    	    undefinedTag = '[object Undefined]',
    	    weakMapTag = '[object WeakMap]';

    	var arrayBufferTag = '[object ArrayBuffer]',
    	    dataViewTag = '[object DataView]',
    	    float32Tag = '[object Float32Array]',
    	    float64Tag = '[object Float64Array]',
    	    int8Tag = '[object Int8Array]',
    	    int16Tag = '[object Int16Array]',
    	    int32Tag = '[object Int32Array]',
    	    uint8Tag = '[object Uint8Array]',
    	    uint8ClampedTag = '[object Uint8ClampedArray]',
    	    uint16Tag = '[object Uint16Array]',
    	    uint32Tag = '[object Uint32Array]';

    	/**
    	 * Used to match `RegExp`
    	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
    	 */
    	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    	/** Used to detect host constructors (Safari). */
    	var reIsHostCtor = /^\[object .+?Constructor\]$/;

    	/** Used to detect unsigned integer values. */
    	var reIsUint = /^(?:0|[1-9]\d*)$/;

    	/** Used to identify `toStringTag` values of typed arrays. */
    	var typedArrayTags = {};
    	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    	typedArrayTags[uint32Tag] = true;
    	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    	typedArrayTags[setTag] = typedArrayTags[stringTag] =
    	typedArrayTags[weakMapTag] = false;

    	/** Detect free variable `global` from Node.js. */
    	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    	/** Detect free variable `self`. */
    	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    	/** Used as a reference to the global object. */
    	var root = freeGlobal || freeSelf || Function('return this')();

    	/** Detect free variable `exports`. */
    	var freeExports = exports && !exports.nodeType && exports;

    	/** Detect free variable `module`. */
    	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	/** Detect the popular CommonJS extension `module.exports`. */
    	var moduleExports = freeModule && freeModule.exports === freeExports;

    	/** Detect free variable `process` from Node.js. */
    	var freeProcess = moduleExports && freeGlobal.process;

    	/** Used to access faster Node.js helpers. */
    	var nodeUtil = (function() {
    	  try {
    	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
    	  } catch (e) {}
    	}());

    	/* Node.js helper references. */
    	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    	/**
    	 * A specialized version of `_.filter` for arrays without support for
    	 * iteratee shorthands.
    	 *
    	 * @private
    	 * @param {Array} [array] The array to iterate over.
    	 * @param {Function} predicate The function invoked per iteration.
    	 * @returns {Array} Returns the new filtered array.
    	 */
    	function arrayFilter(array, predicate) {
    	  var index = -1,
    	      length = array == null ? 0 : array.length,
    	      resIndex = 0,
    	      result = [];

    	  while (++index < length) {
    	    var value = array[index];
    	    if (predicate(value, index, array)) {
    	      result[resIndex++] = value;
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * Appends the elements of `values` to `array`.
    	 *
    	 * @private
    	 * @param {Array} array The array to modify.
    	 * @param {Array} values The values to append.
    	 * @returns {Array} Returns `array`.
    	 */
    	function arrayPush(array, values) {
    	  var index = -1,
    	      length = values.length,
    	      offset = array.length;

    	  while (++index < length) {
    	    array[offset + index] = values[index];
    	  }
    	  return array;
    	}

    	/**
    	 * A specialized version of `_.some` for arrays without support for iteratee
    	 * shorthands.
    	 *
    	 * @private
    	 * @param {Array} [array] The array to iterate over.
    	 * @param {Function} predicate The function invoked per iteration.
    	 * @returns {boolean} Returns `true` if any element passes the predicate check,
    	 *  else `false`.
    	 */
    	function arraySome(array, predicate) {
    	  var index = -1,
    	      length = array == null ? 0 : array.length;

    	  while (++index < length) {
    	    if (predicate(array[index], index, array)) {
    	      return true;
    	    }
    	  }
    	  return false;
    	}

    	/**
    	 * The base implementation of `_.times` without support for iteratee shorthands
    	 * or max array length checks.
    	 *
    	 * @private
    	 * @param {number} n The number of times to invoke `iteratee`.
    	 * @param {Function} iteratee The function invoked per iteration.
    	 * @returns {Array} Returns the array of results.
    	 */
    	function baseTimes(n, iteratee) {
    	  var index = -1,
    	      result = Array(n);

    	  while (++index < n) {
    	    result[index] = iteratee(index);
    	  }
    	  return result;
    	}

    	/**
    	 * The base implementation of `_.unary` without support for storing metadata.
    	 *
    	 * @private
    	 * @param {Function} func The function to cap arguments for.
    	 * @returns {Function} Returns the new capped function.
    	 */
    	function baseUnary(func) {
    	  return function(value) {
    	    return func(value);
    	  };
    	}

    	/**
    	 * Checks if a `cache` value for `key` exists.
    	 *
    	 * @private
    	 * @param {Object} cache The cache to query.
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function cacheHas(cache, key) {
    	  return cache.has(key);
    	}

    	/**
    	 * Gets the value at `key` of `object`.
    	 *
    	 * @private
    	 * @param {Object} [object] The object to query.
    	 * @param {string} key The key of the property to get.
    	 * @returns {*} Returns the property value.
    	 */
    	function getValue(object, key) {
    	  return object == null ? undefined : object[key];
    	}

    	/**
    	 * Converts `map` to its key-value pairs.
    	 *
    	 * @private
    	 * @param {Object} map The map to convert.
    	 * @returns {Array} Returns the key-value pairs.
    	 */
    	function mapToArray(map) {
    	  var index = -1,
    	      result = Array(map.size);

    	  map.forEach(function(value, key) {
    	    result[++index] = [key, value];
    	  });
    	  return result;
    	}

    	/**
    	 * Creates a unary function that invokes `func` with its argument transformed.
    	 *
    	 * @private
    	 * @param {Function} func The function to wrap.
    	 * @param {Function} transform The argument transform.
    	 * @returns {Function} Returns the new function.
    	 */
    	function overArg(func, transform) {
    	  return function(arg) {
    	    return func(transform(arg));
    	  };
    	}

    	/**
    	 * Converts `set` to an array of its values.
    	 *
    	 * @private
    	 * @param {Object} set The set to convert.
    	 * @returns {Array} Returns the values.
    	 */
    	function setToArray(set) {
    	  var index = -1,
    	      result = Array(set.size);

    	  set.forEach(function(value) {
    	    result[++index] = value;
    	  });
    	  return result;
    	}

    	/** Used for built-in method references. */
    	var arrayProto = Array.prototype,
    	    funcProto = Function.prototype,
    	    objectProto = Object.prototype;

    	/** Used to detect overreaching core-js shims. */
    	var coreJsData = root['__core-js_shared__'];

    	/** Used to resolve the decompiled source of functions. */
    	var funcToString = funcProto.toString;

    	/** Used to check objects for own properties. */
    	var hasOwnProperty = objectProto.hasOwnProperty;

    	/** Used to detect methods masquerading as native. */
    	var maskSrcKey = (function() {
    	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    	  return uid ? ('Symbol(src)_1.' + uid) : '';
    	}());

    	/**
    	 * Used to resolve the
    	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
    	 * of values.
    	 */
    	var nativeObjectToString = objectProto.toString;

    	/** Used to detect if a method is native. */
    	var reIsNative = RegExp('^' +
    	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    	);

    	/** Built-in value references. */
    	var Buffer = moduleExports ? root.Buffer : undefined,
    	    Symbol = root.Symbol,
    	    Uint8Array = root.Uint8Array,
    	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    	    splice = arrayProto.splice,
    	    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    	/* Built-in method references for those with the same name as other `lodash` methods. */
    	var nativeGetSymbols = Object.getOwnPropertySymbols,
    	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    	    nativeKeys = overArg(Object.keys, Object);

    	/* Built-in method references that are verified to be native. */
    	var DataView = getNative(root, 'DataView'),
    	    Map = getNative(root, 'Map'),
    	    Promise = getNative(root, 'Promise'),
    	    Set = getNative(root, 'Set'),
    	    WeakMap = getNative(root, 'WeakMap'),
    	    nativeCreate = getNative(Object, 'create');

    	/** Used to detect maps, sets, and weakmaps. */
    	var dataViewCtorString = toSource(DataView),
    	    mapCtorString = toSource(Map),
    	    promiseCtorString = toSource(Promise),
    	    setCtorString = toSource(Set),
    	    weakMapCtorString = toSource(WeakMap);

    	/** Used to convert symbols to primitives and strings. */
    	var symbolProto = Symbol ? Symbol.prototype : undefined,
    	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    	/**
    	 * Creates a hash object.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function Hash(entries) {
    	  var index = -1,
    	      length = entries == null ? 0 : entries.length;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the hash.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf Hash
    	 */
    	function hashClear() {
    	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
    	  this.size = 0;
    	}

    	/**
    	 * Removes `key` and its value from the hash.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf Hash
    	 * @param {Object} hash The hash to modify.
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function hashDelete(key) {
    	  var result = this.has(key) && delete this.__data__[key];
    	  this.size -= result ? 1 : 0;
    	  return result;
    	}

    	/**
    	 * Gets the hash value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf Hash
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function hashGet(key) {
    	  var data = this.__data__;
    	  if (nativeCreate) {
    	    var result = data[key];
    	    return result === HASH_UNDEFINED ? undefined : result;
    	  }
    	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
    	}

    	/**
    	 * Checks if a hash value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf Hash
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function hashHas(key) {
    	  var data = this.__data__;
    	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    	}

    	/**
    	 * Sets the hash `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf Hash
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the hash instance.
    	 */
    	function hashSet(key, value) {
    	  var data = this.__data__;
    	  this.size += this.has(key) ? 0 : 1;
    	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    	  return this;
    	}

    	// Add methods to `Hash`.
    	Hash.prototype.clear = hashClear;
    	Hash.prototype['delete'] = hashDelete;
    	Hash.prototype.get = hashGet;
    	Hash.prototype.has = hashHas;
    	Hash.prototype.set = hashSet;

    	/**
    	 * Creates an list cache object.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function ListCache(entries) {
    	  var index = -1,
    	      length = entries == null ? 0 : entries.length;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the list cache.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf ListCache
    	 */
    	function listCacheClear() {
    	  this.__data__ = [];
    	  this.size = 0;
    	}

    	/**
    	 * Removes `key` and its value from the list cache.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function listCacheDelete(key) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  if (index < 0) {
    	    return false;
    	  }
    	  var lastIndex = data.length - 1;
    	  if (index == lastIndex) {
    	    data.pop();
    	  } else {
    	    splice.call(data, index, 1);
    	  }
    	  --this.size;
    	  return true;
    	}

    	/**
    	 * Gets the list cache value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function listCacheGet(key) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  return index < 0 ? undefined : data[index][1];
    	}

    	/**
    	 * Checks if a list cache value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf ListCache
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function listCacheHas(key) {
    	  return assocIndexOf(this.__data__, key) > -1;
    	}

    	/**
    	 * Sets the list cache `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the list cache instance.
    	 */
    	function listCacheSet(key, value) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  if (index < 0) {
    	    ++this.size;
    	    data.push([key, value]);
    	  } else {
    	    data[index][1] = value;
    	  }
    	  return this;
    	}

    	// Add methods to `ListCache`.
    	ListCache.prototype.clear = listCacheClear;
    	ListCache.prototype['delete'] = listCacheDelete;
    	ListCache.prototype.get = listCacheGet;
    	ListCache.prototype.has = listCacheHas;
    	ListCache.prototype.set = listCacheSet;

    	/**
    	 * Creates a map cache object to store key-value pairs.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function MapCache(entries) {
    	  var index = -1,
    	      length = entries == null ? 0 : entries.length;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the map.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf MapCache
    	 */
    	function mapCacheClear() {
    	  this.size = 0;
    	  this.__data__ = {
    	    'hash': new Hash,
    	    'map': new (Map || ListCache),
    	    'string': new Hash
    	  };
    	}

    	/**
    	 * Removes `key` and its value from the map.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function mapCacheDelete(key) {
    	  var result = getMapData(this, key)['delete'](key);
    	  this.size -= result ? 1 : 0;
    	  return result;
    	}

    	/**
    	 * Gets the map value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function mapCacheGet(key) {
    	  return getMapData(this, key).get(key);
    	}

    	/**
    	 * Checks if a map value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf MapCache
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function mapCacheHas(key) {
    	  return getMapData(this, key).has(key);
    	}

    	/**
    	 * Sets the map `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the map cache instance.
    	 */
    	function mapCacheSet(key, value) {
    	  var data = getMapData(this, key),
    	      size = data.size;

    	  data.set(key, value);
    	  this.size += data.size == size ? 0 : 1;
    	  return this;
    	}

    	// Add methods to `MapCache`.
    	MapCache.prototype.clear = mapCacheClear;
    	MapCache.prototype['delete'] = mapCacheDelete;
    	MapCache.prototype.get = mapCacheGet;
    	MapCache.prototype.has = mapCacheHas;
    	MapCache.prototype.set = mapCacheSet;

    	/**
    	 *
    	 * Creates an array cache object to store unique values.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [values] The values to cache.
    	 */
    	function SetCache(values) {
    	  var index = -1,
    	      length = values == null ? 0 : values.length;

    	  this.__data__ = new MapCache;
    	  while (++index < length) {
    	    this.add(values[index]);
    	  }
    	}

    	/**
    	 * Adds `value` to the array cache.
    	 *
    	 * @private
    	 * @name add
    	 * @memberOf SetCache
    	 * @alias push
    	 * @param {*} value The value to cache.
    	 * @returns {Object} Returns the cache instance.
    	 */
    	function setCacheAdd(value) {
    	  this.__data__.set(value, HASH_UNDEFINED);
    	  return this;
    	}

    	/**
    	 * Checks if `value` is in the array cache.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf SetCache
    	 * @param {*} value The value to search for.
    	 * @returns {number} Returns `true` if `value` is found, else `false`.
    	 */
    	function setCacheHas(value) {
    	  return this.__data__.has(value);
    	}

    	// Add methods to `SetCache`.
    	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    	SetCache.prototype.has = setCacheHas;

    	/**
    	 * Creates a stack cache object to store key-value pairs.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function Stack(entries) {
    	  var data = this.__data__ = new ListCache(entries);
    	  this.size = data.size;
    	}

    	/**
    	 * Removes all key-value entries from the stack.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf Stack
    	 */
    	function stackClear() {
    	  this.__data__ = new ListCache;
    	  this.size = 0;
    	}

    	/**
    	 * Removes `key` and its value from the stack.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function stackDelete(key) {
    	  var data = this.__data__,
    	      result = data['delete'](key);

    	  this.size = data.size;
    	  return result;
    	}

    	/**
    	 * Gets the stack value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function stackGet(key) {
    	  return this.__data__.get(key);
    	}

    	/**
    	 * Checks if a stack value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf Stack
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function stackHas(key) {
    	  return this.__data__.has(key);
    	}

    	/**
    	 * Sets the stack `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the stack cache instance.
    	 */
    	function stackSet(key, value) {
    	  var data = this.__data__;
    	  if (data instanceof ListCache) {
    	    var pairs = data.__data__;
    	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
    	      pairs.push([key, value]);
    	      this.size = ++data.size;
    	      return this;
    	    }
    	    data = this.__data__ = new MapCache(pairs);
    	  }
    	  data.set(key, value);
    	  this.size = data.size;
    	  return this;
    	}

    	// Add methods to `Stack`.
    	Stack.prototype.clear = stackClear;
    	Stack.prototype['delete'] = stackDelete;
    	Stack.prototype.get = stackGet;
    	Stack.prototype.has = stackHas;
    	Stack.prototype.set = stackSet;

    	/**
    	 * Creates an array of the enumerable property names of the array-like `value`.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @param {boolean} inherited Specify returning inherited property names.
    	 * @returns {Array} Returns the array of property names.
    	 */
    	function arrayLikeKeys(value, inherited) {
    	  var isArr = isArray(value),
    	      isArg = !isArr && isArguments(value),
    	      isBuff = !isArr && !isArg && isBuffer(value),
    	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
    	      skipIndexes = isArr || isArg || isBuff || isType,
    	      result = skipIndexes ? baseTimes(value.length, String) : [],
    	      length = result.length;

    	  for (var key in value) {
    	    if ((inherited || hasOwnProperty.call(value, key)) &&
    	        !(skipIndexes && (
    	           // Safari 9 has enumerable `arguments.length` in strict mode.
    	           key == 'length' ||
    	           // Node.js 0.10 has enumerable non-index properties on buffers.
    	           (isBuff && (key == 'offset' || key == 'parent')) ||
    	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
    	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
    	           // Skip index properties.
    	           isIndex(key, length)
    	        ))) {
    	      result.push(key);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * Gets the index at which the `key` is found in `array` of key-value pairs.
    	 *
    	 * @private
    	 * @param {Array} array The array to inspect.
    	 * @param {*} key The key to search for.
    	 * @returns {number} Returns the index of the matched value, else `-1`.
    	 */
    	function assocIndexOf(array, key) {
    	  var length = array.length;
    	  while (length--) {
    	    if (eq(array[length][0], key)) {
    	      return length;
    	    }
    	  }
    	  return -1;
    	}

    	/**
    	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
    	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
    	 * symbols of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @param {Function} keysFunc The function to get the keys of `object`.
    	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
    	 * @returns {Array} Returns the array of property names and symbols.
    	 */
    	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    	  var result = keysFunc(object);
    	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    	}

    	/**
    	 * The base implementation of `getTag` without fallbacks for buggy environments.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @returns {string} Returns the `toStringTag`.
    	 */
    	function baseGetTag(value) {
    	  if (value == null) {
    	    return value === undefined ? undefinedTag : nullTag;
    	  }
    	  return (symToStringTag && symToStringTag in Object(value))
    	    ? getRawTag(value)
    	    : objectToString(value);
    	}

    	/**
    	 * The base implementation of `_.isArguments`.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	 */
    	function baseIsArguments(value) {
    	  return isObjectLike(value) && baseGetTag(value) == argsTag;
    	}

    	/**
    	 * The base implementation of `_.isEqual` which supports partial comparisons
    	 * and tracks traversed objects.
    	 *
    	 * @private
    	 * @param {*} value The value to compare.
    	 * @param {*} other The other value to compare.
    	 * @param {boolean} bitmask The bitmask flags.
    	 *  1 - Unordered comparison
    	 *  2 - Partial comparison
    	 * @param {Function} [customizer] The function to customize comparisons.
    	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
    	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	 */
    	function baseIsEqual(value, other, bitmask, customizer, stack) {
    	  if (value === other) {
    	    return true;
    	  }
    	  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    	    return value !== value && other !== other;
    	  }
    	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    	}

    	/**
    	 * A specialized version of `baseIsEqual` for arrays and objects which performs
    	 * deep comparisons and tracks traversed objects enabling objects with circular
    	 * references to be compared.
    	 *
    	 * @private
    	 * @param {Object} object The object to compare.
    	 * @param {Object} other The other object to compare.
    	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	 * @param {Function} customizer The function to customize comparisons.
    	 * @param {Function} equalFunc The function to determine equivalents of values.
    	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
    	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	 */
    	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    	  var objIsArr = isArray(object),
    	      othIsArr = isArray(other),
    	      objTag = objIsArr ? arrayTag : getTag(object),
    	      othTag = othIsArr ? arrayTag : getTag(other);

    	  objTag = objTag == argsTag ? objectTag : objTag;
    	  othTag = othTag == argsTag ? objectTag : othTag;

    	  var objIsObj = objTag == objectTag,
    	      othIsObj = othTag == objectTag,
    	      isSameTag = objTag == othTag;

    	  if (isSameTag && isBuffer(object)) {
    	    if (!isBuffer(other)) {
    	      return false;
    	    }
    	    objIsArr = true;
    	    objIsObj = false;
    	  }
    	  if (isSameTag && !objIsObj) {
    	    stack || (stack = new Stack);
    	    return (objIsArr || isTypedArray(object))
    	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
    	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    	  }
    	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
    	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    	    if (objIsWrapped || othIsWrapped) {
    	      var objUnwrapped = objIsWrapped ? object.value() : object,
    	          othUnwrapped = othIsWrapped ? other.value() : other;

    	      stack || (stack = new Stack);
    	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    	    }
    	  }
    	  if (!isSameTag) {
    	    return false;
    	  }
    	  stack || (stack = new Stack);
    	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    	}

    	/**
    	 * The base implementation of `_.isNative` without bad shim checks.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a native function,
    	 *  else `false`.
    	 */
    	function baseIsNative(value) {
    	  if (!isObject(value) || isMasked(value)) {
    	    return false;
    	  }
    	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    	  return pattern.test(toSource(value));
    	}

    	/**
    	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	 */
    	function baseIsTypedArray(value) {
    	  return isObjectLike(value) &&
    	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    	}

    	/**
    	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names.
    	 */
    	function baseKeys(object) {
    	  if (!isPrototype(object)) {
    	    return nativeKeys(object);
    	  }
    	  var result = [];
    	  for (var key in Object(object)) {
    	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
    	      result.push(key);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * A specialized version of `baseIsEqualDeep` for arrays with support for
    	 * partial deep comparisons.
    	 *
    	 * @private
    	 * @param {Array} array The array to compare.
    	 * @param {Array} other The other array to compare.
    	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	 * @param {Function} customizer The function to customize comparisons.
    	 * @param {Function} equalFunc The function to determine equivalents of values.
    	 * @param {Object} stack Tracks traversed `array` and `other` objects.
    	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
    	 */
    	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    	      arrLength = array.length,
    	      othLength = other.length;

    	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    	    return false;
    	  }
    	  // Assume cyclic values are equal.
    	  var stacked = stack.get(array);
    	  if (stacked && stack.get(other)) {
    	    return stacked == other;
    	  }
    	  var index = -1,
    	      result = true,
    	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

    	  stack.set(array, other);
    	  stack.set(other, array);

    	  // Ignore non-index properties.
    	  while (++index < arrLength) {
    	    var arrValue = array[index],
    	        othValue = other[index];

    	    if (customizer) {
    	      var compared = isPartial
    	        ? customizer(othValue, arrValue, index, other, array, stack)
    	        : customizer(arrValue, othValue, index, array, other, stack);
    	    }
    	    if (compared !== undefined) {
    	      if (compared) {
    	        continue;
    	      }
    	      result = false;
    	      break;
    	    }
    	    // Recursively compare arrays (susceptible to call stack limits).
    	    if (seen) {
    	      if (!arraySome(other, function(othValue, othIndex) {
    	            if (!cacheHas(seen, othIndex) &&
    	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
    	              return seen.push(othIndex);
    	            }
    	          })) {
    	        result = false;
    	        break;
    	      }
    	    } else if (!(
    	          arrValue === othValue ||
    	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
    	        )) {
    	      result = false;
    	      break;
    	    }
    	  }
    	  stack['delete'](array);
    	  stack['delete'](other);
    	  return result;
    	}

    	/**
    	 * A specialized version of `baseIsEqualDeep` for comparing objects of
    	 * the same `toStringTag`.
    	 *
    	 * **Note:** This function only supports comparing values with tags of
    	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
    	 *
    	 * @private
    	 * @param {Object} object The object to compare.
    	 * @param {Object} other The other object to compare.
    	 * @param {string} tag The `toStringTag` of the objects to compare.
    	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	 * @param {Function} customizer The function to customize comparisons.
    	 * @param {Function} equalFunc The function to determine equivalents of values.
    	 * @param {Object} stack Tracks traversed `object` and `other` objects.
    	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	 */
    	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    	  switch (tag) {
    	    case dataViewTag:
    	      if ((object.byteLength != other.byteLength) ||
    	          (object.byteOffset != other.byteOffset)) {
    	        return false;
    	      }
    	      object = object.buffer;
    	      other = other.buffer;

    	    case arrayBufferTag:
    	      if ((object.byteLength != other.byteLength) ||
    	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
    	        return false;
    	      }
    	      return true;

    	    case boolTag:
    	    case dateTag:
    	    case numberTag:
    	      // Coerce booleans to `1` or `0` and dates to milliseconds.
    	      // Invalid dates are coerced to `NaN`.
    	      return eq(+object, +other);

    	    case errorTag:
    	      return object.name == other.name && object.message == other.message;

    	    case regexpTag:
    	    case stringTag:
    	      // Coerce regexes to strings and treat strings, primitives and objects,
    	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
    	      // for more details.
    	      return object == (other + '');

    	    case mapTag:
    	      var convert = mapToArray;

    	    case setTag:
    	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
    	      convert || (convert = setToArray);

    	      if (object.size != other.size && !isPartial) {
    	        return false;
    	      }
    	      // Assume cyclic values are equal.
    	      var stacked = stack.get(object);
    	      if (stacked) {
    	        return stacked == other;
    	      }
    	      bitmask |= COMPARE_UNORDERED_FLAG;

    	      // Recursively compare objects (susceptible to call stack limits).
    	      stack.set(object, other);
    	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
    	      stack['delete'](object);
    	      return result;

    	    case symbolTag:
    	      if (symbolValueOf) {
    	        return symbolValueOf.call(object) == symbolValueOf.call(other);
    	      }
    	  }
    	  return false;
    	}

    	/**
    	 * A specialized version of `baseIsEqualDeep` for objects with support for
    	 * partial deep comparisons.
    	 *
    	 * @private
    	 * @param {Object} object The object to compare.
    	 * @param {Object} other The other object to compare.
    	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	 * @param {Function} customizer The function to customize comparisons.
    	 * @param {Function} equalFunc The function to determine equivalents of values.
    	 * @param {Object} stack Tracks traversed `object` and `other` objects.
    	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	 */
    	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    	      objProps = getAllKeys(object),
    	      objLength = objProps.length,
    	      othProps = getAllKeys(other),
    	      othLength = othProps.length;

    	  if (objLength != othLength && !isPartial) {
    	    return false;
    	  }
    	  var index = objLength;
    	  while (index--) {
    	    var key = objProps[index];
    	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
    	      return false;
    	    }
    	  }
    	  // Assume cyclic values are equal.
    	  var stacked = stack.get(object);
    	  if (stacked && stack.get(other)) {
    	    return stacked == other;
    	  }
    	  var result = true;
    	  stack.set(object, other);
    	  stack.set(other, object);

    	  var skipCtor = isPartial;
    	  while (++index < objLength) {
    	    key = objProps[index];
    	    var objValue = object[key],
    	        othValue = other[key];

    	    if (customizer) {
    	      var compared = isPartial
    	        ? customizer(othValue, objValue, key, other, object, stack)
    	        : customizer(objValue, othValue, key, object, other, stack);
    	    }
    	    // Recursively compare objects (susceptible to call stack limits).
    	    if (!(compared === undefined
    	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
    	          : compared
    	        )) {
    	      result = false;
    	      break;
    	    }
    	    skipCtor || (skipCtor = key == 'constructor');
    	  }
    	  if (result && !skipCtor) {
    	    var objCtor = object.constructor,
    	        othCtor = other.constructor;

    	    // Non `Object` object instances with different constructors are not equal.
    	    if (objCtor != othCtor &&
    	        ('constructor' in object && 'constructor' in other) &&
    	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
    	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
    	      result = false;
    	    }
    	  }
    	  stack['delete'](object);
    	  stack['delete'](other);
    	  return result;
    	}

    	/**
    	 * Creates an array of own enumerable property names and symbols of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names and symbols.
    	 */
    	function getAllKeys(object) {
    	  return baseGetAllKeys(object, keys, getSymbols);
    	}

    	/**
    	 * Gets the data for `map`.
    	 *
    	 * @private
    	 * @param {Object} map The map to query.
    	 * @param {string} key The reference key.
    	 * @returns {*} Returns the map data.
    	 */
    	function getMapData(map, key) {
    	  var data = map.__data__;
    	  return isKeyable(key)
    	    ? data[typeof key == 'string' ? 'string' : 'hash']
    	    : data.map;
    	}

    	/**
    	 * Gets the native function at `key` of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @param {string} key The key of the method to get.
    	 * @returns {*} Returns the function if it's native, else `undefined`.
    	 */
    	function getNative(object, key) {
    	  var value = getValue(object, key);
    	  return baseIsNative(value) ? value : undefined;
    	}

    	/**
    	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @returns {string} Returns the raw `toStringTag`.
    	 */
    	function getRawTag(value) {
    	  var isOwn = hasOwnProperty.call(value, symToStringTag),
    	      tag = value[symToStringTag];

    	  try {
    	    value[symToStringTag] = undefined;
    	    var unmasked = true;
    	  } catch (e) {}

    	  var result = nativeObjectToString.call(value);
    	  if (unmasked) {
    	    if (isOwn) {
    	      value[symToStringTag] = tag;
    	    } else {
    	      delete value[symToStringTag];
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * Creates an array of the own enumerable symbols of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of symbols.
    	 */
    	var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    	  if (object == null) {
    	    return [];
    	  }
    	  object = Object(object);
    	  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    	    return propertyIsEnumerable.call(object, symbol);
    	  });
    	};

    	/**
    	 * Gets the `toStringTag` of `value`.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @returns {string} Returns the `toStringTag`.
    	 */
    	var getTag = baseGetTag;

    	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    	    (Map && getTag(new Map) != mapTag) ||
    	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    	    (Set && getTag(new Set) != setTag) ||
    	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    	  getTag = function(value) {
    	    var result = baseGetTag(value),
    	        Ctor = result == objectTag ? value.constructor : undefined,
    	        ctorString = Ctor ? toSource(Ctor) : '';

    	    if (ctorString) {
    	      switch (ctorString) {
    	        case dataViewCtorString: return dataViewTag;
    	        case mapCtorString: return mapTag;
    	        case promiseCtorString: return promiseTag;
    	        case setCtorString: return setTag;
    	        case weakMapCtorString: return weakMapTag;
    	      }
    	    }
    	    return result;
    	  };
    	}

    	/**
    	 * Checks if `value` is a valid array-like index.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
    	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
    	 */
    	function isIndex(value, length) {
    	  length = length == null ? MAX_SAFE_INTEGER : length;
    	  return !!length &&
    	    (typeof value == 'number' || reIsUint.test(value)) &&
    	    (value > -1 && value % 1 == 0 && value < length);
    	}

    	/**
    	 * Checks if `value` is suitable for use as unique object key.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
    	 */
    	function isKeyable(value) {
    	  var type = typeof value;
    	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    	    ? (value !== '__proto__')
    	    : (value === null);
    	}

    	/**
    	 * Checks if `func` has its source masked.
    	 *
    	 * @private
    	 * @param {Function} func The function to check.
    	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
    	 */
    	function isMasked(func) {
    	  return !!maskSrcKey && (maskSrcKey in func);
    	}

    	/**
    	 * Checks if `value` is likely a prototype object.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
    	 */
    	function isPrototype(value) {
    	  var Ctor = value && value.constructor,
    	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    	  return value === proto;
    	}

    	/**
    	 * Converts `value` to a string using `Object.prototype.toString`.
    	 *
    	 * @private
    	 * @param {*} value The value to convert.
    	 * @returns {string} Returns the converted string.
    	 */
    	function objectToString(value) {
    	  return nativeObjectToString.call(value);
    	}

    	/**
    	 * Converts `func` to its source code.
    	 *
    	 * @private
    	 * @param {Function} func The function to convert.
    	 * @returns {string} Returns the source code.
    	 */
    	function toSource(func) {
    	  if (func != null) {
    	    try {
    	      return funcToString.call(func);
    	    } catch (e) {}
    	    try {
    	      return (func + '');
    	    } catch (e) {}
    	  }
    	  return '';
    	}

    	/**
    	 * Performs a
    	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	 * comparison between two values to determine if they are equivalent.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to compare.
    	 * @param {*} other The other value to compare.
    	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	 * @example
    	 *
    	 * var object = { 'a': 1 };
    	 * var other = { 'a': 1 };
    	 *
    	 * _.eq(object, object);
    	 * // => true
    	 *
    	 * _.eq(object, other);
    	 * // => false
    	 *
    	 * _.eq('a', 'a');
    	 * // => true
    	 *
    	 * _.eq('a', Object('a'));
    	 * // => false
    	 *
    	 * _.eq(NaN, NaN);
    	 * // => true
    	 */
    	function eq(value, other) {
    	  return value === other || (value !== value && other !== other);
    	}

    	/**
    	 * Checks if `value` is likely an `arguments` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	 *  else `false`.
    	 * @example
    	 *
    	 * _.isArguments(function() { return arguments; }());
    	 * // => true
    	 *
    	 * _.isArguments([1, 2, 3]);
    	 * // => false
    	 */
    	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    	    !propertyIsEnumerable.call(value, 'callee');
    	};

    	/**
    	 * Checks if `value` is classified as an `Array` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
    	 * @example
    	 *
    	 * _.isArray([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArray(document.body.children);
    	 * // => false
    	 *
    	 * _.isArray('abc');
    	 * // => false
    	 *
    	 * _.isArray(_.noop);
    	 * // => false
    	 */
    	var isArray = Array.isArray;

    	/**
    	 * Checks if `value` is array-like. A value is considered array-like if it's
    	 * not a function and has a `value.length` that's an integer greater than or
    	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
    	 * @example
    	 *
    	 * _.isArrayLike([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArrayLike(document.body.children);
    	 * // => true
    	 *
    	 * _.isArrayLike('abc');
    	 * // => true
    	 *
    	 * _.isArrayLike(_.noop);
    	 * // => false
    	 */
    	function isArrayLike(value) {
    	  return value != null && isLength(value.length) && !isFunction(value);
    	}

    	/**
    	 * Checks if `value` is a buffer.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.3.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
    	 * @example
    	 *
    	 * _.isBuffer(new Buffer(2));
    	 * // => true
    	 *
    	 * _.isBuffer(new Uint8Array(2));
    	 * // => false
    	 */
    	var isBuffer = nativeIsBuffer || stubFalse;

    	/**
    	 * Performs a deep comparison between two values to determine if they are
    	 * equivalent.
    	 *
    	 * **Note:** This method supports comparing arrays, array buffers, booleans,
    	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
    	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
    	 * by their own, not inherited, enumerable properties. Functions and DOM
    	 * nodes are compared by strict equality, i.e. `===`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to compare.
    	 * @param {*} other The other value to compare.
    	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	 * @example
    	 *
    	 * var object = { 'a': 1 };
    	 * var other = { 'a': 1 };
    	 *
    	 * _.isEqual(object, other);
    	 * // => true
    	 *
    	 * object === other;
    	 * // => false
    	 */
    	function isEqual(value, other) {
    	  return baseIsEqual(value, other);
    	}

    	/**
    	 * Checks if `value` is classified as a `Function` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
    	 * @example
    	 *
    	 * _.isFunction(_);
    	 * // => true
    	 *
    	 * _.isFunction(/abc/);
    	 * // => false
    	 */
    	function isFunction(value) {
    	  if (!isObject(value)) {
    	    return false;
    	  }
    	  // The use of `Object#toString` avoids issues with the `typeof` operator
    	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
    	  var tag = baseGetTag(value);
    	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    	}

    	/**
    	 * Checks if `value` is a valid array-like length.
    	 *
    	 * **Note:** This method is loosely based on
    	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
    	 * @example
    	 *
    	 * _.isLength(3);
    	 * // => true
    	 *
    	 * _.isLength(Number.MIN_VALUE);
    	 * // => false
    	 *
    	 * _.isLength(Infinity);
    	 * // => false
    	 *
    	 * _.isLength('3');
    	 * // => false
    	 */
    	function isLength(value) {
    	  return typeof value == 'number' &&
    	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    	}

    	/**
    	 * Checks if `value` is the
    	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
    	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
    	 * @example
    	 *
    	 * _.isObject({});
    	 * // => true
    	 *
    	 * _.isObject([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isObject(_.noop);
    	 * // => true
    	 *
    	 * _.isObject(null);
    	 * // => false
    	 */
    	function isObject(value) {
    	  var type = typeof value;
    	  return value != null && (type == 'object' || type == 'function');
    	}

    	/**
    	 * Checks if `value` is object-like. A value is object-like if it's not `null`
    	 * and has a `typeof` result of "object".
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
    	 * @example
    	 *
    	 * _.isObjectLike({});
    	 * // => true
    	 *
    	 * _.isObjectLike([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isObjectLike(_.noop);
    	 * // => false
    	 *
    	 * _.isObjectLike(null);
    	 * // => false
    	 */
    	function isObjectLike(value) {
    	  return value != null && typeof value == 'object';
    	}

    	/**
    	 * Checks if `value` is classified as a typed array.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 3.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	 * @example
    	 *
    	 * _.isTypedArray(new Uint8Array);
    	 * // => true
    	 *
    	 * _.isTypedArray([]);
    	 * // => false
    	 */
    	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    	/**
    	 * Creates an array of the own enumerable property names of `object`.
    	 *
    	 * **Note:** Non-object values are coerced to objects. See the
    	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	 * for more details.
    	 *
    	 * @static
    	 * @since 0.1.0
    	 * @memberOf _
    	 * @category Object
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names.
    	 * @example
    	 *
    	 * function Foo() {
    	 *   this.a = 1;
    	 *   this.b = 2;
    	 * }
    	 *
    	 * Foo.prototype.c = 3;
    	 *
    	 * _.keys(new Foo);
    	 * // => ['a', 'b'] (iteration order is not guaranteed)
    	 *
    	 * _.keys('hi');
    	 * // => ['0', '1']
    	 */
    	function keys(object) {
    	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    	}

    	/**
    	 * This method returns a new empty array.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.13.0
    	 * @category Util
    	 * @returns {Array} Returns the new empty array.
    	 * @example
    	 *
    	 * var arrays = _.times(2, _.stubArray);
    	 *
    	 * console.log(arrays);
    	 * // => [[], []]
    	 *
    	 * console.log(arrays[0] === arrays[1]);
    	 * // => false
    	 */
    	function stubArray() {
    	  return [];
    	}

    	/**
    	 * This method returns `false`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.13.0
    	 * @category Util
    	 * @returns {boolean} Returns `false`.
    	 * @example
    	 *
    	 * _.times(2, _.stubFalse);
    	 * // => [false, false]
    	 */
    	function stubFalse() {
    	  return false;
    	}

    	module.exports = isEqual;
    } (lodash_isequal, lodash_isequalExports));

    var AttributeMap$3 = {};

    Object.defineProperty(AttributeMap$3, "__esModule", { value: true });
    const cloneDeep = lodash_clonedeepExports;
    const isEqual = lodash_isequalExports;
    var AttributeMap$2;
    (function (AttributeMap) {
        function compose(a = {}, b = {}, keepNull = false) {
            if (typeof a !== 'object') {
                a = {};
            }
            if (typeof b !== 'object') {
                b = {};
            }
            let attributes = cloneDeep(b);
            if (!keepNull) {
                attributes = Object.keys(attributes).reduce((copy, key) => {
                    if (attributes[key] != null) {
                        copy[key] = attributes[key];
                    }
                    return copy;
                }, {});
            }
            for (const key in a) {
                if (a[key] !== undefined && b[key] === undefined) {
                    attributes[key] = a[key];
                }
            }
            return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
        AttributeMap.compose = compose;
        function diff(a = {}, b = {}) {
            if (typeof a !== 'object') {
                a = {};
            }
            if (typeof b !== 'object') {
                b = {};
            }
            const attributes = Object.keys(a)
                .concat(Object.keys(b))
                .reduce((attrs, key) => {
                if (!isEqual(a[key], b[key])) {
                    attrs[key] = b[key] === undefined ? null : b[key];
                }
                return attrs;
            }, {});
            return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
        AttributeMap.diff = diff;
        function invert(attr = {}, base = {}) {
            attr = attr || {};
            const baseInverted = Object.keys(base).reduce((memo, key) => {
                if (base[key] !== attr[key] && attr[key] !== undefined) {
                    memo[key] = base[key];
                }
                return memo;
            }, {});
            return Object.keys(attr).reduce((memo, key) => {
                if (attr[key] !== base[key] && base[key] === undefined) {
                    memo[key] = null;
                }
                return memo;
            }, baseInverted);
        }
        AttributeMap.invert = invert;
        function transform(a, b, priority = false) {
            if (typeof a !== 'object') {
                return b;
            }
            if (typeof b !== 'object') {
                return undefined;
            }
            if (!priority) {
                return b; // b simply overwrites us without priority
            }
            const attributes = Object.keys(b).reduce((attrs, key) => {
                if (a[key] === undefined) {
                    attrs[key] = b[key]; // null is a valid value
                }
                return attrs;
            }, {});
            return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
        AttributeMap.transform = transform;
    })(AttributeMap$2 || (AttributeMap$2 = {}));
    AttributeMap$3.default = AttributeMap$2;

    var Op$2 = {};

    Object.defineProperty(Op$2, "__esModule", { value: true });
    var Op$1;
    (function (Op) {
        function length(op) {
            if (typeof op.delete === 'number') {
                return op.delete;
            }
            else if (typeof op.retain === 'number') {
                return op.retain;
            }
            else if (typeof op.retain === 'object' && op.retain !== null) {
                return 1;
            }
            else {
                return typeof op.insert === 'string' ? op.insert.length : 1;
            }
        }
        Op.length = length;
    })(Op$1 || (Op$1 = {}));
    Op$2.default = Op$1;

    var OpIterator = {};

    Object.defineProperty(OpIterator, "__esModule", { value: true });
    const Op_1$1 = Op$2;
    let Iterator$1 = class Iterator {
        constructor(ops) {
            this.ops = ops;
            this.index = 0;
            this.offset = 0;
        }
        hasNext() {
            return this.peekLength() < Infinity;
        }
        next(length) {
            if (!length) {
                length = Infinity;
            }
            const nextOp = this.ops[this.index];
            if (nextOp) {
                const offset = this.offset;
                const opLength = Op_1$1.default.length(nextOp);
                if (length >= opLength - offset) {
                    length = opLength - offset;
                    this.index += 1;
                    this.offset = 0;
                }
                else {
                    this.offset += length;
                }
                if (typeof nextOp.delete === 'number') {
                    return { delete: length };
                }
                else {
                    const retOp = {};
                    if (nextOp.attributes) {
                        retOp.attributes = nextOp.attributes;
                    }
                    if (typeof nextOp.retain === 'number') {
                        retOp.retain = length;
                    }
                    else if (typeof nextOp.retain === 'object' &&
                        nextOp.retain !== null) {
                        // offset should === 0, length should === 1
                        retOp.retain = nextOp.retain;
                    }
                    else if (typeof nextOp.insert === 'string') {
                        retOp.insert = nextOp.insert.substr(offset, length);
                    }
                    else {
                        // offset should === 0, length should === 1
                        retOp.insert = nextOp.insert;
                    }
                    return retOp;
                }
            }
            else {
                return { retain: Infinity };
            }
        }
        peek() {
            return this.ops[this.index];
        }
        peekLength() {
            if (this.ops[this.index]) {
                // Should never return 0 if our index is being managed correctly
                return Op_1$1.default.length(this.ops[this.index]) - this.offset;
            }
            else {
                return Infinity;
            }
        }
        peekType() {
            const op = this.ops[this.index];
            if (op) {
                if (typeof op.delete === 'number') {
                    return 'delete';
                }
                else if (typeof op.retain === 'number' ||
                    (typeof op.retain === 'object' && op.retain !== null)) {
                    return 'retain';
                }
                else {
                    return 'insert';
                }
            }
            return 'retain';
        }
        rest() {
            if (!this.hasNext()) {
                return [];
            }
            else if (this.offset === 0) {
                return this.ops.slice(this.index);
            }
            else {
                const offset = this.offset;
                const index = this.index;
                const next = this.next();
                const rest = this.ops.slice(this.index);
                this.offset = offset;
                this.index = index;
                return [next].concat(rest);
            }
        }
    };
    OpIterator.default = Iterator$1;

    (function (module, exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.AttributeMap = exports.OpIterator = exports.Op = void 0;
    	const diff = diff_1$1;
    	const cloneDeep = lodash_clonedeepExports;
    	const isEqual = lodash_isequalExports;
    	const AttributeMap_1 = AttributeMap$3;
    	exports.AttributeMap = AttributeMap_1.default;
    	const Op_1 = Op$2;
    	exports.Op = Op_1.default;
    	const OpIterator_1 = OpIterator;
    	exports.OpIterator = OpIterator_1.default;
    	const NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()
    	const getEmbedTypeAndData = (a, b) => {
    	    if (typeof a !== 'object' || a === null) {
    	        throw new Error(`cannot retain a ${typeof a}`);
    	    }
    	    if (typeof b !== 'object' || b === null) {
    	        throw new Error(`cannot retain a ${typeof b}`);
    	    }
    	    const embedType = Object.keys(a)[0];
    	    if (!embedType || embedType !== Object.keys(b)[0]) {
    	        throw new Error(`embed types not matched: ${embedType} != ${Object.keys(b)[0]}`);
    	    }
    	    return [embedType, a[embedType], b[embedType]];
    	};
    	class Delta {
    	    constructor(ops) {
    	        // Assume we are given a well formed ops
    	        if (Array.isArray(ops)) {
    	            this.ops = ops;
    	        }
    	        else if (ops != null && Array.isArray(ops.ops)) {
    	            this.ops = ops.ops;
    	        }
    	        else {
    	            this.ops = [];
    	        }
    	    }
    	    static registerEmbed(embedType, handler) {
    	        this.handlers[embedType] = handler;
    	    }
    	    static unregisterEmbed(embedType) {
    	        delete this.handlers[embedType];
    	    }
    	    static getHandler(embedType) {
    	        const handler = this.handlers[embedType];
    	        if (!handler) {
    	            throw new Error(`no handlers for embed type "${embedType}"`);
    	        }
    	        return handler;
    	    }
    	    insert(arg, attributes) {
    	        const newOp = {};
    	        if (typeof arg === 'string' && arg.length === 0) {
    	            return this;
    	        }
    	        newOp.insert = arg;
    	        if (attributes != null &&
    	            typeof attributes === 'object' &&
    	            Object.keys(attributes).length > 0) {
    	            newOp.attributes = attributes;
    	        }
    	        return this.push(newOp);
    	    }
    	    delete(length) {
    	        if (length <= 0) {
    	            return this;
    	        }
    	        return this.push({ delete: length });
    	    }
    	    retain(length, attributes) {
    	        if (typeof length === 'number' && length <= 0) {
    	            return this;
    	        }
    	        const newOp = { retain: length };
    	        if (attributes != null &&
    	            typeof attributes === 'object' &&
    	            Object.keys(attributes).length > 0) {
    	            newOp.attributes = attributes;
    	        }
    	        return this.push(newOp);
    	    }
    	    push(newOp) {
    	        let index = this.ops.length;
    	        let lastOp = this.ops[index - 1];
    	        newOp = cloneDeep(newOp);
    	        if (typeof lastOp === 'object') {
    	            if (typeof newOp.delete === 'number' &&
    	                typeof lastOp.delete === 'number') {
    	                this.ops[index - 1] = { delete: lastOp.delete + newOp.delete };
    	                return this;
    	            }
    	            // Since it does not matter if we insert before or after deleting at the same index,
    	            // always prefer to insert first
    	            if (typeof lastOp.delete === 'number' && newOp.insert != null) {
    	                index -= 1;
    	                lastOp = this.ops[index - 1];
    	                if (typeof lastOp !== 'object') {
    	                    this.ops.unshift(newOp);
    	                    return this;
    	                }
    	            }
    	            if (isEqual(newOp.attributes, lastOp.attributes)) {
    	                if (typeof newOp.insert === 'string' &&
    	                    typeof lastOp.insert === 'string') {
    	                    this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
    	                    if (typeof newOp.attributes === 'object') {
    	                        this.ops[index - 1].attributes = newOp.attributes;
    	                    }
    	                    return this;
    	                }
    	                else if (typeof newOp.retain === 'number' &&
    	                    typeof lastOp.retain === 'number') {
    	                    this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
    	                    if (typeof newOp.attributes === 'object') {
    	                        this.ops[index - 1].attributes = newOp.attributes;
    	                    }
    	                    return this;
    	                }
    	            }
    	        }
    	        if (index === this.ops.length) {
    	            this.ops.push(newOp);
    	        }
    	        else {
    	            this.ops.splice(index, 0, newOp);
    	        }
    	        return this;
    	    }
    	    chop() {
    	        const lastOp = this.ops[this.ops.length - 1];
    	        if (lastOp && typeof lastOp.retain === 'number' && !lastOp.attributes) {
    	            this.ops.pop();
    	        }
    	        return this;
    	    }
    	    filter(predicate) {
    	        return this.ops.filter(predicate);
    	    }
    	    forEach(predicate) {
    	        this.ops.forEach(predicate);
    	    }
    	    map(predicate) {
    	        return this.ops.map(predicate);
    	    }
    	    partition(predicate) {
    	        const passed = [];
    	        const failed = [];
    	        this.forEach((op) => {
    	            const target = predicate(op) ? passed : failed;
    	            target.push(op);
    	        });
    	        return [passed, failed];
    	    }
    	    reduce(predicate, initialValue) {
    	        return this.ops.reduce(predicate, initialValue);
    	    }
    	    changeLength() {
    	        return this.reduce((length, elem) => {
    	            if (elem.insert) {
    	                return length + Op_1.default.length(elem);
    	            }
    	            else if (elem.delete) {
    	                return length - elem.delete;
    	            }
    	            return length;
    	        }, 0);
    	    }
    	    length() {
    	        return this.reduce((length, elem) => {
    	            return length + Op_1.default.length(elem);
    	        }, 0);
    	    }
    	    slice(start = 0, end = Infinity) {
    	        const ops = [];
    	        const iter = new OpIterator_1.default(this.ops);
    	        let index = 0;
    	        while (index < end && iter.hasNext()) {
    	            let nextOp;
    	            if (index < start) {
    	                nextOp = iter.next(start - index);
    	            }
    	            else {
    	                nextOp = iter.next(end - index);
    	                ops.push(nextOp);
    	            }
    	            index += Op_1.default.length(nextOp);
    	        }
    	        return new Delta(ops);
    	    }
    	    compose(other) {
    	        const thisIter = new OpIterator_1.default(this.ops);
    	        const otherIter = new OpIterator_1.default(other.ops);
    	        const ops = [];
    	        const firstOther = otherIter.peek();
    	        if (firstOther != null &&
    	            typeof firstOther.retain === 'number' &&
    	            firstOther.attributes == null) {
    	            let firstLeft = firstOther.retain;
    	            while (thisIter.peekType() === 'insert' &&
    	                thisIter.peekLength() <= firstLeft) {
    	                firstLeft -= thisIter.peekLength();
    	                ops.push(thisIter.next());
    	            }
    	            if (firstOther.retain - firstLeft > 0) {
    	                otherIter.next(firstOther.retain - firstLeft);
    	            }
    	        }
    	        const delta = new Delta(ops);
    	        while (thisIter.hasNext() || otherIter.hasNext()) {
    	            if (otherIter.peekType() === 'insert') {
    	                delta.push(otherIter.next());
    	            }
    	            else if (thisIter.peekType() === 'delete') {
    	                delta.push(thisIter.next());
    	            }
    	            else {
    	                const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    	                const thisOp = thisIter.next(length);
    	                const otherOp = otherIter.next(length);
    	                if (otherOp.retain) {
    	                    const newOp = {};
    	                    if (typeof thisOp.retain === 'number') {
    	                        newOp.retain =
    	                            typeof otherOp.retain === 'number' ? length : otherOp.retain;
    	                    }
    	                    else {
    	                        if (typeof otherOp.retain === 'number') {
    	                            if (thisOp.retain == null) {
    	                                newOp.insert = thisOp.insert;
    	                            }
    	                            else {
    	                                newOp.retain = thisOp.retain;
    	                            }
    	                        }
    	                        else {
    	                            const action = thisOp.retain == null ? 'insert' : 'retain';
    	                            const [embedType, thisData, otherData] = getEmbedTypeAndData(thisOp[action], otherOp.retain);
    	                            const handler = Delta.getHandler(embedType);
    	                            newOp[action] = {
    	                                [embedType]: handler.compose(thisData, otherData, action === 'retain'),
    	                            };
    	                        }
    	                    }
    	                    // Preserve null when composing with a retain, otherwise remove it for inserts
    	                    const attributes = AttributeMap_1.default.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
    	                    if (attributes) {
    	                        newOp.attributes = attributes;
    	                    }
    	                    delta.push(newOp);
    	                    // Optimization if rest of other is just retain
    	                    if (!otherIter.hasNext() &&
    	                        isEqual(delta.ops[delta.ops.length - 1], newOp)) {
    	                        const rest = new Delta(thisIter.rest());
    	                        return delta.concat(rest).chop();
    	                    }
    	                    // Other op should be delete, we could be an insert or retain
    	                    // Insert + delete cancels out
    	                }
    	                else if (typeof otherOp.delete === 'number' &&
    	                    (typeof thisOp.retain === 'number' ||
    	                        (typeof thisOp.retain === 'object' && thisOp.retain !== null))) {
    	                    delta.push(otherOp);
    	                }
    	            }
    	        }
    	        return delta.chop();
    	    }
    	    concat(other) {
    	        const delta = new Delta(this.ops.slice());
    	        if (other.ops.length > 0) {
    	            delta.push(other.ops[0]);
    	            delta.ops = delta.ops.concat(other.ops.slice(1));
    	        }
    	        return delta;
    	    }
    	    diff(other, cursor) {
    	        if (this.ops === other.ops) {
    	            return new Delta();
    	        }
    	        const strings = [this, other].map((delta) => {
    	            return delta
    	                .map((op) => {
    	                if (op.insert != null) {
    	                    return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
    	                }
    	                const prep = delta === other ? 'on' : 'with';
    	                throw new Error('diff() called ' + prep + ' non-document');
    	            })
    	                .join('');
    	        });
    	        const retDelta = new Delta();
    	        const diffResult = diff(strings[0], strings[1], cursor, true);
    	        const thisIter = new OpIterator_1.default(this.ops);
    	        const otherIter = new OpIterator_1.default(other.ops);
    	        diffResult.forEach((component) => {
    	            let length = component[1].length;
    	            while (length > 0) {
    	                let opLength = 0;
    	                switch (component[0]) {
    	                    case diff.INSERT:
    	                        opLength = Math.min(otherIter.peekLength(), length);
    	                        retDelta.push(otherIter.next(opLength));
    	                        break;
    	                    case diff.DELETE:
    	                        opLength = Math.min(length, thisIter.peekLength());
    	                        thisIter.next(opLength);
    	                        retDelta.delete(opLength);
    	                        break;
    	                    case diff.EQUAL:
    	                        opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
    	                        const thisOp = thisIter.next(opLength);
    	                        const otherOp = otherIter.next(opLength);
    	                        if (isEqual(thisOp.insert, otherOp.insert)) {
    	                            retDelta.retain(opLength, AttributeMap_1.default.diff(thisOp.attributes, otherOp.attributes));
    	                        }
    	                        else {
    	                            retDelta.push(otherOp).delete(opLength);
    	                        }
    	                        break;
    	                }
    	                length -= opLength;
    	            }
    	        });
    	        return retDelta.chop();
    	    }
    	    eachLine(predicate, newline = '\n') {
    	        const iter = new OpIterator_1.default(this.ops);
    	        let line = new Delta();
    	        let i = 0;
    	        while (iter.hasNext()) {
    	            if (iter.peekType() !== 'insert') {
    	                return;
    	            }
    	            const thisOp = iter.peek();
    	            const start = Op_1.default.length(thisOp) - iter.peekLength();
    	            const index = typeof thisOp.insert === 'string'
    	                ? thisOp.insert.indexOf(newline, start) - start
    	                : -1;
    	            if (index < 0) {
    	                line.push(iter.next());
    	            }
    	            else if (index > 0) {
    	                line.push(iter.next(index));
    	            }
    	            else {
    	                if (predicate(line, iter.next(1).attributes || {}, i) === false) {
    	                    return;
    	                }
    	                i += 1;
    	                line = new Delta();
    	            }
    	        }
    	        if (line.length() > 0) {
    	            predicate(line, {}, i);
    	        }
    	    }
    	    invert(base) {
    	        const inverted = new Delta();
    	        this.reduce((baseIndex, op) => {
    	            if (op.insert) {
    	                inverted.delete(Op_1.default.length(op));
    	            }
    	            else if (typeof op.retain === 'number' && op.attributes == null) {
    	                inverted.retain(op.retain);
    	                return baseIndex + op.retain;
    	            }
    	            else if (op.delete || typeof op.retain === 'number') {
    	                const length = (op.delete || op.retain);
    	                const slice = base.slice(baseIndex, baseIndex + length);
    	                slice.forEach((baseOp) => {
    	                    if (op.delete) {
    	                        inverted.push(baseOp);
    	                    }
    	                    else if (op.retain && op.attributes) {
    	                        inverted.retain(Op_1.default.length(baseOp), AttributeMap_1.default.invert(op.attributes, baseOp.attributes));
    	                    }
    	                });
    	                return baseIndex + length;
    	            }
    	            else if (typeof op.retain === 'object' && op.retain !== null) {
    	                const slice = base.slice(baseIndex, baseIndex + 1);
    	                const baseOp = new OpIterator_1.default(slice.ops).next();
    	                const [embedType, opData, baseOpData] = getEmbedTypeAndData(op.retain, baseOp.insert);
    	                const handler = Delta.getHandler(embedType);
    	                inverted.retain({ [embedType]: handler.invert(opData, baseOpData) }, AttributeMap_1.default.invert(op.attributes, baseOp.attributes));
    	                return baseIndex + 1;
    	            }
    	            return baseIndex;
    	        }, 0);
    	        return inverted.chop();
    	    }
    	    transform(arg, priority = false) {
    	        priority = !!priority;
    	        if (typeof arg === 'number') {
    	            return this.transformPosition(arg, priority);
    	        }
    	        const other = arg;
    	        const thisIter = new OpIterator_1.default(this.ops);
    	        const otherIter = new OpIterator_1.default(other.ops);
    	        const delta = new Delta();
    	        while (thisIter.hasNext() || otherIter.hasNext()) {
    	            if (thisIter.peekType() === 'insert' &&
    	                (priority || otherIter.peekType() !== 'insert')) {
    	                delta.retain(Op_1.default.length(thisIter.next()));
    	            }
    	            else if (otherIter.peekType() === 'insert') {
    	                delta.push(otherIter.next());
    	            }
    	            else {
    	                const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    	                const thisOp = thisIter.next(length);
    	                const otherOp = otherIter.next(length);
    	                if (thisOp.delete) {
    	                    // Our delete either makes their delete redundant or removes their retain
    	                    continue;
    	                }
    	                else if (otherOp.delete) {
    	                    delta.push(otherOp);
    	                }
    	                else {
    	                    const thisData = thisOp.retain;
    	                    const otherData = otherOp.retain;
    	                    let transformedData = typeof otherData === 'object' && otherData !== null
    	                        ? otherData
    	                        : length;
    	                    if (typeof thisData === 'object' &&
    	                        thisData !== null &&
    	                        typeof otherData === 'object' &&
    	                        otherData !== null) {
    	                        const embedType = Object.keys(thisData)[0];
    	                        if (embedType === Object.keys(otherData)[0]) {
    	                            const handler = Delta.getHandler(embedType);
    	                            if (handler) {
    	                                transformedData = {
    	                                    [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority),
    	                                };
    	                            }
    	                        }
    	                    }
    	                    // We retain either their retain or insert
    	                    delta.retain(transformedData, AttributeMap_1.default.transform(thisOp.attributes, otherOp.attributes, priority));
    	                }
    	            }
    	        }
    	        return delta.chop();
    	    }
    	    transformPosition(index, priority = false) {
    	        priority = !!priority;
    	        const thisIter = new OpIterator_1.default(this.ops);
    	        let offset = 0;
    	        while (thisIter.hasNext() && offset <= index) {
    	            const length = thisIter.peekLength();
    	            const nextType = thisIter.peekType();
    	            thisIter.next();
    	            if (nextType === 'delete') {
    	                index -= Math.min(length, index - offset);
    	                continue;
    	            }
    	            else if (nextType === 'insert' && (offset < index || !priority)) {
    	                index += length;
    	            }
    	            offset += length;
    	        }
    	        return index;
    	    }
    	}
    	Delta.Op = Op_1.default;
    	Delta.OpIterator = OpIterator_1.default;
    	Delta.AttributeMap = AttributeMap_1.default;
    	Delta.handlers = {};
    	exports.default = Delta;
    	{
    	    module.exports = Delta;
    	    module.exports.default = Delta;
    	}
    	
    } (Delta$4, DeltaExports));

    var Delta$3 = /*@__PURE__*/getDefaultExportFromCjs(DeltaExports);

    let Break$1 = class Break extends EmbedBlot$1 {
      static value() {
        return undefined;
      }
      optimize() {
        if (this.prev || this.next) {
          this.remove();
        }
      }
      length() {
        return 0;
      }
      value() {
        return '';
      }
    };
    Break$1.blotName = 'break';
    Break$1.tagName = 'BR';

    let Text$1 = class Text extends TextBlot$1 {};
    function escapeText(text) {
      return text.replace(/[&<>"']/g, s => {
        // https://lodash.com/docs#escape
        const entityMap = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;'
        };
        return entityMap[s];
      });
    }

    class Inline extends InlineBlot$1 {
      static allowedChildren = [Inline, Break$1, EmbedBlot$1, Text$1];
      // Lower index means deeper in the DOM tree, since not found (-1) is for embeds
      static order = ['cursor', 'inline',
      // Must be lower
      'link',
      // Chrome wants <a> to be lower
      'underline', 'strike', 'italic', 'bold', 'script', 'code' // Must be higher
      ];
      static compare(self, other) {
        const selfIndex = Inline.order.indexOf(self);
        const otherIndex = Inline.order.indexOf(other);
        if (selfIndex >= 0 || otherIndex >= 0) {
          return selfIndex - otherIndex;
        }
        if (self === other) {
          return 0;
        }
        if (self < other) {
          return -1;
        }
        return 1;
      }
      formatAt(index, length, name, value) {
        if (Inline.compare(this.statics.blotName, name) < 0 && this.scroll.query(name, Scope.BLOT)) {
          const blot = this.isolate(index, length);
          if (value) {
            blot.wrap(name, value);
          }
        } else {
          super.formatAt(index, length, name, value);
        }
      }
      optimize(context) {
        super.optimize(context);
        if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
          const parent = this.parent.isolate(this.offset(), this.length());
          // @ts-expect-error TODO: make isolate generic
          this.moveChildren(parent);
          parent.wrap(this);
        }
      }
    }

    const NEWLINE_LENGTH = 1;
    let Block$3 = class Block extends BlockBlot$1 {
      cache = {};
      delta() {
        if (this.cache.delta == null) {
          this.cache.delta = blockDelta(this);
        }
        return this.cache.delta;
      }
      deleteAt(index, length) {
        super.deleteAt(index, length);
        this.cache = {};
      }
      formatAt(index, length, name, value) {
        if (length <= 0) return;
        if (this.scroll.query(name, Scope.BLOCK)) {
          if (index + length === this.length()) {
            this.format(name, value);
          }
        } else {
          super.formatAt(index, Math.min(length, this.length() - index - 1), name, value);
        }
        this.cache = {};
      }
      insertAt(index, value, def) {
        if (def != null) {
          super.insertAt(index, value, def);
          this.cache = {};
          return;
        }
        if (value.length === 0) return;
        const lines = value.split('\n');
        const text = lines.shift();
        if (text.length > 0) {
          if (index < this.length() - 1 || this.children.tail == null) {
            super.insertAt(Math.min(index, this.length() - 1), text);
          } else {
            this.children.tail.insertAt(this.children.tail.length(), text);
          }
          this.cache = {};
        }
        // TODO: Fix this next time the file is edited.
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        let block = this;
        lines.reduce((lineIndex, line) => {
          // @ts-expect-error Fix me later
          block = block.split(lineIndex, true);
          block.insertAt(0, line);
          return line.length;
        }, index + text.length);
      }
      insertBefore(blot, ref) {
        const {
          head
        } = this.children;
        super.insertBefore(blot, ref);
        if (head instanceof Break$1) {
          head.remove();
        }
        this.cache = {};
      }
      length() {
        if (this.cache.length == null) {
          this.cache.length = super.length() + NEWLINE_LENGTH;
        }
        return this.cache.length;
      }
      moveChildren(target, ref) {
        // @ts-expect-error Parchment types are wrong
        super.moveChildren(target, ref);
        this.cache = {};
      }
      optimize(context) {
        super.optimize(context);
        this.cache = {};
      }
      path(index) {
        return super.path(index, true);
      }
      removeChild(child) {
        super.removeChild(child);
        this.cache = {};
      }
      split(index) {
        let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
          const clone = this.clone();
          if (index === 0) {
            this.parent.insertBefore(clone, this);
            return this;
          }
          // @ts-expect-error Fix me later
          this.parent.insertBefore(clone, this.next);
          return clone;
        }
        const next = super.split(index, force);
        this.cache = {};
        return next;
      }
    };
    Block$3.blotName = 'block';
    Block$3.tagName = 'P';
    Block$3.defaultChild = Break$1;
    Block$3.allowedChildren = [Break$1, Inline, EmbedBlot$1, Text$1];
    let BlockEmbed$1 = class BlockEmbed extends EmbedBlot$1 {
      attach() {
        super.attach();
        this.attributes = new AttributorStore$1(this.domNode);
      }
      delta() {
        return new Delta$3().insert(this.value(), {
          ...this.formats(),
          ...this.attributes.values()
        });
      }
      format(name, value) {
        const attribute = this.scroll.query(name, Scope.BLOCK_ATTRIBUTE);
        if (attribute != null) {
          // @ts-expect-error TODO: Scroll#query() should return Attributor when scope is attribute
          this.attributes.attribute(attribute, value);
        }
      }
      formatAt(index, length, name, value) {
        this.format(name, value);
      }
      insertAt(index, value, def) {
        if (def != null) {
          super.insertAt(index, value, def);
          return;
        }
        const lines = value.split('\n');
        const text = lines.pop();
        const blocks = lines.map(line => {
          const block = this.scroll.create(Block$3.blotName);
          block.insertAt(0, line);
          return block;
        });
        const ref = this.split(index);
        blocks.forEach(block => {
          // @ts-expect-error Fix me later
          this.parent.insertBefore(block, ref);
        });
        if (text) {
          // @ts-expect-error Fix me later
          this.parent.insertBefore(this.scroll.create('text', text), ref);
        }
      }
    };
    BlockEmbed$1.scope = Scope.BLOCK_BLOT;
    // It is important for cursor behavior BlockEmbeds use tags that are block level elements

    function blockDelta(blot) {
      let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return blot.descendants(LeafBlot$1).reduce((delta, leaf) => {
        if (leaf.length() === 0) {
          return delta;
        }
        return delta.insert(leaf.value(), bubbleFormats(leaf, {}, filter));
      }, new Delta$3()).insert('\n', bubbleFormats(blot));
    }
    function bubbleFormats(blot) {
      let formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      if (blot == null) return formats;
      if ('formats' in blot && typeof blot.formats === 'function') {
        formats = {
          ...formats,
          ...blot.formats()
        };
        if (filter) {
          // exclude syntax highlighting from deltas and getFormat()
          delete formats['code-token'];
        }
      }
      if (blot.parent == null || blot.parent.statics.blotName === 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
        return formats;
      }
      return bubbleFormats(blot.parent, formats, filter);
    }

    class Cursor extends EmbedBlot$1 {
      static blotName = 'cursor';
      static className = 'ql-cursor';
      static tagName = 'span';
      static CONTENTS = '\uFEFF'; // Zero width no break space

      static value() {
        return undefined;
      }
      constructor(scroll, domNode, selection) {
        super(scroll, domNode);
        this.selection = selection;
        this.textNode = document.createTextNode(Cursor.CONTENTS);
        this.domNode.appendChild(this.textNode);
        this.savedLength = 0;
      }
      detach() {
        // super.detach() will also clear domNode.__blot
        if (this.parent != null) this.parent.removeChild(this);
      }
      format(name, value) {
        if (this.savedLength !== 0) {
          super.format(name, value);
          return;
        }
        // TODO: Fix this next time the file is edited.
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        let target = this;
        let index = 0;
        while (target != null && target.statics.scope !== Scope.BLOCK_BLOT) {
          index += target.offset(target.parent);
          target = target.parent;
        }
        if (target != null) {
          this.savedLength = Cursor.CONTENTS.length;
          // @ts-expect-error TODO: allow empty context in Parchment
          target.optimize();
          target.formatAt(index, Cursor.CONTENTS.length, name, value);
          this.savedLength = 0;
        }
      }
      index(node, offset) {
        if (node === this.textNode) return 0;
        return super.index(node, offset);
      }
      length() {
        return this.savedLength;
      }
      position() {
        return [this.textNode, this.textNode.data.length];
      }
      remove() {
        super.remove();
        // @ts-expect-error Fix me later
        this.parent = null;
      }
      restore() {
        if (this.selection.composing || this.parent == null) return null;
        const range = this.selection.getNativeRange();
        // Browser may push down styles/nodes inside the cursor blot.
        // https://dvcs.w3.org/hg/editing/raw-file/tip/editing.html#push-down-values
        while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
          // @ts-expect-error Fix me later
          this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
        }
        const prevTextBlot = this.prev instanceof Text$1 ? this.prev : null;
        const prevTextLength = prevTextBlot ? prevTextBlot.length() : 0;
        const nextTextBlot = this.next instanceof Text$1 ? this.next : null;
        // @ts-expect-error TODO: make TextBlot.text public
        const nextText = nextTextBlot ? nextTextBlot.text : '';
        const {
          textNode
        } = this;
        // take text from inside this blot and reset it
        const newText = textNode.data.split(Cursor.CONTENTS).join('');
        textNode.data = Cursor.CONTENTS;

        // proactively merge TextBlots around cursor so that optimization
        // doesn't lose the cursor.  the reason we are here in cursor.restore
        // could be that the user clicked in prevTextBlot or nextTextBlot, or
        // the user typed something.
        let mergedTextBlot;
        if (prevTextBlot) {
          mergedTextBlot = prevTextBlot;
          if (newText || nextTextBlot) {
            prevTextBlot.insertAt(prevTextBlot.length(), newText + nextText);
            if (nextTextBlot) {
              nextTextBlot.remove();
            }
          }
        } else if (nextTextBlot) {
          mergedTextBlot = nextTextBlot;
          nextTextBlot.insertAt(0, newText);
        } else {
          const newTextNode = document.createTextNode(newText);
          mergedTextBlot = this.scroll.create(newTextNode);
          this.parent.insertBefore(mergedTextBlot, this);
        }
        this.remove();
        if (range) {
          // calculate selection to restore
          const remapOffset = (node, offset) => {
            if (prevTextBlot && node === prevTextBlot.domNode) {
              return offset;
            }
            if (node === textNode) {
              return prevTextLength + offset - 1;
            }
            if (nextTextBlot && node === nextTextBlot.domNode) {
              return prevTextLength + newText.length + offset;
            }
            return null;
          };
          const start = remapOffset(range.start.node, range.start.offset);
          const end = remapOffset(range.end.node, range.end.offset);
          if (start !== null && end !== null) {
            return {
              startNode: mergedTextBlot.domNode,
              startOffset: start,
              endNode: mergedTextBlot.domNode,
              endOffset: end
            };
          }
        }
        return null;
      }
      update(mutations, context) {
        if (mutations.some(mutation => {
          return mutation.type === 'characterData' && mutation.target === this.textNode;
        })) {
          const range = this.restore();
          if (range) context.range = range;
        }
      }

      // Avoid .ql-cursor being a descendant of `<a/>`.
      // The reason is Safari pushes down `<a/>` on text insertion.
      // That will cause DOM nodes not sync with the model.
      //
      // For example ({I} is the caret), given the markup:
      //    <a><span class="ql-cursor">\uFEFF{I}</span></a>
      // When typing a char "x", `<a/>` will be pushed down inside the `<span>` first:
      //    <span class="ql-cursor"><a>\uFEFF{I}</a></span>
      // And then "x" will be inserted after `<a/>`:
      //    <span class="ql-cursor"><a>\uFEFF</a>d{I}</span>
      optimize(context) {
        // @ts-expect-error Fix me later
        super.optimize(context);
        let {
          parent
        } = this;
        while (parent) {
          if (parent.domNode.tagName === 'A') {
            this.savedLength = Cursor.CONTENTS.length;
            // @ts-expect-error TODO: make isolate generic
            parent.isolate(this.offset(parent), this.length()).unwrap();
            this.savedLength = 0;
            break;
          }
          parent = parent.parent;
        }
      }
      value() {
        return '';
      }
    }

    var eventemitter3Exports = {};
    var eventemitter3 = {
      get exports(){ return eventemitter3Exports; },
      set exports(v){ eventemitter3Exports = v; },
    };

    (function (module) {

    	var has = Object.prototype.hasOwnProperty
    	  , prefix = '~';

    	/**
    	 * Constructor to create a storage for our `EE` objects.
    	 * An `Events` instance is a plain object whose properties are event names.
    	 *
    	 * @constructor
    	 * @private
    	 */
    	function Events() {}

    	//
    	// We try to not inherit from `Object.prototype`. In some engines creating an
    	// instance in this way is faster than calling `Object.create(null)` directly.
    	// If `Object.create(null)` is not supported we prefix the event names with a
    	// character to make sure that the built-in object properties are not
    	// overridden or used as an attack vector.
    	//
    	if (Object.create) {
    	  Events.prototype = Object.create(null);

    	  //
    	  // This hack is needed because the `__proto__` property is still inherited in
    	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    	  //
    	  if (!new Events().__proto__) prefix = false;
    	}

    	/**
    	 * Representation of a single event listener.
    	 *
    	 * @param {Function} fn The listener function.
    	 * @param {*} context The context to invoke the listener with.
    	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
    	 * @constructor
    	 * @private
    	 */
    	function EE(fn, context, once) {
    	  this.fn = fn;
    	  this.context = context;
    	  this.once = once || false;
    	}

    	/**
    	 * Add a listener for a given event.
    	 *
    	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
    	 * @param {(String|Symbol)} event The event name.
    	 * @param {Function} fn The listener function.
    	 * @param {*} context The context to invoke the listener with.
    	 * @param {Boolean} once Specify if the listener is a one-time listener.
    	 * @returns {EventEmitter}
    	 * @private
    	 */
    	function addListener(emitter, event, fn, context, once) {
    	  if (typeof fn !== 'function') {
    	    throw new TypeError('The listener must be a function');
    	  }

    	  var listener = new EE(fn, context || emitter, once)
    	    , evt = prefix ? prefix + event : event;

    	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    	  else emitter._events[evt] = [emitter._events[evt], listener];

    	  return emitter;
    	}

    	/**
    	 * Clear event by name.
    	 *
    	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
    	 * @param {(String|Symbol)} evt The Event name.
    	 * @private
    	 */
    	function clearEvent(emitter, evt) {
    	  if (--emitter._eventsCount === 0) emitter._events = new Events();
    	  else delete emitter._events[evt];
    	}

    	/**
    	 * Minimal `EventEmitter` interface that is molded against the Node.js
    	 * `EventEmitter` interface.
    	 *
    	 * @constructor
    	 * @public
    	 */
    	function EventEmitter() {
    	  this._events = new Events();
    	  this._eventsCount = 0;
    	}

    	/**
    	 * Return an array listing the events for which the emitter has registered
    	 * listeners.
    	 *
    	 * @returns {Array}
    	 * @public
    	 */
    	EventEmitter.prototype.eventNames = function eventNames() {
    	  var names = []
    	    , events
    	    , name;

    	  if (this._eventsCount === 0) return names;

    	  for (name in (events = this._events)) {
    	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    	  }

    	  if (Object.getOwnPropertySymbols) {
    	    return names.concat(Object.getOwnPropertySymbols(events));
    	  }

    	  return names;
    	};

    	/**
    	 * Return the listeners registered for a given event.
    	 *
    	 * @param {(String|Symbol)} event The event name.
    	 * @returns {Array} The registered listeners.
    	 * @public
    	 */
    	EventEmitter.prototype.listeners = function listeners(event) {
    	  var evt = prefix ? prefix + event : event
    	    , handlers = this._events[evt];

    	  if (!handlers) return [];
    	  if (handlers.fn) return [handlers.fn];

    	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    	    ee[i] = handlers[i].fn;
    	  }

    	  return ee;
    	};

    	/**
    	 * Return the number of listeners listening to a given event.
    	 *
    	 * @param {(String|Symbol)} event The event name.
    	 * @returns {Number} The number of listeners.
    	 * @public
    	 */
    	EventEmitter.prototype.listenerCount = function listenerCount(event) {
    	  var evt = prefix ? prefix + event : event
    	    , listeners = this._events[evt];

    	  if (!listeners) return 0;
    	  if (listeners.fn) return 1;
    	  return listeners.length;
    	};

    	/**
    	 * Calls each of the listeners registered for a given event.
    	 *
    	 * @param {(String|Symbol)} event The event name.
    	 * @returns {Boolean} `true` if the event had listeners, else `false`.
    	 * @public
    	 */
    	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    	  var evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) return false;

    	  var listeners = this._events[evt]
    	    , len = arguments.length
    	    , args
    	    , i;

    	  if (listeners.fn) {
    	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    	    switch (len) {
    	      case 1: return listeners.fn.call(listeners.context), true;
    	      case 2: return listeners.fn.call(listeners.context, a1), true;
    	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
    	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
    	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
    	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    	    }

    	    for (i = 1, args = new Array(len -1); i < len; i++) {
    	      args[i - 1] = arguments[i];
    	    }

    	    listeners.fn.apply(listeners.context, args);
    	  } else {
    	    var length = listeners.length
    	      , j;

    	    for (i = 0; i < length; i++) {
    	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

    	      switch (len) {
    	        case 1: listeners[i].fn.call(listeners[i].context); break;
    	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
    	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
    	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
    	        default:
    	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
    	            args[j - 1] = arguments[j];
    	          }

    	          listeners[i].fn.apply(listeners[i].context, args);
    	      }
    	    }
    	  }

    	  return true;
    	};

    	/**
    	 * Add a listener for a given event.
    	 *
    	 * @param {(String|Symbol)} event The event name.
    	 * @param {Function} fn The listener function.
    	 * @param {*} [context=this] The context to invoke the listener with.
    	 * @returns {EventEmitter} `this`.
    	 * @public
    	 */
    	EventEmitter.prototype.on = function on(event, fn, context) {
    	  return addListener(this, event, fn, context, false);
    	};

    	/**
    	 * Add a one-time listener for a given event.
    	 *
    	 * @param {(String|Symbol)} event The event name.
    	 * @param {Function} fn The listener function.
    	 * @param {*} [context=this] The context to invoke the listener with.
    	 * @returns {EventEmitter} `this`.
    	 * @public
    	 */
    	EventEmitter.prototype.once = function once(event, fn, context) {
    	  return addListener(this, event, fn, context, true);
    	};

    	/**
    	 * Remove the listeners of a given event.
    	 *
    	 * @param {(String|Symbol)} event The event name.
    	 * @param {Function} fn Only remove the listeners that match this function.
    	 * @param {*} context Only remove the listeners that have this context.
    	 * @param {Boolean} once Only remove one-time listeners.
    	 * @returns {EventEmitter} `this`.
    	 * @public
    	 */
    	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    	  var evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) return this;
    	  if (!fn) {
    	    clearEvent(this, evt);
    	    return this;
    	  }

    	  var listeners = this._events[evt];

    	  if (listeners.fn) {
    	    if (
    	      listeners.fn === fn &&
    	      (!once || listeners.once) &&
    	      (!context || listeners.context === context)
    	    ) {
    	      clearEvent(this, evt);
    	    }
    	  } else {
    	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
    	      if (
    	        listeners[i].fn !== fn ||
    	        (once && !listeners[i].once) ||
    	        (context && listeners[i].context !== context)
    	      ) {
    	        events.push(listeners[i]);
    	      }
    	    }

    	    //
    	    // Reset the array, or remove it completely if we have no more listeners.
    	    //
    	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    	    else clearEvent(this, evt);
    	  }

    	  return this;
    	};

    	/**
    	 * Remove all listeners, or those of the specified event.
    	 *
    	 * @param {(String|Symbol)} [event] The event name.
    	 * @returns {EventEmitter} `this`.
    	 * @public
    	 */
    	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    	  var evt;

    	  if (event) {
    	    evt = prefix ? prefix + event : event;
    	    if (this._events[evt]) clearEvent(this, evt);
    	  } else {
    	    this._events = new Events();
    	    this._eventsCount = 0;
    	  }

    	  return this;
    	};

    	//
    	// Alias methods names because people roll like that.
    	//
    	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    	//
    	// Expose the prefix.
    	//
    	EventEmitter.prefixed = prefix;

    	//
    	// Allow `EventEmitter` to be imported as module namespace.
    	//
    	EventEmitter.EventEmitter = EventEmitter;

    	//
    	// Expose the module.
    	//
    	{
    	  module.exports = EventEmitter;
    	}
    } (eventemitter3));

    var instances = new WeakMap();

    const levels = ['error', 'warn', 'log', 'info'];
    let level = 'warn';
    function debug$6(method) {
      if (level) {
        if (levels.indexOf(method) <= levels.indexOf(level)) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          console[method](...args); // eslint-disable-line no-console
        }
      }
    }
    function namespace(ns) {
      return levels.reduce((logger, method) => {
        logger[method] = debug$6.bind(console, method, ns);
        return logger;
      }, {});
    }
    namespace.level = newLevel => {
      level = newLevel;
    };
    debug$6.level = namespace.level;

    const debug$5 = namespace('quill:events');
    const EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];
    EVENTS.forEach(eventName => {
      document.addEventListener(eventName, function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        Array.from(document.querySelectorAll('.ql-container')).forEach(node => {
          const quill = instances.get(node);
          if (quill && quill.emitter) {
            quill.emitter.handleDOM(...args);
          }
        });
      });
    });
    class Emitter extends eventemitter3Exports {
      static events = {
        EDITOR_CHANGE: 'editor-change',
        SCROLL_BEFORE_UPDATE: 'scroll-before-update',
        SCROLL_BLOT_MOUNT: 'scroll-blot-mount',
        SCROLL_BLOT_UNMOUNT: 'scroll-blot-unmount',
        SCROLL_OPTIMIZE: 'scroll-optimize',
        SCROLL_UPDATE: 'scroll-update',
        SCROLL_EMBED_UPDATE: 'scroll-embed-update',
        SELECTION_CHANGE: 'selection-change',
        TEXT_CHANGE: 'text-change',
        COMPOSITION_BEFORE_START: 'composition-before-start',
        COMPOSITION_START: 'composition-start',
        COMPOSITION_BEFORE_END: 'composition-before-end',
        COMPOSITION_END: 'composition-end'
      };
      static sources = {
        API: 'api',
        SILENT: 'silent',
        USER: 'user'
      };
      constructor() {
        super();
        this.domListeners = {};
        this.on('error', debug$5.error);
      }
      emit() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        debug$5.log.call(debug$5, ...args);
        // @ts-expect-error
        return super.emit(...args);
      }
      handleDOM(event) {
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        (this.domListeners[event.type] || []).forEach(_ref => {
          let {
            node,
            handler
          } = _ref;
          if (event.target === node || node.contains(event.target)) {
            handler(event, ...args);
          }
        });
      }
      listenDOM(eventName, node, handler) {
        if (!this.domListeners[eventName]) {
          this.domListeners[eventName] = [];
        }
        this.domListeners[eventName].push({
          node,
          handler
        });
      }
    }

    const debug$4 = namespace('quill:selection');
    class Range {
      constructor(index) {
        let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        this.index = index;
        this.length = length;
      }
    }
    class Selection {
      constructor(scroll, emitter) {
        this.emitter = emitter;
        this.scroll = scroll;
        this.composing = false;
        this.mouseDown = false;
        this.root = this.scroll.domNode;
        // @ts-expect-error
        this.cursor = this.scroll.create('cursor', this);
        // savedRange is last non-null range
        this.savedRange = new Range(0, 0);
        this.lastRange = this.savedRange;
        this.lastNative = null;
        this.handleComposition();
        this.handleDragging();
        this.emitter.listenDOM('selectionchange', document, () => {
          if (!this.mouseDown && !this.composing) {
            setTimeout(this.update.bind(this, Emitter.sources.USER), 1);
          }
        });
        this.emitter.on(Emitter.events.SCROLL_BEFORE_UPDATE, () => {
          if (!this.hasFocus()) return;
          const native = this.getNativeRange();
          if (native == null) return;
          if (native.start.node === this.cursor.textNode) return; // cursor.restore() will handle
          this.emitter.once(Emitter.events.SCROLL_UPDATE, (source, mutations) => {
            try {
              if (this.root.contains(native.start.node) && this.root.contains(native.end.node)) {
                this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
              }
              const triggeredByTyping = mutations.some(mutation => mutation.type === 'characterData' || mutation.type === 'childList' || mutation.type === 'attributes' && mutation.target === this.root);
              this.update(triggeredByTyping ? Emitter.sources.SILENT : source);
            } catch (ignored) {
              // ignore
            }
          });
        });
        this.emitter.on(Emitter.events.SCROLL_OPTIMIZE, (mutations, context) => {
          if (context.range) {
            const {
              startNode,
              startOffset,
              endNode,
              endOffset
            } = context.range;
            this.setNativeRange(startNode, startOffset, endNode, endOffset);
            this.update(Emitter.sources.SILENT);
          }
        });
        this.update(Emitter.sources.SILENT);
      }
      handleComposition() {
        this.emitter.on(Emitter.events.COMPOSITION_BEFORE_START, () => {
          this.composing = true;
        });
        this.emitter.on(Emitter.events.COMPOSITION_END, () => {
          this.composing = false;
          if (this.cursor.parent) {
            const range = this.cursor.restore();
            if (!range) return;
            setTimeout(() => {
              this.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
            }, 1);
          }
        });
      }
      handleDragging() {
        this.emitter.listenDOM('mousedown', document.body, () => {
          this.mouseDown = true;
        });
        this.emitter.listenDOM('mouseup', document.body, () => {
          this.mouseDown = false;
          this.update(Emitter.sources.USER);
        });
      }
      focus() {
        if (this.hasFocus()) return;
        this.root.focus({
          preventScroll: true
        });
        this.setRange(this.savedRange);
      }
      format(format, value) {
        this.scroll.update();
        const nativeRange = this.getNativeRange();
        if (nativeRange == null || !nativeRange.native.collapsed || this.scroll.query(format, Scope.BLOCK)) return;
        if (nativeRange.start.node !== this.cursor.textNode) {
          const blot = this.scroll.find(nativeRange.start.node, false);
          if (blot == null) return;
          // TODO Give blot ability to not split
          if (blot instanceof LeafBlot$1) {
            const after = blot.split(nativeRange.start.offset);
            // @ts-expect-error Fix me later
            blot.parent.insertBefore(this.cursor, after);
          } else {
            // @ts-expect-error TODO: nativeRange.start.node doesn't seem to match function signature
            blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
          }
          this.cursor.attach();
        }
        this.cursor.format(format, value);
        this.scroll.optimize();
        this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
        this.update();
      }
      getBounds(index) {
        let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        const scrollLength = this.scroll.length();
        index = Math.min(index, scrollLength - 1);
        length = Math.min(index + length, scrollLength - 1) - index;
        let node;
        let [leaf, offset] = this.scroll.leaf(index);
        if (leaf == null) return null;
        if (length > 0 && offset === leaf.length()) {
          const [next] = this.scroll.leaf(index + 1);
          if (next) {
            const [line] = this.scroll.line(index);
            const [nextLine] = this.scroll.line(index + 1);
            if (line === nextLine) {
              leaf = next;
              offset = 0;
            }
          }
        }
        [node, offset] = leaf.position(offset, true);
        const range = document.createRange();
        if (length > 0) {
          range.setStart(node, offset);
          [leaf, offset] = this.scroll.leaf(index + length);
          if (leaf == null) return null;
          [node, offset] = leaf.position(offset, true);
          range.setEnd(node, offset);
          return range.getBoundingClientRect();
        }
        let side = 'left';
        let rect;
        if (node instanceof Text) {
          // Return null if the text node is empty because it is
          // not able to get a useful client rect:
          // https://github.com/w3c/csswg-drafts/issues/2514.
          // Empty text nodes are most likely caused by TextBlot#optimize()
          // not getting called when editor content changes.
          if (!node.data.length) {
            return null;
          }
          if (offset < node.data.length) {
            range.setStart(node, offset);
            range.setEnd(node, offset + 1);
          } else {
            range.setStart(node, offset - 1);
            range.setEnd(node, offset);
            side = 'right';
          }
          rect = range.getBoundingClientRect();
        } else {
          if (!(leaf.domNode instanceof Element)) return null;
          rect = leaf.domNode.getBoundingClientRect();
          if (offset > 0) side = 'right';
        }
        return {
          bottom: rect.top + rect.height,
          height: rect.height,
          left: rect[side],
          right: rect[side],
          top: rect.top,
          width: 0
        };
      }
      getNativeRange() {
        const selection = document.getSelection();
        if (selection == null || selection.rangeCount <= 0) return null;
        const nativeRange = selection.getRangeAt(0);
        if (nativeRange == null) return null;
        const range = this.normalizeNative(nativeRange);
        debug$4.info('getNativeRange', range);
        return range;
      }
      getRange() {
        const root = this.scroll.domNode;
        if ('isConnected' in root && !root.isConnected) {
          // document.getSelection() forces layout on Blink, so we trend to
          // not calling it.
          return [null, null];
        }
        const normalized = this.getNativeRange();
        if (normalized == null) return [null, null];
        const range = this.normalizedToRange(normalized);
        return [range, normalized];
      }
      hasFocus() {
        return document.activeElement === this.root || document.activeElement != null && contains(this.root, document.activeElement);
      }
      normalizedToRange(range) {
        const positions = [[range.start.node, range.start.offset]];
        if (!range.native.collapsed) {
          positions.push([range.end.node, range.end.offset]);
        }
        const indexes = positions.map(position => {
          const [node, offset] = position;
          const blot = this.scroll.find(node, true);
          // @ts-expect-error Fix me later
          const index = blot.offset(this.scroll);
          if (offset === 0) {
            return index;
          }
          if (blot instanceof LeafBlot$1) {
            return index + blot.index(node, offset);
          }
          // @ts-expect-error Fix me later
          return index + blot.length();
        });
        const end = Math.min(Math.max(...indexes), this.scroll.length() - 1);
        const start = Math.min(end, ...indexes);
        return new Range(start, end - start);
      }
      normalizeNative(nativeRange) {
        if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
          return null;
        }
        const range = {
          start: {
            node: nativeRange.startContainer,
            offset: nativeRange.startOffset
          },
          end: {
            node: nativeRange.endContainer,
            offset: nativeRange.endOffset
          },
          native: nativeRange
        };
        [range.start, range.end].forEach(position => {
          let {
            node,
            offset
          } = position;
          while (!(node instanceof Text) && node.childNodes.length > 0) {
            if (node.childNodes.length > offset) {
              node = node.childNodes[offset];
              offset = 0;
            } else if (node.childNodes.length === offset) {
              // @ts-expect-error Fix me later
              node = node.lastChild;
              if (node instanceof Text) {
                offset = node.data.length;
              } else if (node.childNodes.length > 0) {
                // Container case
                offset = node.childNodes.length;
              } else {
                // Embed case
                offset = node.childNodes.length + 1;
              }
            } else {
              break;
            }
          }
          position.node = node;
          position.offset = offset;
        });
        return range;
      }
      rangeToNative(range) {
        const scrollLength = this.scroll.length();
        const getPosition = (index, inclusive) => {
          index = Math.min(scrollLength - 1, index);
          const [leaf, leafOffset] = this.scroll.leaf(index);
          return leaf ? leaf.position(leafOffset, inclusive) : [null, -1];
        };
        return [...getPosition(range.index, false), ...getPosition(range.index + range.length, true)];
      }
      setNativeRange(startNode, startOffset) {
        let endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
        let endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
        let force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        debug$4.info('setNativeRange', startNode, startOffset, endNode, endOffset);
        if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null ||
        // @ts-expect-error Fix me later
        endNode.parentNode == null)) {
          return;
        }
        const selection = document.getSelection();
        if (selection == null) return;
        if (startNode != null) {
          if (!this.hasFocus()) this.root.focus({
            preventScroll: true
          });
          const {
            native
          } = this.getNativeRange() || {};
          if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
            if (startNode instanceof Element && startNode.tagName === 'BR') {
              // @ts-expect-error Fix me later
              startOffset = Array.from(startNode.parentNode.childNodes).indexOf(startNode);
              startNode = startNode.parentNode;
            }
            if (endNode instanceof Element && endNode.tagName === 'BR') {
              // @ts-expect-error Fix me later
              endOffset = Array.from(endNode.parentNode.childNodes).indexOf(endNode);
              endNode = endNode.parentNode;
            }
            const range = document.createRange();
            // @ts-expect-error Fix me later
            range.setStart(startNode, startOffset);
            // @ts-expect-error Fix me later
            range.setEnd(endNode, endOffset);
            selection.removeAllRanges();
            selection.addRange(range);
          }
        } else {
          selection.removeAllRanges();
          this.root.blur();
        }
      }
      setRange(range) {
        let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Emitter.sources.API;
        if (typeof force === 'string') {
          source = force;
          force = false;
        }
        debug$4.info('setRange', range);
        if (range != null) {
          const args = this.rangeToNative(range);
          this.setNativeRange(...args, force);
        } else {
          this.setNativeRange(null);
        }
        this.update(source);
      }
      update() {
        let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Emitter.sources.USER;
        const oldRange = this.lastRange;
        const [lastRange, nativeRange] = this.getRange();
        this.lastRange = lastRange;
        this.lastNative = nativeRange;
        if (this.lastRange != null) {
          this.savedRange = this.lastRange;
        }
        if (!isEqual$2(oldRange, this.lastRange)) {
          if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
            const range = this.cursor.restore();
            if (range) {
              this.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
            }
          }
          const args = [Emitter.events.SELECTION_CHANGE, cloneDeep$1(this.lastRange), cloneDeep$1(oldRange), source];
          this.emitter.emit(Emitter.events.EDITOR_CHANGE, ...args);
          if (source !== Emitter.sources.SILENT) {
            this.emitter.emit(...args);
          }
        }
      }
    }
    function contains(parent, descendant) {
      try {
        // Firefox inserts inaccessible nodes around video elements
        descendant.parentNode; // eslint-disable-line @typescript-eslint/no-unused-expressions
      } catch (e) {
        return false;
      }
      return parent.contains(descendant);
    }

    const ASCII = /^[ -~]*$/;
    class Editor {
      constructor(scroll) {
        this.scroll = scroll;
        this.delta = this.getDelta();
      }
      applyDelta(delta) {
        this.scroll.update();
        let scrollLength = this.scroll.length();
        this.scroll.batchStart();
        const normalizedDelta = normalizeDelta(delta);
        const deleteDelta = new Delta$3();
        const normalizedOps = splitOpLines(normalizedDelta.ops.slice());
        normalizedOps.reduce((index, op) => {
          const length = DeltaExports.Op.length(op);
          let attributes = op.attributes || {};
          let isImplicitNewlinePrepended = false;
          let isImplicitNewlineAppended = false;
          if (op.insert != null) {
            deleteDelta.retain(length);
            if (typeof op.insert === 'string') {
              const text = op.insert;
              isImplicitNewlineAppended = !text.endsWith('\n') && (scrollLength <= index || !!this.scroll.descendant(BlockEmbed$1, index)[0]);
              this.scroll.insertAt(index, text);
              const [line, offset] = this.scroll.line(index);
              let formats = merge({}, bubbleFormats(line));
              if (line instanceof Block$3) {
                const [leaf] = line.descendant(LeafBlot$1, offset);
                if (leaf) {
                  formats = merge(formats, bubbleFormats(leaf));
                }
              }
              attributes = DeltaExports.AttributeMap.diff(formats, attributes) || {};
            } else if (typeof op.insert === 'object') {
              const key = Object.keys(op.insert)[0]; // There should only be one key
              if (key == null) return index;
              const isInlineEmbed = this.scroll.query(key, Scope.INLINE) != null;
              if (isInlineEmbed) {
                if (scrollLength <= index || !!this.scroll.descendant(BlockEmbed$1, index)[0]) {
                  isImplicitNewlineAppended = true;
                }
              } else if (index > 0) {
                const [leaf, offset] = this.scroll.descendant(LeafBlot$1, index - 1);
                if (leaf instanceof Text$1) {
                  const text = leaf.value();
                  if (text[offset] !== '\n') {
                    isImplicitNewlinePrepended = true;
                  }
                } else if (leaf instanceof EmbedBlot$1 && leaf.statics.scope === Scope.INLINE_BLOT) {
                  isImplicitNewlinePrepended = true;
                }
              }
              this.scroll.insertAt(index, key, op.insert[key]);
              if (isInlineEmbed) {
                const [leaf] = this.scroll.descendant(LeafBlot$1, index);
                if (leaf) {
                  const formats = merge({}, bubbleFormats(leaf));
                  attributes = DeltaExports.AttributeMap.diff(formats, attributes) || {};
                }
              }
            }
            scrollLength += length;
          } else {
            deleteDelta.push(op);
            if (op.retain !== null && typeof op.retain === 'object') {
              const key = Object.keys(op.retain)[0];
              if (key == null) return index;
              this.scroll.updateEmbedAt(index, key, op.retain[key]);
            }
          }
          Object.keys(attributes).forEach(name => {
            this.scroll.formatAt(index, length, name, attributes[name]);
          });
          const prependedLength = isImplicitNewlinePrepended ? 1 : 0;
          const addedLength = isImplicitNewlineAppended ? 1 : 0;
          scrollLength += prependedLength + addedLength;
          deleteDelta.retain(prependedLength);
          deleteDelta.delete(addedLength);
          return index + length + prependedLength + addedLength;
        }, 0);
        deleteDelta.reduce((index, op) => {
          if (typeof op.delete === 'number') {
            this.scroll.deleteAt(index, op.delete);
            return index;
          }
          return index + DeltaExports.Op.length(op);
        }, 0);
        this.scroll.batchEnd();
        this.scroll.optimize();
        return this.update(normalizedDelta);
      }
      deleteText(index, length) {
        this.scroll.deleteAt(index, length);
        return this.update(new Delta$3().retain(index).delete(length));
      }
      formatLine(index, length) {
        let formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        this.scroll.update();
        Object.keys(formats).forEach(format => {
          this.scroll.lines(index, Math.max(length, 1)).forEach(line => {
            line.format(format, formats[format]);
          });
        });
        this.scroll.optimize();
        const delta = new Delta$3().retain(index).retain(length, cloneDeep$1(formats));
        return this.update(delta);
      }
      formatText(index, length) {
        let formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        Object.keys(formats).forEach(format => {
          this.scroll.formatAt(index, length, format, formats[format]);
        });
        const delta = new Delta$3().retain(index).retain(length, cloneDeep$1(formats));
        return this.update(delta);
      }
      getContents(index, length) {
        return this.delta.slice(index, index + length);
      }
      getDelta() {
        return this.scroll.lines().reduce((delta, line) => {
          return delta.concat(line.delta());
        }, new Delta$3());
      }
      getFormat(index) {
        let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        let lines = [];
        let leaves = [];
        if (length === 0) {
          this.scroll.path(index).forEach(path => {
            const [blot] = path;
            if (blot instanceof Block$3) {
              lines.push(blot);
            } else if (blot instanceof LeafBlot$1) {
              leaves.push(blot);
            }
          });
        } else {
          lines = this.scroll.lines(index, length);
          leaves = this.scroll.descendants(LeafBlot$1, index, length);
        }
        const [lineFormats, leafFormats] = [lines, leaves].map(blots => {
          const blot = blots.shift();
          if (blot == null) return {};
          let formats = bubbleFormats(blot);
          while (Object.keys(formats).length > 0) {
            const blot = blots.shift();
            if (blot == null) return formats;
            formats = combineFormats(bubbleFormats(blot), formats);
          }
          return formats;
        });
        return {
          ...lineFormats,
          ...leafFormats
        };
      }
      getHTML(index, length) {
        const [line, lineOffset] = this.scroll.line(index);
        if (line) {
          const lineLength = line.length();
          const isWithinLine = line.length() >= lineOffset + length;
          if (isWithinLine && !(lineOffset === 0 && length === lineLength)) {
            return convertHTML(line, lineOffset, length, true);
          }
          return convertHTML(this.scroll, index, length, true);
        }
        return '';
      }
      getText(index, length) {
        return this.getContents(index, length).filter(op => typeof op.insert === 'string').map(op => op.insert).join('');
      }
      insertContents(index, contents) {
        const normalizedDelta = normalizeDelta(contents);
        const change = new Delta$3().retain(index).concat(normalizedDelta);
        this.scroll.insertContents(index, normalizedDelta);
        return this.update(change);
      }
      insertEmbed(index, embed, value) {
        this.scroll.insertAt(index, embed, value);
        return this.update(new Delta$3().retain(index).insert({
          [embed]: value
        }));
      }
      insertText(index, text) {
        let formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
        this.scroll.insertAt(index, text);
        Object.keys(formats).forEach(format => {
          this.scroll.formatAt(index, text.length, format, formats[format]);
        });
        return this.update(new Delta$3().retain(index).insert(text, cloneDeep$1(formats)));
      }
      isBlank() {
        if (this.scroll.children.length === 0) return true;
        if (this.scroll.children.length > 1) return false;
        const blot = this.scroll.children.head;
        if (blot?.statics.blotName !== Block$3.blotName) return false;
        const block = blot;
        if (block.children.length > 1) return false;
        return block.children.head instanceof Break$1;
      }
      removeFormat(index, length) {
        const text = this.getText(index, length);
        const [line, offset] = this.scroll.line(index + length);
        let suffixLength = 0;
        let suffix = new Delta$3();
        if (line != null) {
          suffixLength = line.length() - offset;
          suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
        }
        const contents = this.getContents(index, length + suffixLength);
        const diff = contents.diff(new Delta$3().insert(text).concat(suffix));
        const delta = new Delta$3().retain(index).concat(diff);
        return this.applyDelta(delta);
      }
      update(change) {
        let mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        let selectionInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
        const oldDelta = this.delta;
        if (mutations.length === 1 && mutations[0].type === 'characterData' &&
        // @ts-expect-error Fix me later
        mutations[0].target.data.match(ASCII) && this.scroll.find(mutations[0].target)) {
          // Optimization for character changes
          const textBlot = this.scroll.find(mutations[0].target);
          const formats = bubbleFormats(textBlot);
          const index = textBlot.offset(this.scroll);
          // @ts-expect-error Fix me later
          const oldValue = mutations[0].oldValue.replace(Cursor.CONTENTS, '');
          const oldText = new Delta$3().insert(oldValue);
          // @ts-expect-error
          const newText = new Delta$3().insert(textBlot.value());
          const relativeSelectionInfo = selectionInfo && {
            oldRange: shiftRange$1(selectionInfo.oldRange, -index),
            newRange: shiftRange$1(selectionInfo.newRange, -index)
          };
          const diffDelta = new Delta$3().retain(index).concat(oldText.diff(newText, relativeSelectionInfo));
          change = diffDelta.reduce((delta, op) => {
            if (op.insert) {
              return delta.insert(op.insert, formats);
            }
            return delta.push(op);
          }, new Delta$3());
          this.delta = oldDelta.compose(change);
        } else {
          this.delta = this.getDelta();
          if (!change || !isEqual$2(oldDelta.compose(change), this.delta)) {
            change = oldDelta.diff(this.delta, selectionInfo);
          }
        }
        return change;
      }
    }
    function convertListHTML(items, lastIndent, types) {
      if (items.length === 0) {
        const [endTag] = getListType(types.pop());
        if (lastIndent <= 0) {
          return `</li></${endTag}>`;
        }
        return `</li></${endTag}>${convertListHTML([], lastIndent - 1, types)}`;
      }
      const [{
        child,
        offset,
        length,
        indent,
        type
      }, ...rest] = items;
      const [tag, attribute] = getListType(type);
      if (indent > lastIndent) {
        types.push(type);
        if (indent === lastIndent + 1) {
          return `<${tag}><li${attribute}>${convertHTML(child, offset, length)}${convertListHTML(rest, indent, types)}`;
        }
        return `<${tag}><li>${convertListHTML(items, lastIndent + 1, types)}`;
      }
      const previousType = types[types.length - 1];
      if (indent === lastIndent && type === previousType) {
        return `</li><li${attribute}>${convertHTML(child, offset, length)}${convertListHTML(rest, indent, types)}`;
      }
      const [endTag] = getListType(types.pop());
      return `</li></${endTag}>${convertListHTML(items, lastIndent - 1, types)}`;
    }
    function convertHTML(blot, index, length) {
      let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      if ('html' in blot && typeof blot.html === 'function') {
        return blot.html(index, length);
      }
      if (blot instanceof Text$1) {
        return escapeText(blot.value().slice(index, index + length));
      }
      if (blot instanceof ParentBlot$1) {
        // TODO fix API
        if (blot.statics.blotName === 'list-container') {
          const items = [];
          blot.children.forEachAt(index, length, (child, offset, childLength) => {
            const formats = 'formats' in child && typeof child.formats === 'function' ? child.formats() : {};
            items.push({
              child,
              offset,
              length: childLength,
              indent: formats.indent || 0,
              type: formats.list
            });
          });
          return convertListHTML(items, -1, []);
        }
        const parts = [];
        blot.children.forEachAt(index, length, (child, offset, childLength) => {
          parts.push(convertHTML(child, offset, childLength));
        });
        if (isRoot || blot.statics.blotName === 'list') {
          return parts.join('');
        }
        const {
          outerHTML,
          innerHTML
        } = blot.domNode;
        const [start, end] = outerHTML.split(`>${innerHTML}<`);
        // TODO cleanup
        if (start === '<table') {
          return `<table style="border: 1px solid #000;">${parts.join('')}<${end}`;
        }
        return `${start}>${parts.join('')}<${end}`;
      }
      return blot.domNode instanceof Element ? blot.domNode.outerHTML : '';
    }
    function combineFormats(formats, combined) {
      return Object.keys(combined).reduce((merged, name) => {
        if (formats[name] == null) return merged;
        const combinedValue = combined[name];
        if (combinedValue === formats[name]) {
          merged[name] = combinedValue;
        } else if (Array.isArray(combinedValue)) {
          if (combinedValue.indexOf(formats[name]) < 0) {
            merged[name] = combinedValue.concat([formats[name]]);
          } else {
            // If style already exists, don't add to an array, but don't lose other styles
            merged[name] = combinedValue;
          }
        } else {
          merged[name] = [combinedValue, formats[name]];
        }
        return merged;
      }, {});
    }
    function getListType(type) {
      const tag = type === 'ordered' ? 'ol' : 'ul';
      switch (type) {
        case 'checked':
          return [tag, ' data-list="checked"'];
        case 'unchecked':
          return [tag, ' data-list="unchecked"'];
        default:
          return [tag, ''];
      }
    }
    function normalizeDelta(delta) {
      return delta.reduce((normalizedDelta, op) => {
        if (typeof op.insert === 'string') {
          const text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
          return normalizedDelta.insert(text, op.attributes);
        }
        return normalizedDelta.push(op);
      }, new Delta$3());
    }
    function shiftRange$1(_ref, amount) {
      let {
        index,
        length
      } = _ref;
      return new Range(index + amount, length);
    }
    function splitOpLines(ops) {
      const split = [];
      ops.forEach(op => {
        if (typeof op.insert === 'string') {
          const lines = op.insert.split('\n');
          lines.forEach((line, index) => {
            if (index) split.push({
              insert: '\n',
              attributes: op.attributes
            });
            if (line) split.push({
              insert: line,
              attributes: op.attributes
            });
          });
        } else {
          split.push(op);
        }
      });
      return split;
    }

    let Module$5 = class Module {
      static DEFAULTS = {};
      constructor(quill) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.quill = quill;
        this.options = options;
      }
    };

    const GUARD_TEXT = '\uFEFF';
    class Embed extends EmbedBlot$1 {
      constructor(scroll, node) {
        super(scroll, node);
        this.contentNode = document.createElement('span');
        this.contentNode.setAttribute('contenteditable', 'false');
        Array.from(this.domNode.childNodes).forEach(childNode => {
          this.contentNode.appendChild(childNode);
        });
        this.leftGuard = document.createTextNode(GUARD_TEXT);
        this.rightGuard = document.createTextNode(GUARD_TEXT);
        this.domNode.appendChild(this.leftGuard);
        this.domNode.appendChild(this.contentNode);
        this.domNode.appendChild(this.rightGuard);
      }
      index(node, offset) {
        if (node === this.leftGuard) return 0;
        if (node === this.rightGuard) return 1;
        return super.index(node, offset);
      }
      restore(node) {
        let range = null;
        let textNode;
        const text = node.data.split(GUARD_TEXT).join('');
        if (node === this.leftGuard) {
          if (this.prev instanceof Text$1) {
            const prevLength = this.prev.length();
            this.prev.insertAt(prevLength, text);
            range = {
              startNode: this.prev.domNode,
              startOffset: prevLength + text.length
            };
          } else {
            textNode = document.createTextNode(text);
            this.parent.insertBefore(this.scroll.create(textNode), this);
            range = {
              startNode: textNode,
              startOffset: text.length
            };
          }
        } else if (node === this.rightGuard) {
          if (this.next instanceof Text$1) {
            this.next.insertAt(0, text);
            range = {
              startNode: this.next.domNode,
              startOffset: text.length
            };
          } else {
            textNode = document.createTextNode(text);
            // @ts-expect-error Fix me later
            this.parent.insertBefore(this.scroll.create(textNode), this.next);
            range = {
              startNode: textNode,
              startOffset: text.length
            };
          }
        }
        node.data = GUARD_TEXT;
        return range;
      }
      update(mutations, context) {
        mutations.forEach(mutation => {
          if (mutation.type === 'characterData' && (mutation.target === this.leftGuard || mutation.target === this.rightGuard)) {
            const range = this.restore(mutation.target);
            if (range) context.range = range;
          }
        });
      }
    }

    class Composition {
      isComposing = false;
      constructor(scroll, emitter) {
        this.scroll = scroll;
        this.emitter = emitter;
        this.setupListeners();
      }
      setupListeners() {
        this.scroll.domNode.addEventListener('compositionstart', event => {
          if (!this.isComposing) {
            this.handleCompositionStart(event);
          }
        });
        this.scroll.domNode.addEventListener('compositionend', event => {
          if (this.isComposing) {
            // Webkit makes DOM changes after compositionend, so we use microtask to
            // ensure the order.
            // https://bugs.webkit.org/show_bug.cgi?id=31902
            queueMicrotask(() => {
              this.handleCompositionEnd(event);
            });
          }
        });
      }
      handleCompositionStart(event) {
        const blot = event.target instanceof Node ? this.scroll.find(event.target, true) : null;
        if (blot && !(blot instanceof Embed)) {
          this.emitter.emit(Emitter.events.COMPOSITION_BEFORE_START, event);
          this.scroll.batchStart();
          this.emitter.emit(Emitter.events.COMPOSITION_START, event);
          this.isComposing = true;
        }
      }
      handleCompositionEnd(event) {
        this.emitter.emit(Emitter.events.COMPOSITION_BEFORE_END, event);
        this.scroll.batchEnd();
        this.emitter.emit(Emitter.events.COMPOSITION_END, event);
        this.isComposing = false;
      }
    }

    class Theme {
      static DEFAULTS = {
        modules: {}
      };
      static themes = {
        default: Theme
      };
      modules = {};
      constructor(quill, options) {
        this.quill = quill;
        this.options = options;
      }
      init() {
        Object.keys(this.options.modules).forEach(name => {
          if (this.modules[name] == null) {
            this.addModule(name);
          }
        });
      }
      addModule(name) {
        // @ts-expect-error
        const ModuleClass = this.quill.constructor.import(`modules/${name}`);
        this.modules[name] = new ModuleClass(this.quill, this.options.modules[name] || {});
        return this.modules[name];
      }
    }

    const getParentElement = element => element.parentElement || element.getRootNode().host || null;
    const getElementRect = element => {
      const rect = element.getBoundingClientRect();
      const scaleX = 'offsetWidth' in element && Math.abs(rect.width) / element.offsetWidth || 1;
      const scaleY = 'offsetHeight' in element && Math.abs(rect.height) / element.offsetHeight || 1;
      return {
        top: rect.top,
        right: rect.left + element.clientWidth * scaleX,
        bottom: rect.top + element.clientHeight * scaleY,
        left: rect.left
      };
    };
    const paddingValueToInt = value => {
      const number = parseInt(value, 10);
      return Number.isNaN(number) ? 0 : number;
    };

    // Follow the steps described in https://www.w3.org/TR/cssom-view-1/#element-scrolling-members,
    // assuming that the scroll option is set to 'nearest'.
    const getScrollDistance = (targetStart, targetEnd, scrollStart, scrollEnd, scrollPaddingStart, scrollPaddingEnd) => {
      if (targetStart < scrollStart && targetEnd > scrollEnd) {
        return 0;
      }
      if (targetStart < scrollStart) {
        return -(scrollStart - targetStart + scrollPaddingStart);
      }
      if (targetEnd > scrollEnd) {
        return targetEnd - targetStart > scrollEnd - scrollStart ? targetStart + scrollPaddingStart - scrollStart : targetEnd - scrollEnd + scrollPaddingEnd;
      }
      return 0;
    };
    const scrollRectIntoView = (root, targetRect) => {
      const document = root.ownerDocument;
      let rect = targetRect;
      let current = root;
      while (current) {
        const isDocumentBody = current === document.body;
        const bounding = isDocumentBody ? {
          top: 0,
          right: window.visualViewport?.width ?? document.documentElement.clientWidth,
          bottom: window.visualViewport?.height ?? document.documentElement.clientHeight,
          left: 0
        } : getElementRect(current);
        const style = getComputedStyle(current);
        const scrollDistanceX = getScrollDistance(rect.left, rect.right, bounding.left, bounding.right, paddingValueToInt(style.scrollPaddingLeft), paddingValueToInt(style.scrollPaddingRight));
        const scrollDistanceY = getScrollDistance(rect.top, rect.bottom, bounding.top, bounding.bottom, paddingValueToInt(style.scrollPaddingTop), paddingValueToInt(style.scrollPaddingBottom));
        if (scrollDistanceX || scrollDistanceY) {
          if (isDocumentBody) {
            document.defaultView?.scrollBy(scrollDistanceX, scrollDistanceY);
          } else {
            const {
              scrollLeft,
              scrollTop
            } = current;
            if (scrollDistanceY) {
              current.scrollTop += scrollDistanceY;
            }
            if (scrollDistanceX) {
              current.scrollLeft += scrollDistanceX;
            }
            const scrolledLeft = current.scrollLeft - scrollLeft;
            const scrolledTop = current.scrollTop - scrollTop;
            rect = {
              left: rect.left - scrolledLeft,
              top: rect.top - scrolledTop,
              right: rect.right - scrolledLeft,
              bottom: rect.bottom - scrolledTop
            };
          }
        }
        current = isDocumentBody || style.position === 'fixed' ? null : getParentElement(current);
      }
    };

    const MAX_REGISTER_ITERATIONS = 100;
    const CORE_FORMATS = ['block', 'break', 'cursor', 'inline', 'scroll', 'text'];
    const createRegistryWithFormats = (formats, sourceRegistry, debug) => {
      const registry = new Registry();
      CORE_FORMATS.forEach(name => {
        const coreBlot = sourceRegistry.query(name);
        if (coreBlot) registry.register(coreBlot);
      });
      formats.forEach(name => {
        let format = sourceRegistry.query(name);
        if (!format) {
          debug.error(`Cannot register "${name}" specified in "formats" config. Are you sure it was registered?`);
        }
        let iterations = 0;
        while (format) {
          registry.register(format);
          format = 'blotName' in format ? format.requiredContainer ?? null : null;
          iterations += 1;
          if (iterations > MAX_REGISTER_ITERATIONS) {
            debug.error(`Cycle detected in registering blot requiredContainer: "${name}"`);
            break;
          }
        }
      });
      return registry;
    };

    const debug$3 = namespace('quill');
    const globalRegistry = new Registry();
    ParentBlot$1.uiClass = 'ql-ui';

    /**
     * Options for initializing a Quill instance
     */

    /**
     * Similar to QuillOptions, but with all properties expanded to their default values,
     * and all selectors resolved to HTMLElements.
     */

    class Quill {
      static DEFAULTS = {
        bounds: null,
        modules: {
          clipboard: true,
          keyboard: true,
          history: true,
          uploader: true
        },
        placeholder: '',
        readOnly: false,
        registry: globalRegistry,
        theme: 'default'
      };
      static events = Emitter.events;
      static sources = Emitter.sources;
      static version = "2.0.0-rc.4";
      static imports = {
        delta: Delta$3,
        parchment: Parchment$1,
        'core/module': Module$5,
        'core/theme': Theme
      };
      static debug(limit) {
        if (limit === true) {
          limit = 'log';
        }
        namespace.level(limit);
      }
      static find(node) {
        let bubble = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return instances.get(node) || globalRegistry.find(node, bubble);
      }
      static import(name) {
        if (this.imports[name] == null) {
          debug$3.error(`Cannot import ${name}. Are you sure it was registered?`);
        }
        return this.imports[name];
      }
      static register(path, target) {
        let overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        if (typeof path !== 'string') {
          const name = 'attrName' in path ? path.attrName : path.blotName;
          if (typeof name === 'string') {
            // register(Blot | Attributor, overwrite)
            // @ts-expect-error
            this.register(`formats/${name}`, path, target);
          } else {
            Object.keys(path).forEach(key => {
              // @ts-expect-error
              this.register(key, path[key], target);
            });
          }
        } else {
          if (this.imports[path] != null && !overwrite) {
            debug$3.warn(`Overwriting ${path} with`, target);
          }
          this.imports[path] = target;
          if ((path.startsWith('blots/') || path.startsWith('formats/')) && target && typeof target !== 'boolean' &&
          // @ts-expect-error
          target.blotName !== 'abstract') {
            globalRegistry.register(target);
          }
          // @ts-expect-error
          if (typeof target.register === 'function') {
            // @ts-expect-error
            target.register(globalRegistry);
          }
        }
      }
      constructor(container) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.options = expandConfig(container, options);
        this.container = this.options.container;
        if (this.container == null) {
          debug$3.error('Invalid Quill container', container);
          return;
        }
        if (this.options.debug) {
          Quill.debug(this.options.debug);
        }
        const html = this.container.innerHTML.trim();
        this.container.classList.add('ql-container');
        this.container.innerHTML = '';
        instances.set(this.container, this);
        this.root = this.addContainer('ql-editor');
        this.root.classList.add('ql-blank');
        this.emitter = new Emitter();
        const scrollBlotName = ScrollBlot$1.blotName;
        const ScrollBlot = this.options.registry.query(scrollBlotName);
        if (!ScrollBlot || !('blotName' in ScrollBlot)) {
          throw new Error(`Cannot initialize Quill without "${scrollBlotName}" blot`);
        }
        this.scroll = new ScrollBlot(this.options.registry, this.root, {
          emitter: this.emitter
        });
        this.editor = new Editor(this.scroll);
        this.selection = new Selection(this.scroll, this.emitter);
        this.composition = new Composition(this.scroll, this.emitter);
        this.theme = new this.options.theme(this, this.options); // eslint-disable-line new-cap
        this.keyboard = this.theme.addModule('keyboard');
        this.clipboard = this.theme.addModule('clipboard');
        this.history = this.theme.addModule('history');
        this.uploader = this.theme.addModule('uploader');
        this.theme.addModule('input');
        this.theme.addModule('uiNode');
        this.theme.init();
        this.emitter.on(Emitter.events.EDITOR_CHANGE, type => {
          if (type === Emitter.events.TEXT_CHANGE) {
            this.root.classList.toggle('ql-blank', this.editor.isBlank());
          }
        });
        this.emitter.on(Emitter.events.SCROLL_UPDATE, (source, mutations) => {
          const oldRange = this.selection.lastRange;
          const [newRange] = this.selection.getRange();
          const selectionInfo = oldRange && newRange ? {
            oldRange,
            newRange
          } : undefined;
          modify.call(this, () => this.editor.update(null, mutations, selectionInfo), source);
        });
        this.emitter.on(Emitter.events.SCROLL_EMBED_UPDATE, (blot, delta) => {
          const oldRange = this.selection.lastRange;
          const [newRange] = this.selection.getRange();
          const selectionInfo = oldRange && newRange ? {
            oldRange,
            newRange
          } : undefined;
          modify.call(this, () => {
            const change = new Delta$3().retain(blot.offset(this)).retain({
              [blot.statics.blotName]: delta
            });
            return this.editor.update(change, [], selectionInfo);
          }, Quill.sources.USER);
        });
        if (html) {
          const contents = this.clipboard.convert({
            html: `${html}<p><br></p>`,
            text: '\n'
          });
          this.setContents(contents);
        }
        this.history.clear();
        if (this.options.placeholder) {
          this.root.setAttribute('data-placeholder', this.options.placeholder);
        }
        if (this.options.readOnly) {
          this.disable();
        }
        this.allowReadOnlyEdits = false;
      }
      addContainer(container) {
        let refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        if (typeof container === 'string') {
          const className = container;
          container = document.createElement('div');
          container.classList.add(className);
        }
        this.container.insertBefore(container, refNode);
        return container;
      }
      blur() {
        this.selection.setRange(null);
      }
      deleteText(index, length, source) {
        // @ts-expect-error
        [index, length,, source] = overload(index, length, source);
        return modify.call(this, () => {
          return this.editor.deleteText(index, length);
        }, source, index, -1 * length);
      }
      disable() {
        this.enable(false);
      }
      editReadOnly(modifier) {
        this.allowReadOnlyEdits = true;
        const value = modifier();
        this.allowReadOnlyEdits = false;
        return value;
      }
      enable() {
        let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.scroll.enable(enabled);
        this.container.classList.toggle('ql-disabled', !enabled);
      }
      focus() {
        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.selection.focus();
        if (!options.preventScroll) {
          this.scrollSelectionIntoView();
        }
      }
      format(name, value) {
        let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Emitter.sources.API;
        return modify.call(this, () => {
          const range = this.getSelection(true);
          let change = new Delta$3();
          if (range == null) return change;
          if (this.scroll.query(name, Scope.BLOCK)) {
            change = this.editor.formatLine(range.index, range.length, {
              [name]: value
            });
          } else if (range.length === 0) {
            this.selection.format(name, value);
            return change;
          } else {
            change = this.editor.formatText(range.index, range.length, {
              [name]: value
            });
          }
          this.setSelection(range, Emitter.sources.SILENT);
          return change;
        }, source);
      }
      formatLine(index, length, name, value, source) {
        let formats;
        // eslint-disable-next-line prefer-const
        [index, length, formats, source] = overload(index, length,
        // @ts-expect-error
        name, value, source);
        return modify.call(this, () => {
          return this.editor.formatLine(index, length, formats);
        }, source, index, 0);
      }
      formatText(index, length, name, value, source) {
        let formats;
        // eslint-disable-next-line prefer-const
        [index, length, formats, source] = overload(
        // @ts-expect-error
        index, length, name, value, source);
        return modify.call(this, () => {
          return this.editor.formatText(index, length, formats);
        }, source, index, 0);
      }
      getBounds(index) {
        let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        let bounds = null;
        if (typeof index === 'number') {
          bounds = this.selection.getBounds(index, length);
        } else {
          bounds = this.selection.getBounds(index.index, index.length);
        }
        if (!bounds) return null;
        const containerBounds = this.container.getBoundingClientRect();
        return {
          bottom: bounds.bottom - containerBounds.top,
          height: bounds.height,
          left: bounds.left - containerBounds.left,
          right: bounds.right - containerBounds.left,
          top: bounds.top - containerBounds.top,
          width: bounds.width
        };
      }
      getContents() {
        let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;
        [index, length] = overload(index, length);
        return this.editor.getContents(index, length);
      }
      getFormat() {
        let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
        let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        if (typeof index === 'number') {
          return this.editor.getFormat(index, length);
        }
        return this.editor.getFormat(index.index, index.length);
      }
      getIndex(blot) {
        return blot.offset(this.scroll);
      }
      getLength() {
        return this.scroll.length();
      }
      getLeaf(index) {
        return this.scroll.leaf(index);
      }
      getLine(index) {
        return this.scroll.line(index);
      }
      getLines() {
        let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;
        if (typeof index !== 'number') {
          return this.scroll.lines(index.index, index.length);
        }
        return this.scroll.lines(index, length);
      }
      getModule(name) {
        return this.theme.modules[name];
      }
      getSelection() {
        let focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (focus) this.focus();
        this.update(); // Make sure we access getRange with editor in consistent state
        return this.selection.getRange()[0];
      }
      getSemanticHTML() {
        let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        let length = arguments.length > 1 ? arguments[1] : undefined;
        if (typeof index === 'number') {
          length = length ?? this.getLength() - index;
        }
        // @ts-expect-error
        [index, length] = overload(index, length);
        return this.editor.getHTML(index, length);
      }
      getText() {
        let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        let length = arguments.length > 1 ? arguments[1] : undefined;
        if (typeof index === 'number') {
          length = length ?? this.getLength() - index;
        }
        // @ts-expect-error
        [index, length] = overload(index, length);
        return this.editor.getText(index, length);
      }
      hasFocus() {
        return this.selection.hasFocus();
      }
      insertEmbed(index, embed, value) {
        let source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;
        return modify.call(this, () => {
          return this.editor.insertEmbed(index, embed, value);
        }, source, index);
      }
      insertText(index, text, name, value, source) {
        let formats;
        // eslint-disable-next-line prefer-const
        // @ts-expect-error
        [index,, formats, source] = overload(index, 0, name, value, source);
        return modify.call(this, () => {
          return this.editor.insertText(index, text, formats);
        }, source, index, text.length);
      }
      isEnabled() {
        return this.scroll.isEnabled();
      }
      off() {
        return this.emitter.off(...arguments);
      }
      on() {
        return this.emitter.on(...arguments);
      }
      once() {
        return this.emitter.once(...arguments);
      }
      removeFormat() {
        const [index, length,, source] = overload(...arguments);
        return modify.call(this, () => {
          return this.editor.removeFormat(index, length);
        }, source, index);
      }
      scrollRectIntoView(rect) {
        scrollRectIntoView(this.root, rect);
      }

      /**
       * @deprecated Use Quill#scrollSelectionIntoView() instead.
       */
      scrollIntoView() {
        console.warn('Quill#scrollIntoView() has been deprecated and will be removed in the near future. Please use Quill#scrollSelectionIntoView() instead.');
        this.scrollSelectionIntoView();
      }

      /**
       * Scroll the current selection into the visible area.
       * If the selection is already visible, no scrolling will occur.
       */
      scrollSelectionIntoView() {
        const range = this.selection.lastRange;
        const bounds = range && this.selection.getBounds(range.index, range.length);
        if (bounds) {
          this.scrollRectIntoView(bounds);
        }
      }
      setContents(delta) {
        let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Emitter.sources.API;
        return modify.call(this, () => {
          delta = new Delta$3(delta);
          const length = this.getLength();
          // Quill will set empty editor to \n
          const delete1 = this.editor.deleteText(0, length);
          const applied = this.editor.insertContents(0, delta);
          // Remove extra \n from empty editor initialization
          const delete2 = this.editor.deleteText(this.getLength() - 1, 1);
          return delete1.compose(applied).compose(delete2);
        }, source);
      }
      setSelection(index, length, source) {
        if (index == null) {
          // @ts-expect-error https://github.com/microsoft/TypeScript/issues/22609
          this.selection.setRange(null, length || Quill.sources.API);
        } else {
          // @ts-expect-error
          [index, length,, source] = overload(index, length, source);
          this.selection.setRange(new Range(Math.max(0, index), length), source);
          if (source !== Emitter.sources.SILENT) {
            this.scrollSelectionIntoView();
          }
        }
      }
      setText(text) {
        let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Emitter.sources.API;
        const delta = new Delta$3().insert(text);
        return this.setContents(delta, source);
      }
      update() {
        let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Emitter.sources.USER;
        const change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
        this.selection.update(source);
        // TODO this is usually undefined
        return change;
      }
      updateContents(delta) {
        let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Emitter.sources.API;
        return modify.call(this, () => {
          delta = new Delta$3(delta);
          return this.editor.applyDelta(delta);
        }, source, true);
      }
    }
    function resolveSelector(selector) {
      return typeof selector === 'string' ? document.querySelector(selector) : selector;
    }
    function expandModuleConfig(config) {
      return Object.entries(config ?? {}).reduce((expanded, _ref) => {
        let [key, value] = _ref;
        return {
          ...expanded,
          [key]: value === true ? {} : value
        };
      }, {});
    }
    function omitUndefinedValuesFromOptions(obj) {
      return Object.fromEntries(Object.entries(obj).filter(entry => entry[1] !== undefined));
    }
    function expandConfig(containerOrSelector, options) {
      const container = resolveSelector(containerOrSelector);
      if (!container) {
        throw new Error('Invalid Quill container');
      }
      const shouldUseDefaultTheme = !options.theme || options.theme === Quill.DEFAULTS.theme;
      const theme = shouldUseDefaultTheme ? Theme : Quill.import(`themes/${options.theme}`);
      if (!theme) {
        throw new Error(`Invalid theme ${options.theme}. Did you register it?`);
      }
      const {
        modules: quillModuleDefaults,
        ...quillDefaults
      } = Quill.DEFAULTS;
      const {
        modules: themeModuleDefaults,
        ...themeDefaults
      } = theme.DEFAULTS;
      const modules = merge({}, expandModuleConfig(quillModuleDefaults), expandModuleConfig(themeModuleDefaults), expandModuleConfig(options.modules));
      // Special case toolbar shorthand
      if (modules != null && modules.toolbar && modules.toolbar.constructor !== Object) {
        modules.toolbar = {
          container: modules.toolbar
        };
      }
      const config = {
        ...quillDefaults,
        ...omitUndefinedValuesFromOptions(themeDefaults),
        ...omitUndefinedValuesFromOptions(options)
      };
      let registry = options.registry;
      if (registry) {
        if (options.formats) {
          debug$3.warn('Ignoring "formats" option because "registry" is specified');
        }
      } else {
        registry = options.formats ? createRegistryWithFormats(options.formats, config.registry, debug$3) : config.registry;
      }
      return {
        ...config,
        registry,
        container,
        theme,
        modules: Object.entries(modules).reduce((modulesWithDefaults, _ref2) => {
          let [name, value] = _ref2;
          if (!value) return modulesWithDefaults;
          const moduleClass = Quill.import(`modules/${name}`);
          if (moduleClass == null) {
            debug$3.error(`Cannot load ${name} module. Are you sure you registered it?`);
            return modulesWithDefaults;
          }
          return {
            ...modulesWithDefaults,
            // @ts-expect-error
            [name]: merge({}, moduleClass.DEFAULTS || {}, value)
          };
        }, {}),
        bounds: resolveSelector(config.bounds)
      };
    }

    // Handle selection preservation and TEXT_CHANGE emission
    // common to modification APIs
    function modify(modifier, source, index, shift) {
      if (!this.isEnabled() && source === Emitter.sources.USER && !this.allowReadOnlyEdits) {
        return new Delta$3();
      }
      let range = index == null ? null : this.getSelection();
      const oldDelta = this.editor.delta;
      const change = modifier();
      if (range != null) {
        if (index === true) {
          index = range.index; // eslint-disable-line prefer-destructuring
        }
        if (shift == null) {
          range = shiftRange(range, change, source);
        } else if (shift !== 0) {
          // @ts-expect-error index should always be number
          range = shiftRange(range, index, shift, source);
        }
        this.setSelection(range, Emitter.sources.SILENT);
      }
      if (change.length() > 0) {
        const args = [Emitter.events.TEXT_CHANGE, change, oldDelta, source];
        this.emitter.emit(Emitter.events.EDITOR_CHANGE, ...args);
        if (source !== Emitter.sources.SILENT) {
          this.emitter.emit(...args);
        }
      }
      return change;
    }
    function overload(index, length, name, value, source) {
      let formats = {};
      // @ts-expect-error
      if (typeof index.index === 'number' && typeof index.length === 'number') {
        // Allow for throwaway end (used by insertText/insertEmbed)
        if (typeof length !== 'number') {
          // @ts-expect-error
          source = value;
          value = name;
          name = length;
          // @ts-expect-error
          length = index.length; // eslint-disable-line prefer-destructuring
          // @ts-expect-error
          index = index.index; // eslint-disable-line prefer-destructuring
        } else {
          // @ts-expect-error
          length = index.length; // eslint-disable-line prefer-destructuring
          // @ts-expect-error
          index = index.index; // eslint-disable-line prefer-destructuring
        }
      } else if (typeof length !== 'number') {
        // @ts-expect-error
        source = value;
        value = name;
        name = length;
        length = 0;
      }
      // Handle format being object, two format name/value strings or excluded
      if (typeof name === 'object') {
        // @ts-expect-error Fix me later
        formats = name;
        // @ts-expect-error
        source = value;
      } else if (typeof name === 'string') {
        if (value != null) {
          formats[name] = value;
        } else {
          // @ts-expect-error
          source = name;
        }
      }
      // Handle optional source
      source = source || Emitter.sources.API;
      // @ts-expect-error
      return [index, length, formats, source];
    }
    function shiftRange(range, index, lengthOrSource, source) {
      const length = typeof lengthOrSource === 'number' ? lengthOrSource : 0;
      if (range == null) return null;
      let start;
      let end;
      // @ts-expect-error -- TODO: add a better type guard around `index`
      if (index && typeof index.transformPosition === 'function') {
        [start, end] = [range.index, range.index + range.length].map(pos =>
        // @ts-expect-error -- TODO: add a better type guard around `index`
        index.transformPosition(pos, source !== Emitter.sources.USER));
      } else {
        [start, end] = [range.index, range.index + range.length].map(pos => {
          // @ts-expect-error -- TODO: add a better type guard around `index`
          if (pos < index || pos === index && source === Emitter.sources.USER) return pos;
          if (length >= 0) {
            return pos + length;
          }
          // @ts-expect-error -- TODO: add a better type guard around `index`
          return Math.max(index, pos + length);
        });
      }
      return new Range(start, end - start);
    }

    let Container$1 = class Container extends ContainerBlot$1 {};

    function isLine$1(blot) {
      return blot instanceof Block$3 || blot instanceof BlockEmbed$1;
    }
    function isUpdatable(blot) {
      return typeof blot.updateContent === 'function';
    }
    class Scroll extends ScrollBlot$1 {
      static blotName = 'scroll';
      static className = 'ql-editor';
      static tagName = 'DIV';
      static defaultChild = Block$3;
      static allowedChildren = [Block$3, BlockEmbed$1, Container$1];
      constructor(registry, domNode, _ref) {
        let {
          emitter
        } = _ref;
        super(registry, domNode);
        this.emitter = emitter;
        this.batch = false;
        this.optimize();
        this.enable();
        this.domNode.addEventListener('dragstart', e => this.handleDragStart(e));
      }
      batchStart() {
        if (!Array.isArray(this.batch)) {
          this.batch = [];
        }
      }
      batchEnd() {
        if (!this.batch) return;
        const mutations = this.batch;
        this.batch = false;
        this.update(mutations);
      }
      emitMount(blot) {
        this.emitter.emit(Emitter.events.SCROLL_BLOT_MOUNT, blot);
      }
      emitUnmount(blot) {
        this.emitter.emit(Emitter.events.SCROLL_BLOT_UNMOUNT, blot);
      }
      emitEmbedUpdate(blot, change) {
        this.emitter.emit(Emitter.events.SCROLL_EMBED_UPDATE, blot, change);
      }
      deleteAt(index, length) {
        const [first, offset] = this.line(index);
        const [last] = this.line(index + length);
        super.deleteAt(index, length);
        if (last != null && first !== last && offset > 0) {
          if (first instanceof BlockEmbed$1 || last instanceof BlockEmbed$1) {
            this.optimize();
            return;
          }
          const ref = last.children.head instanceof Break$1 ? null : last.children.head;
          // @ts-expect-error
          first.moveChildren(last, ref);
          // @ts-expect-error
          first.remove();
        }
        this.optimize();
      }
      enable() {
        let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.domNode.setAttribute('contenteditable', enabled ? 'true' : 'false');
      }
      formatAt(index, length, format, value) {
        super.formatAt(index, length, format, value);
        this.optimize();
      }
      insertAt(index, value, def) {
        if (index >= this.length()) {
          if (def == null || this.scroll.query(value, Scope.BLOCK) == null) {
            const blot = this.scroll.create(this.statics.defaultChild.blotName);
            this.appendChild(blot);
            if (def == null && value.endsWith('\n')) {
              blot.insertAt(0, value.slice(0, -1), def);
            } else {
              blot.insertAt(0, value, def);
            }
          } else {
            const embed = this.scroll.create(value, def);
            this.appendChild(embed);
          }
        } else {
          super.insertAt(index, value, def);
        }
        this.optimize();
      }
      insertBefore(blot, ref) {
        if (blot.statics.scope === Scope.INLINE_BLOT) {
          const wrapper = this.scroll.create(this.statics.defaultChild.blotName);
          wrapper.appendChild(blot);
          super.insertBefore(wrapper, ref);
        } else {
          super.insertBefore(blot, ref);
        }
      }
      insertContents(index, delta) {
        const renderBlocks = this.deltaToRenderBlocks(delta.concat(new Delta$3().insert('\n')));
        const last = renderBlocks.pop();
        if (last == null) return;
        this.batchStart();
        const first = renderBlocks.shift();
        if (first) {
          const shouldInsertNewlineChar = first.type === 'block' && (first.delta.length() === 0 || !this.descendant(BlockEmbed$1, index)[0] && index < this.length());
          const delta = first.type === 'block' ? first.delta : new Delta$3().insert({
            [first.key]: first.value
          });
          insertInlineContents(this, index, delta);
          const newlineCharLength = first.type === 'block' ? 1 : 0;
          const lineEndIndex = index + delta.length() + newlineCharLength;
          if (shouldInsertNewlineChar) {
            this.insertAt(lineEndIndex - 1, '\n');
          }
          const formats = bubbleFormats(this.line(index)[0]);
          const attributes = DeltaExports.AttributeMap.diff(formats, first.attributes) || {};
          Object.keys(attributes).forEach(name => {
            this.formatAt(lineEndIndex - 1, 1, name, attributes[name]);
          });
          index = lineEndIndex;
        }
        let [refBlot, refBlotOffset] = this.children.find(index);
        if (renderBlocks.length) {
          if (refBlot) {
            refBlot = refBlot.split(refBlotOffset);
            refBlotOffset = 0;
          }
          renderBlocks.forEach(renderBlock => {
            if (renderBlock.type === 'block') {
              const block = this.createBlock(renderBlock.attributes, refBlot || undefined);
              insertInlineContents(block, 0, renderBlock.delta);
            } else {
              const blockEmbed = this.create(renderBlock.key, renderBlock.value);
              this.insertBefore(blockEmbed, refBlot || undefined);
              Object.keys(renderBlock.attributes).forEach(name => {
                blockEmbed.format(name, renderBlock.attributes[name]);
              });
            }
          });
        }
        if (last.type === 'block' && last.delta.length()) {
          const offset = refBlot ? refBlot.offset(refBlot.scroll) + refBlotOffset : this.length();
          insertInlineContents(this, offset, last.delta);
        }
        this.batchEnd();
        this.optimize();
      }
      isEnabled() {
        return this.domNode.getAttribute('contenteditable') === 'true';
      }
      leaf(index) {
        const last = this.path(index).pop();
        if (!last) {
          return [null, -1];
        }
        const [blot, offset] = last;
        return blot instanceof LeafBlot$1 ? [blot, offset] : [null, -1];
      }
      line(index) {
        if (index === this.length()) {
          return this.line(index - 1);
        }
        // @ts-expect-error TODO: make descendant() generic
        return this.descendant(isLine$1, index);
      }
      lines() {
        let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;
        const getLines = (blot, blotIndex, blotLength) => {
          let lines = [];
          let lengthLeft = blotLength;
          blot.children.forEachAt(blotIndex, blotLength, (child, childIndex, childLength) => {
            if (isLine$1(child)) {
              lines.push(child);
            } else if (child instanceof ContainerBlot$1) {
              lines = lines.concat(getLines(child, childIndex, lengthLeft));
            }
            lengthLeft -= childLength;
          });
          return lines;
        };
        return getLines(this, index, length);
      }
      optimize() {
        let mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (this.batch) return;
        super.optimize(mutations, context);
        if (mutations.length > 0) {
          this.emitter.emit(Emitter.events.SCROLL_OPTIMIZE, mutations, context);
        }
      }
      path(index) {
        return super.path(index).slice(1); // Exclude self
      }
      remove() {
        // Never remove self
      }
      update(mutations) {
        if (this.batch) {
          if (Array.isArray(mutations)) {
            this.batch = this.batch.concat(mutations);
          }
          return;
        }
        let source = Emitter.sources.USER;
        if (typeof mutations === 'string') {
          source = mutations;
        }
        if (!Array.isArray(mutations)) {
          mutations = this.observer.takeRecords();
        }
        mutations = mutations.filter(_ref2 => {
          let {
            target
          } = _ref2;
          const blot = this.find(target, true);
          return blot && !isUpdatable(blot);
        });
        if (mutations.length > 0) {
          this.emitter.emit(Emitter.events.SCROLL_BEFORE_UPDATE, source, mutations);
        }
        super.update(mutations.concat([])); // pass copy
        if (mutations.length > 0) {
          this.emitter.emit(Emitter.events.SCROLL_UPDATE, source, mutations);
        }
      }
      updateEmbedAt(index, key, change) {
        // Currently it only supports top-level embeds (BlockEmbed).
        // We can update `ParentBlot` in parchment to support inline embeds.
        const [blot] = this.descendant(b => b instanceof BlockEmbed$1, index);
        if (blot && blot.statics.blotName === key && isUpdatable(blot)) {
          blot.updateContent(change);
        }
      }
      handleDragStart(event) {
        event.preventDefault();
      }
      deltaToRenderBlocks(delta) {
        const renderBlocks = [];
        let currentBlockDelta = new Delta$3();
        delta.forEach(op => {
          const insert = op?.insert;
          if (!insert) return;
          if (typeof insert === 'string') {
            const splitted = insert.split('\n');
            splitted.slice(0, -1).forEach(text => {
              currentBlockDelta.insert(text, op.attributes);
              renderBlocks.push({
                type: 'block',
                delta: currentBlockDelta,
                attributes: op.attributes ?? {}
              });
              currentBlockDelta = new Delta$3();
            });
            const last = splitted[splitted.length - 1];
            if (last) {
              currentBlockDelta.insert(last, op.attributes);
            }
          } else {
            const key = Object.keys(insert)[0];
            if (!key) return;
            if (this.query(key, Scope.INLINE)) {
              currentBlockDelta.push(op);
            } else {
              if (currentBlockDelta.length()) {
                renderBlocks.push({
                  type: 'block',
                  delta: currentBlockDelta,
                  attributes: {}
                });
              }
              currentBlockDelta = new Delta$3();
              renderBlocks.push({
                type: 'blockEmbed',
                key,
                value: insert[key],
                attributes: op.attributes ?? {}
              });
            }
          }
        });
        if (currentBlockDelta.length()) {
          renderBlocks.push({
            type: 'block',
            delta: currentBlockDelta,
            attributes: {}
          });
        }
        return renderBlocks;
      }
      createBlock(attributes, refBlot) {
        let blotName;
        const formats = {};
        Object.entries(attributes).forEach(_ref3 => {
          let [key, value] = _ref3;
          const isBlockBlot = this.query(key, Scope.BLOCK & Scope.BLOT) != null;
          if (isBlockBlot) {
            blotName = key;
          } else {
            formats[key] = value;
          }
        });
        const block = this.create(blotName || this.statics.defaultChild.blotName, blotName ? attributes[blotName] : undefined);
        this.insertBefore(block, refBlot || undefined);
        const length = block.length();
        Object.entries(formats).forEach(_ref4 => {
          let [key, value] = _ref4;
          block.formatAt(0, length, key, value);
        });
        return block;
      }
    }
    function insertInlineContents(parent, index, inlineContents) {
      inlineContents.reduce((index, op) => {
        const length = DeltaExports.Op.length(op);
        let attributes = op.attributes || {};
        if (op.insert != null) {
          if (typeof op.insert === 'string') {
            const text = op.insert;
            parent.insertAt(index, text);
            const [leaf] = parent.descendant(LeafBlot$1, index);
            const formats = bubbleFormats(leaf);
            attributes = DeltaExports.AttributeMap.diff(formats, attributes) || {};
          } else if (typeof op.insert === 'object') {
            const key = Object.keys(op.insert)[0]; // There should only be one key
            if (key == null) return index;
            parent.insertAt(index, key, op.insert[key]);
            const isInlineEmbed = parent.scroll.query(key, Scope.INLINE) != null;
            if (isInlineEmbed) {
              const [leaf] = parent.descendant(LeafBlot$1, index);
              const formats = bubbleFormats(leaf);
              attributes = DeltaExports.AttributeMap.diff(formats, attributes) || {};
            }
          }
        }
        Object.keys(attributes).forEach(key => {
          parent.formatAt(index, length, key, attributes[key]);
        });
        return index + length;
      }, index);
    }

    const config$2 = {
      scope: Scope.BLOCK,
      whitelist: ['right', 'center', 'justify']
    };
    const AlignAttribute = new Attributor('align', 'align', config$2);
    const AlignClass = new ClassAttributor$1('align', 'ql-align', config$2);
    const AlignStyle = new StyleAttributor$1('align', 'text-align', config$2);

    class ColorAttributor extends StyleAttributor$1 {
      value(domNode) {
        let value = super.value(domNode);
        if (!value.startsWith('rgb(')) return value;
        value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
        const hex = value.split(',').map(component => `00${parseInt(component, 10).toString(16)}`.slice(-2)).join('');
        return `#${hex}`;
      }
    }
    const ColorClass = new ClassAttributor$1('color', 'ql-color', {
      scope: Scope.INLINE
    });
    const ColorStyle = new ColorAttributor('color', 'color', {
      scope: Scope.INLINE
    });

    const BackgroundClass = new ClassAttributor$1('background', 'ql-bg', {
      scope: Scope.INLINE
    });
    const BackgroundStyle = new ColorAttributor('background', 'background-color', {
      scope: Scope.INLINE
    });

    class CodeBlockContainer extends Container$1 {
      static create(value) {
        const domNode = super.create(value);
        domNode.setAttribute('spellcheck', 'false');
        return domNode;
      }
      code(index, length) {
        return this.children
        // @ts-expect-error
        .map(child => child.length() <= 1 ? '' : child.domNode.innerText).join('\n').slice(index, index + length);
      }
      html(index, length) {
        // `\n`s are needed in order to support empty lines at the beginning and the end.
        // https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions
        return `<pre>\n${escapeText(this.code(index, length))}\n</pre>`;
      }
    }
    let CodeBlock$1 = class CodeBlock extends Block$3 {
      static TAB = '  ';
      static register() {
        Quill.register(CodeBlockContainer);
      }
    };
    class Code extends Inline {}
    Code.blotName = 'code';
    Code.tagName = 'CODE';
    CodeBlock$1.blotName = 'code-block';
    CodeBlock$1.className = 'ql-code-block';
    CodeBlock$1.tagName = 'DIV';
    CodeBlockContainer.blotName = 'code-block-container';
    CodeBlockContainer.className = 'ql-code-block-container';
    CodeBlockContainer.tagName = 'DIV';
    CodeBlockContainer.allowedChildren = [CodeBlock$1];
    CodeBlock$1.allowedChildren = [Text$1, Break$1, Cursor];
    CodeBlock$1.requiredContainer = CodeBlockContainer;

    const config$1 = {
      scope: Scope.BLOCK,
      whitelist: ['rtl']
    };
    const DirectionAttribute = new Attributor('direction', 'dir', config$1);
    const DirectionClass = new ClassAttributor$1('direction', 'ql-direction', config$1);
    const DirectionStyle = new StyleAttributor$1('direction', 'direction', config$1);

    const config = {
      scope: Scope.INLINE,
      whitelist: ['serif', 'monospace']
    };
    const FontClass = new ClassAttributor$1('font', 'ql-font', config);
    class FontStyleAttributor extends StyleAttributor$1 {
      value(node) {
        return super.value(node).replace(/["']/g, '');
      }
    }
    const FontStyle = new FontStyleAttributor('font', 'font-family', config);

    const SizeClass = new ClassAttributor$1('size', 'ql-size', {
      scope: Scope.INLINE,
      whitelist: ['small', 'large', 'huge']
    });
    const SizeStyle = new StyleAttributor$1('size', 'font-size', {
      scope: Scope.INLINE,
      whitelist: ['10px', '18px', '32px']
    });

    const debug$2 = namespace('quill:keyboard');
    const SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';
    class Keyboard extends Module$5 {
      static match(evt, binding) {
        if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(key => {
          return !!binding[key] !== evt[key] && binding[key] !== null;
        })) {
          return false;
        }
        return binding.key === evt.key || binding.key === evt.which;
      }
      constructor(quill, options) {
        super(quill, options);
        this.bindings = {};
        // @ts-expect-error Fix me later
        Object.keys(this.options.bindings).forEach(name => {
          // @ts-expect-error Fix me later
          if (this.options.bindings[name]) {
            // @ts-expect-error Fix me later
            this.addBinding(this.options.bindings[name]);
          }
        });
        this.addBinding({
          key: 'Enter',
          shiftKey: null
        }, this.handleEnter);
        this.addBinding({
          key: 'Enter',
          metaKey: null,
          ctrlKey: null,
          altKey: null
        }, () => {});
        if (/Firefox/i.test(navigator.userAgent)) {
          // Need to handle delete and backspace for Firefox in the general case #1171
          this.addBinding({
            key: 'Backspace'
          }, {
            collapsed: true
          }, this.handleBackspace);
          this.addBinding({
            key: 'Delete'
          }, {
            collapsed: true
          }, this.handleDelete);
        } else {
          this.addBinding({
            key: 'Backspace'
          }, {
            collapsed: true,
            prefix: /^.?$/
          }, this.handleBackspace);
          this.addBinding({
            key: 'Delete'
          }, {
            collapsed: true,
            suffix: /^.?$/
          }, this.handleDelete);
        }
        this.addBinding({
          key: 'Backspace'
        }, {
          collapsed: false
        }, this.handleDeleteRange);
        this.addBinding({
          key: 'Delete'
        }, {
          collapsed: false
        }, this.handleDeleteRange);
        this.addBinding({
          key: 'Backspace',
          altKey: null,
          ctrlKey: null,
          metaKey: null,
          shiftKey: null
        }, {
          collapsed: true,
          offset: 0
        }, this.handleBackspace);
        this.listen();
      }
      addBinding(keyBinding) {
        let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        let handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        const binding = normalize$2(keyBinding);
        if (binding == null) {
          debug$2.warn('Attempted to add invalid keyboard binding', binding);
          return;
        }
        if (typeof context === 'function') {
          context = {
            handler: context
          };
        }
        if (typeof handler === 'function') {
          handler = {
            handler
          };
        }
        const keys = Array.isArray(binding.key) ? binding.key : [binding.key];
        keys.forEach(key => {
          const singleBinding = {
            ...binding,
            key,
            ...context,
            ...handler
          };
          this.bindings[singleBinding.key] = this.bindings[singleBinding.key] || [];
          this.bindings[singleBinding.key].push(singleBinding);
        });
      }
      listen() {
        this.quill.root.addEventListener('keydown', evt => {
          if (evt.defaultPrevented || evt.isComposing) return;
          const bindings = (this.bindings[evt.key] || []).concat(this.bindings[evt.which] || []);
          const matches = bindings.filter(binding => Keyboard.match(evt, binding));
          if (matches.length === 0) return;
          // @ts-expect-error
          const blot = Quill.find(evt.target, true);
          if (blot && blot.scroll !== this.quill.scroll) return;
          const range = this.quill.getSelection();
          if (range == null || !this.quill.hasFocus()) return;
          const [line, offset] = this.quill.getLine(range.index);
          const [leafStart, offsetStart] = this.quill.getLeaf(range.index);
          const [leafEnd, offsetEnd] = range.length === 0 ? [leafStart, offsetStart] : this.quill.getLeaf(range.index + range.length);
          const prefixText = leafStart instanceof TextBlot$1 ? leafStart.value().slice(0, offsetStart) : '';
          const suffixText = leafEnd instanceof TextBlot$1 ? leafEnd.value().slice(offsetEnd) : '';
          const curContext = {
            collapsed: range.length === 0,
            // @ts-expect-error Fix me later
            empty: range.length === 0 && line.length() <= 1,
            format: this.quill.getFormat(range),
            line,
            offset,
            prefix: prefixText,
            suffix: suffixText,
            event: evt
          };
          const prevented = matches.some(binding => {
            if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) {
              return false;
            }
            if (binding.empty != null && binding.empty !== curContext.empty) {
              return false;
            }
            if (binding.offset != null && binding.offset !== curContext.offset) {
              return false;
            }
            if (Array.isArray(binding.format)) {
              // any format is present
              if (binding.format.every(name => curContext.format[name] == null)) {
                return false;
              }
            } else if (typeof binding.format === 'object') {
              // all formats must match
              if (!Object.keys(binding.format).every(name => {
                // @ts-expect-error Fix me later
                if (binding.format[name] === true) return curContext.format[name] != null;
                // @ts-expect-error Fix me later
                if (binding.format[name] === false) return curContext.format[name] == null;
                // @ts-expect-error Fix me later
                return isEqual$2(binding.format[name], curContext.format[name]);
              })) {
                return false;
              }
            }
            if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) {
              return false;
            }
            if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) {
              return false;
            }
            // @ts-expect-error Fix me later
            return binding.handler.call(this, range, curContext, binding) !== true;
          });
          if (prevented) {
            evt.preventDefault();
          }
        });
      }
      handleBackspace(range, context) {
        // Check for astral symbols
        const length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
        if (range.index === 0 || this.quill.getLength() <= 1) return;
        let formats = {};
        const [line] = this.quill.getLine(range.index);
        let delta = new Delta$3().retain(range.index - length).delete(length);
        if (context.offset === 0) {
          // Always deleting newline here, length always 1
          const [prev] = this.quill.getLine(range.index - 1);
          if (prev) {
            const isPrevLineEmpty = prev.statics.blotName === 'block' && prev.length() <= 1;
            if (!isPrevLineEmpty) {
              // @ts-expect-error Fix me later
              const curFormats = line.formats();
              const prevFormats = this.quill.getFormat(range.index - 1, 1);
              formats = DeltaExports.AttributeMap.diff(curFormats, prevFormats) || {};
              if (Object.keys(formats).length > 0) {
                // line.length() - 1 targets \n in line, another -1 for newline being deleted
                const formatDelta = new Delta$3()
                // @ts-expect-error Fix me later
                .retain(range.index + line.length() - 2).retain(1, formats);
                delta = delta.compose(formatDelta);
              }
            }
          }
        }
        this.quill.updateContents(delta, Quill.sources.USER);
        this.quill.focus();
      }
      handleDelete(range, context) {
        // Check for astral symbols
        const length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
        if (range.index >= this.quill.getLength() - length) return;
        let formats = {};
        const [line] = this.quill.getLine(range.index);
        let delta = new Delta$3().retain(range.index).delete(length);
        // @ts-expect-error Fix me later
        if (context.offset >= line.length() - 1) {
          const [next] = this.quill.getLine(range.index + 1);
          if (next) {
            // @ts-expect-error Fix me later
            const curFormats = line.formats();
            const nextFormats = this.quill.getFormat(range.index, 1);
            formats = DeltaExports.AttributeMap.diff(curFormats, nextFormats) || {};
            if (Object.keys(formats).length > 0) {
              delta = delta.retain(next.length() - 1).retain(1, formats);
            }
          }
        }
        this.quill.updateContents(delta, Quill.sources.USER);
        this.quill.focus();
      }
      handleDeleteRange(range) {
        deleteRange({
          range,
          quill: this.quill
        });
        this.quill.focus();
      }
      handleEnter(range, context) {
        const lineFormats = Object.keys(context.format).reduce((formats, format) => {
          if (this.quill.scroll.query(format, Scope.BLOCK) && !Array.isArray(context.format[format])) {
            formats[format] = context.format[format];
          }
          return formats;
        }, {});
        const delta = new Delta$3().retain(range.index).delete(range.length).insert('\n', lineFormats);
        this.quill.updateContents(delta, Quill.sources.USER);
        this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
        this.quill.focus();
      }
    }
    const defaultOptions = {
      bindings: {
        bold: makeFormatHandler('bold'),
        italic: makeFormatHandler('italic'),
        underline: makeFormatHandler('underline'),
        indent: {
          // highlight tab or tab at beginning of list, indent or blockquote
          key: 'Tab',
          format: ['blockquote', 'indent', 'list'],
          handler(range, context) {
            if (context.collapsed && context.offset !== 0) return true;
            this.quill.format('indent', '+1', Quill.sources.USER);
            return false;
          }
        },
        outdent: {
          key: 'Tab',
          shiftKey: true,
          format: ['blockquote', 'indent', 'list'],
          // highlight tab or tab at beginning of list, indent or blockquote
          handler(range, context) {
            if (context.collapsed && context.offset !== 0) return true;
            this.quill.format('indent', '-1', Quill.sources.USER);
            return false;
          }
        },
        'outdent backspace': {
          key: 'Backspace',
          collapsed: true,
          shiftKey: null,
          metaKey: null,
          ctrlKey: null,
          altKey: null,
          format: ['indent', 'list'],
          offset: 0,
          handler(range, context) {
            if (context.format.indent != null) {
              this.quill.format('indent', '-1', Quill.sources.USER);
            } else if (context.format.list != null) {
              this.quill.format('list', false, Quill.sources.USER);
            }
          }
        },
        'indent code-block': makeCodeBlockHandler(true),
        'outdent code-block': makeCodeBlockHandler(false),
        'remove tab': {
          key: 'Tab',
          shiftKey: true,
          collapsed: true,
          prefix: /\t$/,
          handler(range) {
            this.quill.deleteText(range.index - 1, 1, Quill.sources.USER);
          }
        },
        tab: {
          key: 'Tab',
          handler(range, context) {
            if (context.format.table) return true;
            this.quill.history.cutoff();
            const delta = new Delta$3().retain(range.index).delete(range.length).insert('\t');
            this.quill.updateContents(delta, Quill.sources.USER);
            this.quill.history.cutoff();
            this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
            return false;
          }
        },
        'blockquote empty enter': {
          key: 'Enter',
          collapsed: true,
          format: ['blockquote'],
          empty: true,
          handler() {
            this.quill.format('blockquote', false, Quill.sources.USER);
          }
        },
        'list empty enter': {
          key: 'Enter',
          collapsed: true,
          format: ['list'],
          empty: true,
          handler(range, context) {
            const formats = {
              list: false
            };
            if (context.format.indent) {
              formats.indent = false;
            }
            this.quill.formatLine(range.index, range.length, formats, Quill.sources.USER);
          }
        },
        'checklist enter': {
          key: 'Enter',
          collapsed: true,
          format: {
            list: 'checked'
          },
          handler(range) {
            const [line, offset] = this.quill.getLine(range.index);
            const formats = {
              // @ts-expect-error Fix me later
              ...line.formats(),
              list: 'checked'
            };
            const delta = new Delta$3().retain(range.index).insert('\n', formats)
            // @ts-expect-error Fix me later
            .retain(line.length() - offset - 1).retain(1, {
              list: 'unchecked'
            });
            this.quill.updateContents(delta, Quill.sources.USER);
            this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
            this.quill.scrollSelectionIntoView();
          }
        },
        'header enter': {
          key: 'Enter',
          collapsed: true,
          format: ['header'],
          suffix: /^$/,
          handler(range, context) {
            const [line, offset] = this.quill.getLine(range.index);
            const delta = new Delta$3().retain(range.index).insert('\n', context.format)
            // @ts-expect-error Fix me later
            .retain(line.length() - offset - 1).retain(1, {
              header: null
            });
            this.quill.updateContents(delta, Quill.sources.USER);
            this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
            this.quill.scrollSelectionIntoView();
          }
        },
        'table backspace': {
          key: 'Backspace',
          format: ['table'],
          collapsed: true,
          offset: 0,
          handler() {}
        },
        'table delete': {
          key: 'Delete',
          format: ['table'],
          collapsed: true,
          suffix: /^$/,
          handler() {}
        },
        'table enter': {
          key: 'Enter',
          shiftKey: null,
          format: ['table'],
          handler(range) {
            const module = this.quill.getModule('table');
            if (module) {
              // @ts-expect-error
              const [table, row, cell, offset] = module.getTable(range);
              const shift = tableSide(table, row, cell, offset);
              if (shift == null) return;
              let index = table.offset();
              if (shift < 0) {
                const delta = new Delta$3().retain(index).insert('\n');
                this.quill.updateContents(delta, Quill.sources.USER);
                this.quill.setSelection(range.index + 1, range.length, Quill.sources.SILENT);
              } else if (shift > 0) {
                index += table.length();
                const delta = new Delta$3().retain(index).insert('\n');
                this.quill.updateContents(delta, Quill.sources.USER);
                this.quill.setSelection(index, Quill.sources.USER);
              }
            }
          }
        },
        'table tab': {
          key: 'Tab',
          shiftKey: null,
          format: ['table'],
          handler(range, context) {
            const {
              event,
              line: cell
            } = context;
            const offset = cell.offset(this.quill.scroll);
            if (event.shiftKey) {
              this.quill.setSelection(offset - 1, Quill.sources.USER);
            } else {
              this.quill.setSelection(offset + cell.length(), Quill.sources.USER);
            }
          }
        },
        'list autofill': {
          key: ' ',
          shiftKey: null,
          collapsed: true,
          format: {
            'code-block': false,
            blockquote: false,
            table: false
          },
          prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
          handler(range, context) {
            if (this.quill.scroll.query('list') == null) return true;
            const {
              length
            } = context.prefix;
            const [line, offset] = this.quill.getLine(range.index);
            if (offset > length) return true;
            let value;
            switch (context.prefix.trim()) {
              case '[]':
              case '[ ]':
                value = 'unchecked';
                break;
              case '[x]':
                value = 'checked';
                break;
              case '-':
              case '*':
                value = 'bullet';
                break;
              default:
                value = 'ordered';
            }
            this.quill.insertText(range.index, ' ', Quill.sources.USER);
            this.quill.history.cutoff();
            const delta = new Delta$3().retain(range.index - offset).delete(length + 1)
            // @ts-expect-error Fix me later
            .retain(line.length() - 2 - offset).retain(1, {
              list: value
            });
            this.quill.updateContents(delta, Quill.sources.USER);
            this.quill.history.cutoff();
            this.quill.setSelection(range.index - length, Quill.sources.SILENT);
            return false;
          }
        },
        'code exit': {
          key: 'Enter',
          collapsed: true,
          format: ['code-block'],
          prefix: /^$/,
          suffix: /^\s*$/,
          handler(range) {
            const [line, offset] = this.quill.getLine(range.index);
            let numLines = 2;
            let cur = line;
            while (cur != null && cur.length() <= 1 && cur.formats()['code-block']) {
              // @ts-expect-error
              cur = cur.prev;
              numLines -= 1;
              // Requisite prev lines are empty
              if (numLines <= 0) {
                const delta = new Delta$3()
                // @ts-expect-error Fix me later
                .retain(range.index + line.length() - offset - 2).retain(1, {
                  'code-block': null
                }).delete(1);
                this.quill.updateContents(delta, Quill.sources.USER);
                this.quill.setSelection(range.index - 1, Quill.sources.SILENT);
                return false;
              }
            }
            return true;
          }
        },
        'embed left': makeEmbedArrowHandler('ArrowLeft', false),
        'embed left shift': makeEmbedArrowHandler('ArrowLeft', true),
        'embed right': makeEmbedArrowHandler('ArrowRight', false),
        'embed right shift': makeEmbedArrowHandler('ArrowRight', true),
        'table down': makeTableArrowHandler$1(false),
        'table up': makeTableArrowHandler$1(true)
      }
    };
    Keyboard.DEFAULTS = defaultOptions;
    function makeCodeBlockHandler(indent) {
      return {
        key: 'Tab',
        shiftKey: !indent,
        format: {
          'code-block': true
        },
        handler(range, _ref) {
          let {
            event
          } = _ref;
          const CodeBlock = this.quill.scroll.query('code-block');
          // @ts-expect-error
          const {
            TAB
          } = CodeBlock;
          if (range.length === 0 && !event.shiftKey) {
            this.quill.insertText(range.index, TAB, Quill.sources.USER);
            this.quill.setSelection(range.index + TAB.length, Quill.sources.SILENT);
            return;
          }
          const lines = range.length === 0 ? this.quill.getLines(range.index, 1) : this.quill.getLines(range);
          let {
            index,
            length
          } = range;
          lines.forEach((line, i) => {
            if (indent) {
              line.insertAt(0, TAB);
              if (i === 0) {
                index += TAB.length;
              } else {
                length += TAB.length;
              }
              // @ts-expect-error Fix me later
            } else if (line.domNode.textContent.startsWith(TAB)) {
              line.deleteAt(0, TAB.length);
              if (i === 0) {
                index -= TAB.length;
              } else {
                length -= TAB.length;
              }
            }
          });
          this.quill.update(Quill.sources.USER);
          this.quill.setSelection(index, length, Quill.sources.SILENT);
        }
      };
    }
    function makeEmbedArrowHandler(key, shiftKey) {
      const where = key === 'ArrowLeft' ? 'prefix' : 'suffix';
      return {
        key,
        shiftKey,
        altKey: null,
        [where]: /^$/,
        handler(range) {
          let {
            index
          } = range;
          if (key === 'ArrowRight') {
            index += range.length + 1;
          }
          const [leaf] = this.quill.getLeaf(index);
          if (!(leaf instanceof EmbedBlot$1)) return true;
          if (key === 'ArrowLeft') {
            if (shiftKey) {
              this.quill.setSelection(range.index - 1, range.length + 1, Quill.sources.USER);
            } else {
              this.quill.setSelection(range.index - 1, Quill.sources.USER);
            }
          } else if (shiftKey) {
            this.quill.setSelection(range.index, range.length + 1, Quill.sources.USER);
          } else {
            this.quill.setSelection(range.index + range.length + 1, Quill.sources.USER);
          }
          return false;
        }
      };
    }
    function makeFormatHandler(format) {
      return {
        key: format[0],
        shortKey: true,
        handler(range, context) {
          this.quill.format(format, !context.format[format], Quill.sources.USER);
        }
      };
    }
    function makeTableArrowHandler$1(up) {
      return {
        key: up ? 'ArrowUp' : 'ArrowDown',
        collapsed: true,
        format: ['table'],
        handler(range, context) {
          // TODO move to table module
          const key = up ? 'prev' : 'next';
          const cell = context.line;
          const targetRow = cell.parent[key];
          if (targetRow != null) {
            if (targetRow.statics.blotName === 'table-row') {
              // @ts-expect-error
              let targetCell = targetRow.children.head;
              let cur = cell;
              while (cur.prev != null) {
                // @ts-expect-error
                cur = cur.prev;
                targetCell = targetCell.next;
              }
              const index = targetCell.offset(this.quill.scroll) + Math.min(context.offset, targetCell.length() - 1);
              this.quill.setSelection(index, 0, Quill.sources.USER);
            }
          } else {
            // @ts-expect-error
            const targetLine = cell.table()[key];
            if (targetLine != null) {
              if (up) {
                this.quill.setSelection(targetLine.offset(this.quill.scroll) + targetLine.length() - 1, 0, Quill.sources.USER);
              } else {
                this.quill.setSelection(targetLine.offset(this.quill.scroll), 0, Quill.sources.USER);
              }
            }
          }
          return false;
        }
      };
    }
    function normalize$2(binding) {
      if (typeof binding === 'string' || typeof binding === 'number') {
        binding = {
          key: binding
        };
      } else if (typeof binding === 'object') {
        binding = cloneDeep$1(binding);
      } else {
        return null;
      }
      if (binding.shortKey) {
        binding[SHORTKEY] = binding.shortKey;
        delete binding.shortKey;
      }
      return binding;
    }

    // TODO: Move into quill.ts or editor.ts
    function deleteRange(_ref2) {
      let {
        quill,
        range
      } = _ref2;
      const lines = quill.getLines(range);
      let formats = {};
      if (lines.length > 1) {
        const firstFormats = lines[0].formats();
        const lastFormats = lines[lines.length - 1].formats();
        formats = DeltaExports.AttributeMap.diff(lastFormats, firstFormats) || {};
      }
      quill.deleteText(range, Quill.sources.USER);
      if (Object.keys(formats).length > 0) {
        quill.formatLine(range.index, 1, formats, Quill.sources.USER);
      }
      quill.setSelection(range.index, Quill.sources.SILENT);
    }
    function tableSide(_table, row, cell, offset) {
      if (row.prev == null && row.next == null) {
        if (cell.prev == null && cell.next == null) {
          return offset === 0 ? -1 : 1;
        }
        return cell.prev == null ? -1 : 1;
      }
      if (row.prev == null) {
        return -1;
      }
      if (row.next == null) {
        return 1;
      }
      return null;
    }

    const normalWeightRegexp = /font-weight:\s*normal/;
    const blockTagNames = ['P', 'OL', 'UL'];
    const isBlockElement = element => {
      return element && blockTagNames.includes(element.tagName);
    };
    const normalizeEmptyLines = doc => {
      Array.from(doc.querySelectorAll('br')).filter(br => isBlockElement(br.previousElementSibling) && isBlockElement(br.nextElementSibling)).forEach(br => {
        br.parentNode?.removeChild(br);
      });
    };
    const normalizeFontWeight = doc => {
      Array.from(doc.querySelectorAll('b[style*="font-weight"]')).filter(node => node.getAttribute('style')?.match(normalWeightRegexp)).forEach(node => {
        const fragment = doc.createDocumentFragment();
        fragment.append(...node.childNodes);
        node.parentNode?.replaceChild(fragment, node);
      });
    };
    function normalize$1(doc) {
      if (doc.querySelector('[id^="docs-internal-guid-"]')) {
        normalizeFontWeight(doc);
        normalizeEmptyLines(doc);
      }
    }

    const ignoreRegexp = /\bmso-list:[^;]*ignore/i;
    const idRegexp = /\bmso-list:[^;]*\bl(\d+)/i;
    const indentRegexp = /\bmso-list:[^;]*\blevel(\d+)/i;
    const parseListItem = (element, html) => {
      const style = element.getAttribute('style');
      const idMatch = style?.match(idRegexp);
      if (!idMatch) {
        return null;
      }
      const id = Number(idMatch[1]);
      const indentMatch = style?.match(indentRegexp);
      const indent = indentMatch ? Number(indentMatch[1]) : 1;
      const typeRegexp = new RegExp(`@list l${id}:level${indent}\\s*\\{[^\\}]*mso-level-number-format:\\s*([\\w-]+)`, 'i');
      const typeMatch = html.match(typeRegexp);
      const type = typeMatch && typeMatch[1] === 'bullet' ? 'bullet' : 'ordered';
      return {
        id,
        indent,
        type,
        element
      };
    };

    // list items are represented as `p` tags with styles like `mso-list: l0 level1` where:
    // 1. "0" in "l0" means the list item id;
    // 2. "1" in "level1" means the indent level, starting from 1.
    const normalizeListItem = doc => {
      const msoList = Array.from(doc.querySelectorAll('[style*=mso-list]'));
      const ignored = [];
      const others = [];
      msoList.forEach(node => {
        const shouldIgnore = (node.getAttribute('style') || '').match(ignoreRegexp);
        if (shouldIgnore) {
          ignored.push(node);
        } else {
          others.push(node);
        }
      });

      // Each list item contains a marker wrapped with "mso-list: Ignore".
      ignored.forEach(node => node.parentNode?.removeChild(node));

      // The list stype is not defined inline with the tag, instead, it's in the
      // style tag so we need to pass the html as a string.
      const html = doc.documentElement.innerHTML;
      const listItems = others.map(element => parseListItem(element, html)).filter(parsed => parsed);
      while (listItems.length) {
        const childListItems = [];
        let current = listItems.shift();
        // Group continuous items into the same group (aka "ul")
        while (current) {
          childListItems.push(current);
          current = listItems.length && listItems[0]?.element === current.element.nextElementSibling &&
          // Different id means the next item doesn't belong to this group.
          listItems[0].id === current.id ? listItems.shift() : null;
        }
        const ul = document.createElement('ul');
        childListItems.forEach(listItem => {
          const li = document.createElement('li');
          li.setAttribute('data-list', listItem.type);
          if (listItem.indent > 1) {
            li.setAttribute('class', `ql-indent-${listItem.indent - 1}`);
          }
          li.innerHTML = listItem.element.innerHTML;
          ul.appendChild(li);
        });
        const element = childListItems[0]?.element;
        const {
          parentNode
        } = element ?? {};
        if (element) {
          parentNode?.replaceChild(ul, element);
        }
        childListItems.slice(1).forEach(_ref => {
          let {
            element: e
          } = _ref;
          parentNode?.removeChild(e);
        });
      }
    };
    function normalize(doc) {
      if (doc.documentElement.getAttribute('xmlns:w') === 'urn:schemas-microsoft-com:office:word') {
        normalizeListItem(doc);
      }
    }

    const NORMALIZERS = [normalize, normalize$1];
    const normalizeExternalHTML = doc => {
      if (doc.documentElement) {
        NORMALIZERS.forEach(normalize => {
          normalize(doc);
        });
      }
    };

    const debug$1 = namespace('quill:clipboard');
    const CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['ol, ul', matchList], ['pre', matchCodeBlock], ['tr', matchTable$1], ['b', createMatchAlias('bold')], ['i', createMatchAlias('italic')], ['strike', createMatchAlias('strike')], ['style', matchIgnore]];
    const ATTRIBUTE_ATTRIBUTORS = [AlignAttribute, DirectionAttribute].reduce((memo, attr) => {
      memo[attr.keyName] = attr;
      return memo;
    }, {});
    const STYLE_ATTRIBUTORS = [AlignStyle, BackgroundStyle, ColorStyle, DirectionStyle, FontStyle, SizeStyle].reduce((memo, attr) => {
      memo[attr.keyName] = attr;
      return memo;
    }, {});
    class Clipboard extends Module$5 {
      static DEFAULTS = {
        matchers: []
      };
      constructor(quill, options) {
        super(quill, options);
        this.quill.root.addEventListener('copy', e => this.onCaptureCopy(e, false));
        this.quill.root.addEventListener('cut', e => this.onCaptureCopy(e, true));
        this.quill.root.addEventListener('paste', this.onCapturePaste.bind(this));
        this.matchers = [];
        CLIPBOARD_CONFIG.concat(this.options.matchers ?? []).forEach(_ref => {
          let [selector, matcher] = _ref;
          this.addMatcher(selector, matcher);
        });
      }
      addMatcher(selector, matcher) {
        this.matchers.push([selector, matcher]);
      }
      convert(_ref2) {
        let {
          html,
          text
        } = _ref2;
        let formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (formats[CodeBlock$1.blotName]) {
          return new Delta$3().insert(text || '', {
            [CodeBlock$1.blotName]: formats[CodeBlock$1.blotName]
          });
        }
        if (!html) {
          return new Delta$3().insert(text || '', formats);
        }
        const delta = this.convertHTML(html);
        // Remove trailing newline
        if (deltaEndsWith(delta, '\n') && (delta.ops[delta.ops.length - 1].attributes == null || formats.table)) {
          return delta.compose(new Delta$3().retain(delta.length() - 1).delete(1));
        }
        return delta;
      }
      normalizeHTML(doc) {
        normalizeExternalHTML(doc);
      }
      convertHTML(html) {
        const doc = new DOMParser().parseFromString(html, 'text/html');
        this.normalizeHTML(doc);
        const container = doc.body;
        const nodeMatches = new WeakMap();
        const [elementMatchers, textMatchers] = this.prepareMatching(container, nodeMatches);
        return traverse(this.quill.scroll, container, elementMatchers, textMatchers, nodeMatches);
      }
      dangerouslyPasteHTML(index, html) {
        let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Quill.sources.API;
        if (typeof index === 'string') {
          const delta = this.convert({
            html: index,
            text: ''
          });
          // @ts-expect-error
          this.quill.setContents(delta, html);
          this.quill.setSelection(0, Quill.sources.SILENT);
        } else {
          const paste = this.convert({
            html,
            text: ''
          });
          this.quill.updateContents(new Delta$3().retain(index).concat(paste), source);
          this.quill.setSelection(index + paste.length(), Quill.sources.SILENT);
        }
      }
      onCaptureCopy(e) {
        let isCut = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (e.defaultPrevented) return;
        e.preventDefault();
        const [range] = this.quill.selection.getRange();
        if (range == null) return;
        const {
          html,
          text
        } = this.onCopy(range, isCut);
        e.clipboardData?.setData('text/plain', text);
        e.clipboardData?.setData('text/html', html);
        if (isCut) {
          deleteRange({
            range,
            quill: this.quill
          });
        }
      }

      /*
       * https://www.iana.org/assignments/media-types/text/uri-list
       */
      normalizeURIList(urlList) {
        return urlList.split(/\r?\n/)
        // Ignore all comments
        .filter(url => url[0] !== '#').join('\n');
      }
      onCapturePaste(e) {
        if (e.defaultPrevented || !this.quill.isEnabled()) return;
        e.preventDefault();
        const range = this.quill.getSelection(true);
        if (range == null) return;
        const html = e.clipboardData?.getData('text/html');
        let text = e.clipboardData?.getData('text/plain');
        if (!html && !text) {
          const urlList = e.clipboardData?.getData('text/uri-list');
          if (urlList) {
            text = this.normalizeURIList(urlList);
          }
        }
        const files = Array.from(e.clipboardData?.files || []);
        if (!html && files.length > 0) {
          this.quill.uploader.upload(range, files);
          return;
        }
        if (html && files.length > 0) {
          const doc = new DOMParser().parseFromString(html, 'text/html');
          if (doc.body.childElementCount === 1 && doc.body.firstElementChild?.tagName === 'IMG') {
            this.quill.uploader.upload(range, files);
            return;
          }
        }
        this.onPaste(range, {
          html,
          text
        });
      }
      onCopy(range) {
        const text = this.quill.getText(range);
        const html = this.quill.getSemanticHTML(range);
        return {
          html,
          text
        };
      }
      onPaste(range, _ref3) {
        let {
          text,
          html
        } = _ref3;
        const formats = this.quill.getFormat(range.index);
        const pastedDelta = this.convert({
          text,
          html
        }, formats);
        debug$1.log('onPaste', pastedDelta, {
          text,
          html
        });
        const delta = new Delta$3().retain(range.index).delete(range.length).concat(pastedDelta);
        this.quill.updateContents(delta, Quill.sources.USER);
        // range.length contributes to delta.length()
        this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);
        this.quill.scrollSelectionIntoView();
      }
      prepareMatching(container, nodeMatches) {
        const elementMatchers = [];
        const textMatchers = [];
        this.matchers.forEach(pair => {
          const [selector, matcher] = pair;
          switch (selector) {
            case Node.TEXT_NODE:
              textMatchers.push(matcher);
              break;
            case Node.ELEMENT_NODE:
              elementMatchers.push(matcher);
              break;
            default:
              Array.from(container.querySelectorAll(selector)).forEach(node => {
                if (nodeMatches.has(node)) {
                  const matches = nodeMatches.get(node);
                  matches?.push(matcher);
                } else {
                  nodeMatches.set(node, [matcher]);
                }
              });
              break;
          }
        });
        return [elementMatchers, textMatchers];
      }
    }
    function applyFormat(delta, format, value, scroll) {
      if (!scroll.query(format)) {
        return delta;
      }
      return delta.reduce((newDelta, op) => {
        if (!op.insert) return newDelta;
        if (op.attributes && op.attributes[format]) {
          return newDelta.push(op);
        }
        const formats = value ? {
          [format]: value
        } : {};
        return newDelta.insert(op.insert, {
          ...formats,
          ...op.attributes
        });
      }, new Delta$3());
    }
    function deltaEndsWith(delta, text) {
      let endText = '';
      for (let i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i // eslint-disable-line no-plusplus
      ) {
        const op = delta.ops[i];
        if (typeof op.insert !== 'string') break;
        endText = op.insert + endText;
      }
      return endText.slice(-1 * text.length) === text;
    }
    function isLine(node, scroll) {
      if (!(node instanceof Element)) return false;
      const match = scroll.query(node);
      // @ts-expect-error
      if (match && match.prototype instanceof EmbedBlot$1) return false;
      return ['address', 'article', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'iframe', 'li', 'main', 'nav', 'ol', 'output', 'p', 'pre', 'section', 'table', 'td', 'tr', 'ul', 'video'].includes(node.tagName.toLowerCase());
    }
    function isBetweenInlineElements(node, scroll) {
      return node.previousElementSibling && node.nextElementSibling && !isLine(node.previousElementSibling, scroll) && !isLine(node.nextElementSibling, scroll);
    }
    const preNodes = new WeakMap();
    function isPre(node) {
      if (node == null) return false;
      if (!preNodes.has(node)) {
        // @ts-expect-error
        if (node.tagName === 'PRE') {
          preNodes.set(node, true);
        } else {
          preNodes.set(node, isPre(node.parentNode));
        }
      }
      return preNodes.get(node);
    }
    function traverse(scroll, node, elementMatchers, textMatchers, nodeMatches) {
      // Post-order
      if (node.nodeType === node.TEXT_NODE) {
        return textMatchers.reduce((delta, matcher) => {
          return matcher(node, delta, scroll);
        }, new Delta$3());
      }
      if (node.nodeType === node.ELEMENT_NODE) {
        return Array.from(node.childNodes || []).reduce((delta, childNode) => {
          let childrenDelta = traverse(scroll, childNode, elementMatchers, textMatchers, nodeMatches);
          if (childNode.nodeType === node.ELEMENT_NODE) {
            childrenDelta = elementMatchers.reduce((reducedDelta, matcher) => {
              return matcher(childNode, reducedDelta, scroll);
            }, childrenDelta);
            childrenDelta = (nodeMatches.get(childNode) || []).reduce((reducedDelta, matcher) => {
              return matcher(childNode, reducedDelta, scroll);
            }, childrenDelta);
          }
          return delta.concat(childrenDelta);
        }, new Delta$3());
      }
      return new Delta$3();
    }
    function createMatchAlias(format) {
      return (_node, delta, scroll) => {
        return applyFormat(delta, format, true, scroll);
      };
    }
    function matchAttributor(node, delta, scroll) {
      const attributes = Attributor.keys(node);
      const classes = ClassAttributor$1.keys(node);
      const styles = StyleAttributor$1.keys(node);
      const formats = {};
      attributes.concat(classes).concat(styles).forEach(name => {
        let attr = scroll.query(name, Scope.ATTRIBUTE);
        if (attr != null) {
          formats[attr.attrName] = attr.value(node);
          if (formats[attr.attrName]) return;
        }
        attr = ATTRIBUTE_ATTRIBUTORS[name];
        if (attr != null && (attr.attrName === name || attr.keyName === name)) {
          formats[attr.attrName] = attr.value(node) || undefined;
        }
        attr = STYLE_ATTRIBUTORS[name];
        if (attr != null && (attr.attrName === name || attr.keyName === name)) {
          attr = STYLE_ATTRIBUTORS[name];
          formats[attr.attrName] = attr.value(node) || undefined;
        }
      });
      return Object.entries(formats).reduce((newDelta, _ref4) => {
        let [name, value] = _ref4;
        return applyFormat(newDelta, name, value, scroll);
      }, delta);
    }
    function matchBlot(node, delta, scroll) {
      const match = scroll.query(node);
      if (match == null) return delta;
      // @ts-expect-error
      if (match.prototype instanceof EmbedBlot$1) {
        const embed = {};
        // @ts-expect-error
        const value = match.value(node);
        if (value != null) {
          // @ts-expect-error
          embed[match.blotName] = value;
          // @ts-expect-error
          return new Delta$3().insert(embed, match.formats(node, scroll));
        }
      } else {
        // @ts-expect-error
        if (match.prototype instanceof BlockBlot$1 && !deltaEndsWith(delta, '\n')) {
          delta.insert('\n');
        }
        if ('blotName' in match && 'formats' in match && typeof match.formats === 'function') {
          return applyFormat(delta, match.blotName, match.formats(node, scroll), scroll);
        }
      }
      return delta;
    }
    function matchBreak(node, delta) {
      if (!deltaEndsWith(delta, '\n')) {
        delta.insert('\n');
      }
      return delta;
    }
    function matchCodeBlock(node, delta, scroll) {
      const match = scroll.query('code-block');
      const language = match && 'formats' in match && typeof match.formats === 'function' ? match.formats(node, scroll) : true;
      return applyFormat(delta, 'code-block', language, scroll);
    }
    function matchIgnore() {
      return new Delta$3();
    }
    function matchIndent(node, delta, scroll) {
      const match = scroll.query(node);
      if (match == null ||
      // @ts-expect-error
      match.blotName !== 'list' || !deltaEndsWith(delta, '\n')) {
        return delta;
      }
      let indent = -1;
      let parent = node.parentNode;
      while (parent != null) {
        // @ts-expect-error
        if (['OL', 'UL'].includes(parent.tagName)) {
          indent += 1;
        }
        parent = parent.parentNode;
      }
      if (indent <= 0) return delta;
      return delta.reduce((composed, op) => {
        if (!op.insert) return composed;
        if (op.attributes && typeof op.attributes.indent === 'number') {
          return composed.push(op);
        }
        return composed.insert(op.insert, {
          indent,
          ...(op.attributes || {})
        });
      }, new Delta$3());
    }
    function matchList(node, delta, scroll) {
      // @ts-expect-error
      const list = node.tagName === 'OL' ? 'ordered' : 'bullet';
      return applyFormat(delta, 'list', list, scroll);
    }
    function matchNewline(node, delta, scroll) {
      if (!deltaEndsWith(delta, '\n')) {
        if (isLine(node, scroll) && (node.childNodes.length > 0 || node instanceof HTMLParagraphElement)) {
          return delta.insert('\n');
        }
        if (delta.length() > 0 && node.nextSibling) {
          let nextSibling = node.nextSibling;
          while (nextSibling != null) {
            if (isLine(nextSibling, scroll)) {
              return delta.insert('\n');
            }
            const match = scroll.query(nextSibling);
            // @ts-expect-error
            if (match && match.prototype instanceof BlockEmbed$1) {
              return delta.insert('\n');
            }
            nextSibling = nextSibling.firstChild;
          }
        }
      }
      return delta;
    }
    function matchStyles(node, delta, scroll) {
      const formats = {};
      const style = node.style || {};
      if (style.fontStyle === 'italic') {
        formats.italic = true;
      }
      if (style.textDecoration === 'underline') {
        formats.underline = true;
      }
      if (style.textDecoration === 'line-through') {
        formats.strike = true;
      }
      if (style.fontWeight?.startsWith('bold') ||
      // @ts-expect-error Fix me later
      parseInt(style.fontWeight, 10) >= 700) {
        formats.bold = true;
      }
      delta = Object.entries(formats).reduce((newDelta, _ref5) => {
        let [name, value] = _ref5;
        return applyFormat(newDelta, name, value, scroll);
      }, delta);
      // @ts-expect-error
      if (parseFloat(style.textIndent || 0) > 0) {
        // Could be 0.5in
        return new Delta$3().insert('\t').concat(delta);
      }
      return delta;
    }
    function matchTable$1(node, delta, scroll) {
      const table = node.parentElement?.tagName === 'TABLE' ? node.parentElement : node.parentElement?.parentElement;
      if (table != null) {
        const rows = Array.from(table.querySelectorAll('tr'));
        const row = rows.indexOf(node) + 1;
        return applyFormat(delta, 'table', row, scroll);
      }
      return delta;
    }
    function matchText(node, delta, scroll) {
      // @ts-expect-error
      let text = node.data;
      // Word represents empty line with <o:p>&nbsp;</o:p>
      if (node.parentElement?.tagName === 'O:P') {
        return delta.insert(text.trim());
      }
      if (!isPre(node)) {
        if (text.trim().length === 0 && text.includes('\n') && !isBetweenInlineElements(node, scroll)) {
          return delta;
        }
        const replacer = (collapse, match) => {
          const replaced = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
          return replaced.length < 1 && collapse ? ' ' : replaced;
        };
        text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
        text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
        if (node.previousSibling == null && node.parentElement != null && isLine(node.parentElement, scroll) || node.previousSibling instanceof Element && isLine(node.previousSibling, scroll)) {
          text = text.replace(/^\s+/, replacer.bind(replacer, false));
        }
        if (node.nextSibling == null && node.parentElement != null && isLine(node.parentElement, scroll) || node.nextSibling instanceof Element && isLine(node.nextSibling, scroll)) {
          text = text.replace(/\s+$/, replacer.bind(replacer, false));
        }
      }
      return delta.insert(text);
    }

    class History extends Module$5 {
      static DEFAULTS = {
        delay: 1000,
        maxStack: 100,
        userOnly: false
      };
      lastRecorded = 0;
      ignoreChange = false;
      stack = {
        undo: [],
        redo: []
      };
      currentRange = null;
      constructor(quill, options) {
        super(quill, options);
        this.quill.on(Quill.events.EDITOR_CHANGE, (eventName, value, oldValue, source) => {
          if (eventName === Quill.events.SELECTION_CHANGE) {
            if (value && source !== Quill.sources.SILENT) {
              this.currentRange = value;
            }
          } else if (eventName === Quill.events.TEXT_CHANGE) {
            if (!this.ignoreChange) {
              if (!this.options.userOnly || source === Quill.sources.USER) {
                this.record(value, oldValue);
              } else {
                this.transform(value);
              }
            }
            this.currentRange = transformRange(this.currentRange, value);
          }
        });
        this.quill.keyboard.addBinding({
          key: 'z',
          shortKey: true
        }, this.undo.bind(this));
        this.quill.keyboard.addBinding({
          key: ['z', 'Z'],
          shortKey: true,
          shiftKey: true
        }, this.redo.bind(this));
        if (/Win/i.test(navigator.platform)) {
          this.quill.keyboard.addBinding({
            key: 'y',
            shortKey: true
          }, this.redo.bind(this));
        }
        this.quill.root.addEventListener('beforeinput', event => {
          if (event.inputType === 'historyUndo') {
            this.undo();
            event.preventDefault();
          } else if (event.inputType === 'historyRedo') {
            this.redo();
            event.preventDefault();
          }
        });
      }
      change(source, dest) {
        if (this.stack[source].length === 0) return;
        const item = this.stack[source].pop();
        if (!item) return;
        const base = this.quill.getContents();
        const inverseDelta = item.delta.invert(base);
        this.stack[dest].push({
          delta: inverseDelta,
          range: transformRange(item.range, inverseDelta)
        });
        this.lastRecorded = 0;
        this.ignoreChange = true;
        this.quill.updateContents(item.delta, Quill.sources.USER);
        this.ignoreChange = false;
        this.restoreSelection(item);
      }
      clear() {
        this.stack = {
          undo: [],
          redo: []
        };
      }
      cutoff() {
        this.lastRecorded = 0;
      }
      record(changeDelta, oldDelta) {
        if (changeDelta.ops.length === 0) return;
        this.stack.redo = [];
        let undoDelta = changeDelta.invert(oldDelta);
        let undoRange = this.currentRange;
        const timestamp = Date.now();
        if (
        // @ts-expect-error Fix me later
        this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
          const item = this.stack.undo.pop();
          if (item) {
            undoDelta = undoDelta.compose(item.delta);
            undoRange = item.range;
          }
        } else {
          this.lastRecorded = timestamp;
        }
        if (undoDelta.length() === 0) return;
        this.stack.undo.push({
          delta: undoDelta,
          range: undoRange
        });
        // @ts-expect-error Fix me later
        if (this.stack.undo.length > this.options.maxStack) {
          this.stack.undo.shift();
        }
      }
      redo() {
        this.change('redo', 'undo');
      }
      transform(delta) {
        transformStack(this.stack.undo, delta);
        transformStack(this.stack.redo, delta);
      }
      undo() {
        this.change('undo', 'redo');
      }
      restoreSelection(stackItem) {
        if (stackItem.range) {
          this.quill.setSelection(stackItem.range, Quill.sources.USER);
        } else {
          const index = getLastChangeIndex(this.quill.scroll, stackItem.delta);
          this.quill.setSelection(index, Quill.sources.USER);
        }
      }
    }
    function transformStack(stack, delta) {
      let remoteDelta = delta;
      for (let i = stack.length - 1; i >= 0; i -= 1) {
        const oldItem = stack[i];
        stack[i] = {
          delta: remoteDelta.transform(oldItem.delta, true),
          range: oldItem.range && transformRange(oldItem.range, remoteDelta)
        };
        remoteDelta = oldItem.delta.transform(remoteDelta);
        if (stack[i].delta.length() === 0) {
          stack.splice(i, 1);
        }
      }
    }
    function endsWithNewlineChange(scroll, delta) {
      const lastOp = delta.ops[delta.ops.length - 1];
      if (lastOp == null) return false;
      if (lastOp.insert != null) {
        return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
      }
      if (lastOp.attributes != null) {
        return Object.keys(lastOp.attributes).some(attr => {
          return scroll.query(attr, Scope.BLOCK) != null;
        });
      }
      return false;
    }
    function getLastChangeIndex(scroll, delta) {
      const deleteLength = delta.reduce((length, op) => {
        return length + (op.delete || 0);
      }, 0);
      let changeIndex = delta.length() - deleteLength;
      if (endsWithNewlineChange(scroll, delta)) {
        changeIndex -= 1;
      }
      return changeIndex;
    }
    function transformRange(range, delta) {
      if (!range) return range;
      const start = delta.transformPosition(range.index);
      const end = delta.transformPosition(range.index + range.length);
      return {
        index: start,
        length: end - start
      };
    }

    class Uploader extends Module$5 {
      constructor(quill, options) {
        super(quill, options);
        quill.root.addEventListener('drop', e => {
          e.preventDefault();
          let native = null;
          if (document.caretRangeFromPoint) {
            native = document.caretRangeFromPoint(e.clientX, e.clientY);
            // @ts-expect-error
          } else if (document.caretPositionFromPoint) {
            // @ts-expect-error
            const position = document.caretPositionFromPoint(e.clientX, e.clientY);
            native = document.createRange();
            native.setStart(position.offsetNode, position.offset);
            native.setEnd(position.offsetNode, position.offset);
          }
          const normalized = native && quill.selection.normalizeNative(native);
          if (normalized) {
            const range = quill.selection.normalizedToRange(normalized);
            if (e.dataTransfer?.files) {
              this.upload(range, e.dataTransfer.files);
            }
          }
        });
      }
      upload(range, files) {
        const uploads = [];
        Array.from(files).forEach(file => {
          if (file && this.options.mimetypes?.includes(file.type)) {
            uploads.push(file);
          }
        });
        if (uploads.length > 0) {
          // @ts-expect-error Fix me later
          this.options.handler.call(this, range, uploads);
        }
      }
    }
    Uploader.DEFAULTS = {
      mimetypes: ['image/png', 'image/jpeg'],
      handler(range, files) {
        const promises = files.map(file => {
          return new Promise(resolve => {
            const reader = new FileReader();
            reader.onload = e => {
              // @ts-expect-error Fix me later
              resolve(e.target.result);
            };
            reader.readAsDataURL(file);
          });
        });
        Promise.all(promises).then(images => {
          const update = images.reduce((delta, image) => {
            return delta.insert({
              image
            });
          }, new Delta$3().retain(range.index).delete(range.length));
          this.quill.updateContents(update, Emitter.sources.USER);
          this.quill.setSelection(range.index + images.length, Emitter.sources.SILENT);
        });
      }
    };

    const INSERT_TYPES = ['insertText', 'insertReplacementText'];
    class Input extends Module$5 {
      constructor(quill, options) {
        super(quill, options);
        quill.root.addEventListener('beforeinput', event => {
          this.handleBeforeInput(event);
        });

        // Gboard with English input on Android triggers `compositionstart` sometimes even
        // users are not going to type anything.
        if (!/Android/i.test(navigator.userAgent)) {
          quill.on(Quill.events.COMPOSITION_BEFORE_START, () => {
            this.handleCompositionStart();
          });
        }
      }
      deleteRange(range) {
        deleteRange({
          range,
          quill: this.quill
        });
      }
      replaceText(range) {
        let text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        if (range.length === 0) return false;
        if (text) {
          // Follow the native behavior that inherits the formats of the first character
          const formats = this.quill.getFormat(range.index, 1);
          this.deleteRange(range);
          this.quill.updateContents(new Delta$3().retain(range.index).insert(text, formats), Quill.sources.USER);
        } else {
          this.deleteRange(range);
        }
        this.quill.setSelection(range.index + text.length, 0, Quill.sources.SILENT);
        return true;
      }
      handleBeforeInput(event) {
        if (this.quill.composition.isComposing || event.defaultPrevented || !INSERT_TYPES.includes(event.inputType)) {
          return;
        }
        const staticRange = event.getTargetRanges ? event.getTargetRanges()[0] : null;
        if (!staticRange || staticRange.collapsed === true) {
          return;
        }
        const text = getPlainTextFromInputEvent(event);
        if (text == null) {
          return;
        }
        const normalized = this.quill.selection.normalizeNative(staticRange);
        const range = normalized ? this.quill.selection.normalizedToRange(normalized) : null;
        if (range && this.replaceText(range, text)) {
          event.preventDefault();
        }
      }
      handleCompositionStart() {
        const range = this.quill.getSelection();
        if (range) {
          this.replaceText(range);
        }
      }
    }
    function getPlainTextFromInputEvent(event) {
      // When `inputType` is "insertText":
      // - `event.data` should be string (Safari uses `event.dataTransfer`).
      // - `event.dataTransfer` should be null.
      // When `inputType` is "insertReplacementText":
      // - `event.data` should be null.
      // - `event.dataTransfer` should contain "text/plain" data.

      if (typeof event.data === 'string') {
        return event.data;
      }
      if (event.dataTransfer?.types.includes('text/plain')) {
        return event.dataTransfer.getData('text/plain');
      }
      return null;
    }

    const isMac = /Mac/i.test(navigator.platform);

    // Export for testing
    const TTL_FOR_VALID_SELECTION_CHANGE = 100;

    // A loose check to determine if the shortcut can move the caret before a UI node:
    // <ANY_PARENT>[CARET]<div class="ql-ui"></div>[CONTENT]</ANY_PARENT>
    const canMoveCaretBeforeUINode = event => {
      if (event.key === 'ArrowLeft' || event.key === 'ArrowRight' ||
      // RTL scripts or moving from the end of the previous line
      event.key === 'ArrowUp' || event.key === 'ArrowDown' || event.key === 'Home') {
        return true;
      }
      if (isMac && event.key === 'a' && event.ctrlKey === true) {
        return true;
      }
      return false;
    };
    class UINode extends Module$5 {
      isListening = false;
      selectionChangeDeadline = 0;
      constructor(quill, options) {
        super(quill, options);
        this.handleArrowKeys();
        this.handleNavigationShortcuts();
      }
      handleArrowKeys() {
        this.quill.keyboard.addBinding({
          key: ['ArrowLeft', 'ArrowRight'],
          offset: 0,
          shiftKey: null,
          handler(range, _ref) {
            let {
              line,
              event
            } = _ref;
            if (!(line instanceof ParentBlot$1) || !line.uiNode) {
              return true;
            }
            const isRTL = getComputedStyle(line.domNode)['direction'] === 'rtl';
            if (isRTL && event.key !== 'ArrowRight' || !isRTL && event.key !== 'ArrowLeft') {
              return true;
            }
            this.quill.setSelection(range.index - 1, range.length + (event.shiftKey ? 1 : 0), Quill.sources.USER);
            return false;
          }
        });
      }
      handleNavigationShortcuts() {
        this.quill.root.addEventListener('keydown', event => {
          if (!event.defaultPrevented && canMoveCaretBeforeUINode(event)) {
            this.ensureListeningToSelectionChange();
          }
        });
      }

      /**
       * We only listen to the `selectionchange` event when
       * there is an intention of moving the caret to the beginning using shortcuts.
       * This is primarily implemented to prevent infinite loops, as we are changing
       * the selection within the handler of a `selectionchange` event.
       */
      ensureListeningToSelectionChange() {
        this.selectionChangeDeadline = Date.now() + TTL_FOR_VALID_SELECTION_CHANGE;
        if (this.isListening) return;
        this.isListening = true;
        const listener = () => {
          this.isListening = false;
          if (Date.now() <= this.selectionChangeDeadline) {
            this.handleSelectionChange();
          }
        };
        document.addEventListener('selectionchange', listener, {
          once: true
        });
      }
      handleSelectionChange() {
        const selection = document.getSelection();
        if (!selection) return;
        const range = selection.getRangeAt(0);
        if (range.collapsed !== true || range.startOffset !== 0) return;
        const line = this.quill.scroll.find(range.startContainer);
        if (!(line instanceof ParentBlot$1) || !line.uiNode) return;
        const newRange = document.createRange();
        newRange.setStartAfter(line.uiNode);
        newRange.setEndAfter(line.uiNode);
        selection.removeAllRanges();
        selection.addRange(newRange);
      }
    }

    Quill.register({
      'blots/block': Block$3,
      'blots/block/embed': BlockEmbed$1,
      'blots/break': Break$1,
      'blots/container': Container$1,
      'blots/cursor': Cursor,
      'blots/embed': Embed,
      'blots/inline': Inline,
      'blots/scroll': Scroll,
      'blots/text': Text$1,
      'modules/clipboard': Clipboard,
      'modules/history': History,
      'modules/keyboard': Keyboard,
      'modules/uploader': Uploader,
      'modules/input': Input,
      'modules/uiNode': UINode
    });

    class IndentAttributor extends ClassAttributor$1 {
      add(node, value) {
        let normalizedValue = 0;
        if (value === '+1' || value === '-1') {
          const indent = this.value(node) || 0;
          normalizedValue = value === '+1' ? indent + 1 : indent - 1;
        } else if (typeof value === 'number') {
          normalizedValue = value;
        }
        if (normalizedValue === 0) {
          this.remove(node);
          return true;
        }
        return super.add(node, normalizedValue.toString());
      }
      canAdd(node, value) {
        return super.canAdd(node, value) || super.canAdd(node, parseInt(value, 10));
      }
      value(node) {
        return parseInt(super.value(node), 10) || undefined; // Don't return NaN
      }
    }
    const IndentClass = new IndentAttributor('indent', 'ql-indent', {
      scope: Scope.BLOCK,
      // @ts-expect-error
      whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
    });

    class Blockquote extends Block$3 {
      static blotName = 'blockquote';
      static tagName = 'blockquote';
    }

    let Header$1 = class Header extends Block$3 {
      static blotName = 'header';
      static tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];
      static formats(domNode) {
        return this.tagName.indexOf(domNode.tagName) + 1;
      }
    };

    class ListContainer extends Container$1 {}
    ListContainer.blotName = 'list-container';
    ListContainer.tagName = 'OL';
    let ListItem$1 = class ListItem extends Block$3 {
      static create(value) {
        const node = super.create();
        node.setAttribute('data-list', value);
        return node;
      }
      static formats(domNode) {
        return domNode.getAttribute('data-list') || undefined;
      }
      static register() {
        Quill.register(ListContainer);
      }
      constructor(scroll, domNode) {
        super(scroll, domNode);
        const ui = domNode.ownerDocument.createElement('span');
        const listEventHandler = e => {
          if (!scroll.isEnabled()) return;
          const format = this.statics.formats(domNode, scroll);
          if (format === 'checked') {
            this.format('list', 'unchecked');
            e.preventDefault();
          } else if (format === 'unchecked') {
            this.format('list', 'checked');
            e.preventDefault();
          }
        };
        ui.addEventListener('mousedown', listEventHandler);
        ui.addEventListener('touchstart', listEventHandler);
        this.attachUI(ui);
      }
      format(name, value) {
        if (name === this.statics.blotName && value) {
          this.domNode.setAttribute('data-list', value);
        } else {
          super.format(name, value);
        }
      }
    };
    ListItem$1.blotName = 'list';
    ListItem$1.tagName = 'LI';
    ListContainer.allowedChildren = [ListItem$1];
    ListItem$1.requiredContainer = ListContainer;

    class Bold extends Inline {
      static blotName = 'bold';
      static tagName = ['STRONG', 'B'];
      static create() {
        return super.create();
      }
      static formats() {
        return true;
      }
      optimize(context) {
        super.optimize(context);
        if (this.domNode.tagName !== this.statics.tagName[0]) {
          this.replaceWith(this.statics.blotName);
        }
      }
    }

    class Italic extends Bold {
      static blotName = 'italic';
      static tagName = ['EM', 'I'];
    }

    class Link extends Inline {
      static blotName = 'link';
      static tagName = 'A';
      static SANITIZED_URL = 'about:blank';
      static PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel', 'sms'];
      static create(value) {
        const node = super.create(value);
        node.setAttribute('href', this.sanitize(value));
        node.setAttribute('rel', 'noopener noreferrer');
        node.setAttribute('target', '_blank');
        return node;
      }
      static formats(domNode) {
        return domNode.getAttribute('href');
      }
      static sanitize(url) {
        return sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
      }
      format(name, value) {
        if (name !== this.statics.blotName || !value) {
          super.format(name, value);
        } else {
          // @ts-expect-error
          this.domNode.setAttribute('href', this.constructor.sanitize(value));
        }
      }
    }
    function sanitize(url, protocols) {
      const anchor = document.createElement('a');
      anchor.href = url;
      const protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
      return protocols.indexOf(protocol) > -1;
    }

    class Script extends Inline {
      static blotName = 'script';
      static tagName = ['SUB', 'SUP'];
      static create(value) {
        if (value === 'super') {
          return document.createElement('sup');
        }
        if (value === 'sub') {
          return document.createElement('sub');
        }
        return super.create(value);
      }
      static formats(domNode) {
        if (domNode.tagName === 'SUB') return 'sub';
        if (domNode.tagName === 'SUP') return 'super';
        return undefined;
      }
    }

    class Strike extends Bold {
      static blotName = 'strike';
      static tagName = ['S', 'STRIKE'];
    }

    class Underline extends Inline {
      static blotName = 'underline';
      static tagName = 'U';
    }

    class Formula extends Embed {
      static blotName = 'formula';
      static className = 'ql-formula';
      static tagName = 'SPAN';
      static create(value) {
        // @ts-expect-error
        if (window.katex == null) {
          throw new Error('Formula module requires KaTeX.');
        }
        const node = super.create(value);
        if (typeof value === 'string') {
          // @ts-expect-error
          window.katex.render(value, node, {
            throwOnError: false,
            errorColor: '#f00'
          });
          node.setAttribute('data-value', value);
        }
        return node;
      }
      static value(domNode) {
        return domNode.getAttribute('data-value');
      }
      html() {
        const {
          formula
        } = this.value();
        return `<span>${formula}</span>`;
      }
    }

    const ATTRIBUTES$3 = ['alt', 'height', 'width'];
    let Image$1 = class Image extends EmbedBlot$1 {
      static blotName = 'image';
      static tagName = 'IMG';
      static create(value) {
        const node = super.create(value);
        if (typeof value === 'string') {
          node.setAttribute('src', this.sanitize(value));
        }
        return node;
      }
      static formats(domNode) {
        return ATTRIBUTES$3.reduce((formats, attribute) => {
          if (domNode.hasAttribute(attribute)) {
            formats[attribute] = domNode.getAttribute(attribute);
          }
          return formats;
        }, {});
      }
      static match(url) {
        return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
      }
      static sanitize(url) {
        return sanitize(url, ['http', 'https', 'data']) ? url : '//:0';
      }
      static value(domNode) {
        return domNode.getAttribute('src');
      }
      format(name, value) {
        if (ATTRIBUTES$3.indexOf(name) > -1) {
          if (value) {
            this.domNode.setAttribute(name, value);
          } else {
            this.domNode.removeAttribute(name);
          }
        } else {
          super.format(name, value);
        }
      }
    };

    const ATTRIBUTES$2 = ['height', 'width'];
    class Video extends BlockEmbed$1 {
      static blotName = 'video';
      static className = 'ql-video';
      static tagName = 'IFRAME';
      static create(value) {
        const node = super.create(value);
        node.setAttribute('frameborder', '0');
        node.setAttribute('allowfullscreen', 'true');
        node.setAttribute('src', this.sanitize(value));
        return node;
      }
      static formats(domNode) {
        return ATTRIBUTES$2.reduce((formats, attribute) => {
          if (domNode.hasAttribute(attribute)) {
            formats[attribute] = domNode.getAttribute(attribute);
          }
          return formats;
        }, {});
      }
      static sanitize(url) {
        return Link.sanitize(url);
      }
      static value(domNode) {
        return domNode.getAttribute('src');
      }
      format(name, value) {
        if (ATTRIBUTES$2.indexOf(name) > -1) {
          if (value) {
            this.domNode.setAttribute(name, value);
          } else {
            this.domNode.removeAttribute(name);
          }
        } else {
          super.format(name, value);
        }
      }
      html() {
        const {
          video
        } = this.value();
        return `<a href="${video}">${video}</a>`;
      }
    }

    const TokenAttributor = new ClassAttributor$1('code-token', 'hljs', {
      scope: Scope.INLINE
    });
    class CodeToken extends Inline {
      static formats(node, scroll) {
        while (node != null && node !== scroll.domNode) {
          if (node.classList && node.classList.contains(CodeBlock$1.className)) {
            // @ts-expect-error
            return super.formats(node, scroll);
          }
          // @ts-expect-error
          node = node.parentNode;
        }
        return undefined;
      }
      constructor(scroll, domNode, value) {
        // @ts-expect-error
        super(scroll, domNode, value);
        TokenAttributor.add(this.domNode, value);
      }
      format(format, value) {
        if (format !== CodeToken.blotName) {
          super.format(format, value);
        } else if (value) {
          TokenAttributor.add(this.domNode, value);
        } else {
          TokenAttributor.remove(this.domNode);
          this.domNode.classList.remove(this.statics.className);
        }
      }
      optimize() {
        // @ts-expect-error
        super.optimize(...arguments);
        if (!TokenAttributor.value(this.domNode)) {
          this.unwrap();
        }
      }
    }
    CodeToken.blotName = 'code-token';
    CodeToken.className = 'ql-token';
    class SyntaxCodeBlock extends CodeBlock$1 {
      static create(value) {
        const domNode = super.create(value);
        if (typeof value === 'string') {
          domNode.setAttribute('data-language', value);
        }
        return domNode;
      }
      static formats(domNode) {
        // @ts-expect-error
        return domNode.getAttribute('data-language') || 'plain';
      }
      static register() {} // Syntax module will register

      format(name, value) {
        if (name === this.statics.blotName && value) {
          // @ts-expect-error
          this.domNode.setAttribute('data-language', value);
        } else {
          super.format(name, value);
        }
      }
      replaceWith(name, value) {
        this.formatAt(0, this.length(), CodeToken.blotName, false);
        return super.replaceWith(name, value);
      }
    }
    class SyntaxCodeBlockContainer extends CodeBlockContainer {
      attach() {
        super.attach();
        this.forceNext = false;
        // @ts-expect-error
        this.scroll.emitMount(this);
      }
      format(name, value) {
        if (name === SyntaxCodeBlock.blotName) {
          this.forceNext = true;
          this.children.forEach(child => {
            // @ts-expect-error
            child.format(name, value);
          });
        }
      }
      formatAt(index, length, name, value) {
        if (name === SyntaxCodeBlock.blotName) {
          this.forceNext = true;
        }
        super.formatAt(index, length, name, value);
      }
      highlight(highlight) {
        let forced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (this.children.head == null) return;
        const nodes = Array.from(this.domNode.childNodes).filter(node => node !== this.uiNode);
        const text = `${nodes.map(node => node.textContent).join('\n')}\n`;
        const language = SyntaxCodeBlock.formats(this.children.head.domNode);
        if (forced || this.forceNext || this.cachedText !== text) {
          if (text.trim().length > 0 || this.cachedText == null) {
            const oldDelta = this.children.reduce((delta, child) => {
              // @ts-expect-error
              return delta.concat(blockDelta(child, false));
            }, new Delta$3());
            const delta = highlight(text, language);
            oldDelta.diff(delta).reduce((index, _ref) => {
              let {
                retain,
                attributes
              } = _ref;
              // Should be all retains
              if (!retain) return index;
              if (attributes) {
                Object.keys(attributes).forEach(format => {
                  if ([SyntaxCodeBlock.blotName, CodeToken.blotName].includes(format)) {
                    // @ts-expect-error
                    this.formatAt(index, retain, format, attributes[format]);
                  }
                });
              }
              // @ts-expect-error
              return index + retain;
            }, 0);
          }
          this.cachedText = text;
          this.forceNext = false;
        }
      }
      html(index, length) {
        const [codeBlock] = this.children.find(index);
        const language = codeBlock ? SyntaxCodeBlock.formats(codeBlock.domNode) : 'plain';
        return `<pre data-language="${language}">\n${escapeText(this.code(index, length))}\n</pre>`;
      }
      optimize(context) {
        super.optimize(context);
        if (this.parent != null && this.children.head != null && this.uiNode != null) {
          const language = SyntaxCodeBlock.formats(this.children.head.domNode);
          // @ts-expect-error
          if (language !== this.uiNode.value) {
            // @ts-expect-error
            this.uiNode.value = language;
          }
        }
      }
    }
    // @ts-expect-error
    SyntaxCodeBlockContainer.allowedChildren = [SyntaxCodeBlock];
    SyntaxCodeBlock.requiredContainer = SyntaxCodeBlockContainer;
    SyntaxCodeBlock.allowedChildren = [CodeToken, Cursor, Text$1, Break$1];
    const highlight$1 = (lib, language, text) => {
      if (typeof lib.versionString === 'string') {
        const majorVersion = lib.versionString.split('.')[0];
        if (parseInt(majorVersion, 10) >= 11) {
          return lib.highlight(text, {
            language
          }).value;
        }
      }
      return lib.highlight(language, text).value;
    };
    class Syntax extends Module$5 {
      static register() {
        Quill.register(CodeToken, true);
        // @ts-expect-error
        Quill.register(SyntaxCodeBlock, true);
        Quill.register(SyntaxCodeBlockContainer, true);
      }
      constructor(quill, options) {
        super(quill, options);
        if (this.options.hljs == null) {
          throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
        }
        // @ts-expect-error Fix me later
        this.languages = this.options.languages.reduce((memo, _ref2) => {
          let {
            key
          } = _ref2;
          memo[key] = true;
          return memo;
        }, {});
        this.highlightBlot = this.highlightBlot.bind(this);
        this.initListener();
        this.initTimer();
      }
      initListener() {
        this.quill.on(Quill.events.SCROLL_BLOT_MOUNT, blot => {
          if (!(blot instanceof SyntaxCodeBlockContainer)) return;
          const select = this.quill.root.ownerDocument.createElement('select');
          // @ts-expect-error Fix me later
          this.options.languages.forEach(_ref3 => {
            let {
              key,
              label
            } = _ref3;
            const option = select.ownerDocument.createElement('option');
            option.textContent = label;
            option.setAttribute('value', key);
            select.appendChild(option);
          });
          select.addEventListener('change', () => {
            blot.format(SyntaxCodeBlock.blotName, select.value);
            this.quill.root.focus(); // Prevent scrolling
            this.highlight(blot, true);
          });
          if (blot.uiNode == null) {
            blot.attachUI(select);
            if (blot.children.head) {
              select.value = SyntaxCodeBlock.formats(blot.children.head.domNode);
            }
          }
        });
      }
      initTimer() {
        let timer = null;
        this.quill.on(Quill.events.SCROLL_OPTIMIZE, () => {
          if (timer) {
            clearTimeout(timer);
          }
          timer = setTimeout(() => {
            this.highlight();
            timer = null;
          }, this.options.interval);
        });
      }
      highlight() {
        let blot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (this.quill.selection.composing) return;
        this.quill.update(Quill.sources.USER);
        const range = this.quill.getSelection();
        const blots = blot == null ? this.quill.scroll.descendants(SyntaxCodeBlockContainer) : [blot];
        blots.forEach(container => {
          container.highlight(this.highlightBlot, force);
        });
        this.quill.update(Quill.sources.SILENT);
        if (range != null) {
          this.quill.setSelection(range, Quill.sources.SILENT);
        }
      }
      highlightBlot(text) {
        let language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'plain';
        language = this.languages[language] ? language : 'plain';
        if (language === 'plain') {
          return escapeText(text).split('\n').reduce((delta, line, i) => {
            if (i !== 0) {
              delta.insert('\n', {
                [CodeBlock$1.blotName]: language
              });
            }
            return delta.insert(line);
          }, new Delta$3());
        }
        const container = this.quill.root.ownerDocument.createElement('div');
        container.classList.add(CodeBlock$1.className);
        container.innerHTML = highlight$1(this.options.hljs, language, text);
        return traverse(this.quill.scroll, container, [(node, delta) => {
          // @ts-expect-error
          const value = TokenAttributor.value(node);
          if (value) {
            return delta.compose(new Delta$3().retain(delta.length(), {
              [CodeToken.blotName]: value
            }));
          }
          return delta;
        }], [(node, delta) => {
          // @ts-expect-error
          return node.data.split('\n').reduce((memo, nodeText, i) => {
            if (i !== 0) memo.insert('\n', {
              [CodeBlock$1.blotName]: language
            });
            return memo.insert(nodeText);
          }, delta);
        }], new WeakMap());
      }
    }
    Syntax.DEFAULTS = {
      hljs: (() => {
        return window.hljs;
      })(),
      interval: 1000,
      languages: [{
        key: 'plain',
        label: 'Plain'
      }, {
        key: 'bash',
        label: 'Bash'
      }, {
        key: 'cpp',
        label: 'C++'
      }, {
        key: 'cs',
        label: 'C#'
      }, {
        key: 'css',
        label: 'CSS'
      }, {
        key: 'diff',
        label: 'Diff'
      }, {
        key: 'xml',
        label: 'HTML/XML'
      }, {
        key: 'java',
        label: 'Java'
      }, {
        key: 'javascript',
        label: 'JavaScript'
      }, {
        key: 'markdown',
        label: 'Markdown'
      }, {
        key: 'php',
        label: 'PHP'
      }, {
        key: 'python',
        label: 'Python'
      }, {
        key: 'ruby',
        label: 'Ruby'
      }, {
        key: 'sql',
        label: 'SQL'
      }]
    };

    let TableCell$1 = class TableCell extends Block$3 {
      static blotName = 'table';
      static tagName = 'TD';
      static create(value) {
        const node = super.create();
        if (value) {
          node.setAttribute('data-row', value);
        } else {
          node.setAttribute('data-row', tableId());
        }
        return node;
      }
      static formats(domNode) {
        if (domNode.hasAttribute('data-row')) {
          return domNode.getAttribute('data-row');
        }
        return undefined;
      }
      cellOffset() {
        if (this.parent) {
          return this.parent.children.indexOf(this);
        }
        return -1;
      }
      format(name, value) {
        if (name === TableCell.blotName && value) {
          this.domNode.setAttribute('data-row', value);
        } else {
          super.format(name, value);
        }
      }
      row() {
        return this.parent;
      }
      rowOffset() {
        if (this.row()) {
          return this.row().rowOffset();
        }
        return -1;
      }
      table() {
        return this.row() && this.row().table();
      }
    };
    let TableRow$1 = class TableRow extends Container$1 {
      static blotName = 'table-row';
      static tagName = 'TR';
      checkMerge() {
        // @ts-expect-error
        if (super.checkMerge() && this.next.children.head != null) {
          // @ts-expect-error
          const thisHead = this.children.head.formats();
          // @ts-expect-error
          const thisTail = this.children.tail.formats();
          // @ts-expect-error
          const nextHead = this.next.children.head.formats();
          // @ts-expect-error
          const nextTail = this.next.children.tail.formats();
          return thisHead.table === thisTail.table && thisHead.table === nextHead.table && thisHead.table === nextTail.table;
        }
        return false;
      }
      optimize(context) {
        super.optimize(context);
        this.children.forEach(child => {
          if (child.next == null) return;
          const childFormats = child.formats();
          const nextFormats = child.next.formats();
          if (childFormats.table !== nextFormats.table) {
            const next = this.splitAfter(child);
            if (next) {
              // @ts-expect-error TODO: parameters of optimize() should be a optional
              next.optimize();
            }
            // We might be able to merge with prev now
            if (this.prev) {
              // @ts-expect-error TODO: parameters of optimize() should be a optional
              this.prev.optimize();
            }
          }
        });
      }
      rowOffset() {
        if (this.parent) {
          return this.parent.children.indexOf(this);
        }
        return -1;
      }
      table() {
        return this.parent && this.parent.parent;
      }
    };
    let TableBody$1 = class TableBody extends Container$1 {
      static blotName = 'table-body';
      static tagName = 'TBODY';
    };
    let TableContainer$1 = class TableContainer extends Container$1 {
      static blotName = 'table-container';
      static tagName = 'TABLE';
      balanceCells() {
        const rows = this.descendants(TableRow$1);
        const maxColumns = rows.reduce((max, row) => {
          return Math.max(row.children.length, max);
        }, 0);
        rows.forEach(row => {
          new Array(maxColumns - row.children.length).fill(0).forEach(() => {
            let value;
            if (row.children.head != null) {
              value = TableCell$1.formats(row.children.head.domNode);
            }
            const blot = this.scroll.create(TableCell$1.blotName, value);
            row.appendChild(blot);
            // @ts-expect-error TODO: parameters of optimize() should be a optional
            blot.optimize(); // Add break blot
          });
        });
      }
      cells(column) {
        return this.rows().map(row => row.children.at(column));
      }
      deleteColumn(index) {
        // @ts-expect-error
        const [body] = this.descendant(TableBody$1);
        if (body == null || body.children.head == null) return;
        body.children.forEach(row => {
          const cell = row.children.at(index);
          if (cell != null) {
            cell.remove();
          }
        });
      }
      insertColumn(index) {
        // @ts-expect-error
        const [body] = this.descendant(TableBody$1);
        if (body == null || body.children.head == null) return;
        body.children.forEach(row => {
          const ref = row.children.at(index);
          // @ts-expect-error
          const value = TableCell$1.formats(row.children.head.domNode);
          const cell = this.scroll.create(TableCell$1.blotName, value);
          row.insertBefore(cell, ref);
        });
      }
      insertRow(index) {
        // @ts-expect-error
        const [body] = this.descendant(TableBody$1);
        if (body == null || body.children.head == null) return;
        const id = tableId();
        const row = this.scroll.create(TableRow$1.blotName);
        body.children.head.children.forEach(() => {
          const cell = this.scroll.create(TableCell$1.blotName, id);
          row.appendChild(cell);
        });
        const ref = body.children.at(index);
        body.insertBefore(row, ref);
      }
      rows() {
        const body = this.children.head;
        if (body == null) return [];
        return body.children.map(row => row);
      }
    };
    TableContainer$1.allowedChildren = [TableBody$1];
    TableBody$1.requiredContainer = TableContainer$1;
    TableBody$1.allowedChildren = [TableRow$1];
    TableRow$1.requiredContainer = TableBody$1;
    TableRow$1.allowedChildren = [TableCell$1];
    TableCell$1.requiredContainer = TableRow$1;
    function tableId() {
      const id = Math.random().toString(36).slice(2, 6);
      return `row-${id}`;
    }

    class Table extends Module$5 {
      static register() {
        Quill.register(TableCell$1);
        Quill.register(TableRow$1);
        Quill.register(TableBody$1);
        Quill.register(TableContainer$1);
      }
      constructor() {
        super(...arguments);
        this.listenBalanceCells();
      }
      balanceTables() {
        this.quill.scroll.descendants(TableContainer$1).forEach(table => {
          table.balanceCells();
        });
      }
      deleteColumn() {
        const [table,, cell] = this.getTable();
        if (cell == null) return;
        // @ts-expect-error
        table.deleteColumn(cell.cellOffset());
        this.quill.update(Quill.sources.USER);
      }
      deleteRow() {
        const [, row] = this.getTable();
        if (row == null) return;
        row.remove();
        this.quill.update(Quill.sources.USER);
      }
      deleteTable() {
        const [table] = this.getTable();
        if (table == null) return;
        // @ts-expect-error
        const offset = table.offset();
        // @ts-expect-error
        table.remove();
        this.quill.update(Quill.sources.USER);
        this.quill.setSelection(offset, Quill.sources.SILENT);
      }
      getTable() {
        let range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.quill.getSelection();
        if (range == null) return [null, null, null, -1];
        const [cell, offset] = this.quill.getLine(range.index);
        if (cell == null || cell.statics.blotName !== TableCell$1.blotName) {
          return [null, null, null, -1];
        }
        const row = cell.parent;
        const table = row.parent.parent;
        // @ts-expect-error
        return [table, row, cell, offset];
      }
      insertColumn(offset) {
        const range = this.quill.getSelection();
        if (!range) return;
        const [table, row, cell] = this.getTable(range);
        if (cell == null) return;
        const column = cell.cellOffset();
        table.insertColumn(column + offset);
        this.quill.update(Quill.sources.USER);
        let shift = row.rowOffset();
        if (offset === 0) {
          shift += 1;
        }
        this.quill.setSelection(range.index + shift, range.length, Quill.sources.SILENT);
      }
      insertColumnLeft() {
        this.insertColumn(0);
      }
      insertColumnRight() {
        this.insertColumn(1);
      }
      insertRow(offset) {
        const range = this.quill.getSelection();
        if (!range) return;
        const [table, row, cell] = this.getTable(range);
        if (cell == null) return;
        const index = row.rowOffset();
        table.insertRow(index + offset);
        this.quill.update(Quill.sources.USER);
        if (offset > 0) {
          this.quill.setSelection(range, Quill.sources.SILENT);
        } else {
          this.quill.setSelection(range.index + row.children.length, range.length, Quill.sources.SILENT);
        }
      }
      insertRowAbove() {
        this.insertRow(0);
      }
      insertRowBelow() {
        this.insertRow(1);
      }
      insertTable(rows, columns) {
        const range = this.quill.getSelection();
        if (range == null) return;
        const delta = new Array(rows).fill(0).reduce(memo => {
          const text = new Array(columns).fill('\n').join('');
          return memo.insert(text, {
            table: tableId()
          });
        }, new Delta$3().retain(range.index));
        this.quill.updateContents(delta, Quill.sources.USER);
        this.quill.setSelection(range.index, Quill.sources.SILENT);
        this.balanceTables();
      }
      listenBalanceCells() {
        this.quill.on(Quill.events.SCROLL_OPTIMIZE, mutations => {
          mutations.some(mutation => {
            if (['TD', 'TR', 'TBODY', 'TABLE'].includes(mutation.target.tagName)) {
              this.quill.once(Quill.events.TEXT_CHANGE, (delta, old, source) => {
                if (source !== Quill.sources.USER) return;
                this.balanceTables();
              });
              return true;
            }
            return false;
          });
        });
      }
    }

    const debug = namespace('quill:toolbar');
    let Toolbar$1 = class Toolbar extends Module$5 {
      constructor(quill, options) {
        super(quill, options);
        if (Array.isArray(this.options.container)) {
          const container = document.createElement('div');
          container.setAttribute('role', 'toolbar');
          addControls(container, this.options.container);
          quill.container?.parentNode?.insertBefore(container, quill.container);
          this.container = container;
        } else if (typeof this.options.container === 'string') {
          this.container = document.querySelector(this.options.container);
        } else {
          this.container = this.options.container;
        }
        if (!(this.container instanceof HTMLElement)) {
          debug.error('Container required for toolbar', this.options);
          return;
        }
        this.container.classList.add('ql-toolbar');
        this.controls = [];
        this.handlers = {};
        if (this.options.handlers) {
          Object.keys(this.options.handlers).forEach(format => {
            const handler = this.options.handlers?.[format];
            if (handler) {
              this.addHandler(format, handler);
            }
          });
        }
        Array.from(this.container.querySelectorAll('button, select')).forEach(input => {
          // @ts-expect-error
          this.attach(input);
        });
        this.quill.on(Quill.events.EDITOR_CHANGE, () => {
          const [range] = this.quill.selection.getRange(); // quill.getSelection triggers update
          this.update(range);
        });
      }
      addHandler(format, handler) {
        this.handlers[format] = handler;
      }
      attach(input) {
        let format = Array.from(input.classList).find(className => {
          return className.indexOf('ql-') === 0;
        });
        if (!format) return;
        format = format.slice('ql-'.length);
        if (input.tagName === 'BUTTON') {
          input.setAttribute('type', 'button');
        }
        if (this.handlers[format] == null && this.quill.scroll.query(format) == null) {
          debug.warn('ignoring attaching to nonexistent format', format, input);
          return;
        }
        const eventName = input.tagName === 'SELECT' ? 'change' : 'click';
        input.addEventListener(eventName, e => {
          let value;
          if (input.tagName === 'SELECT') {
            // @ts-expect-error
            if (input.selectedIndex < 0) return;
            // @ts-expect-error
            const selected = input.options[input.selectedIndex];
            if (selected.hasAttribute('selected')) {
              value = false;
            } else {
              value = selected.value || false;
            }
          } else {
            if (input.classList.contains('ql-active')) {
              value = false;
            } else {
              // @ts-expect-error
              value = input.value || !input.hasAttribute('value');
            }
            e.preventDefault();
          }
          this.quill.focus();
          const [range] = this.quill.selection.getRange();
          if (this.handlers[format] != null) {
            this.handlers[format].call(this, value);
          } else if (
          // @ts-expect-error
          this.quill.scroll.query(format).prototype instanceof EmbedBlot$1) {
            value = prompt(`Enter ${format}`); // eslint-disable-line no-alert
            if (!value) return;
            this.quill.updateContents(new Delta$3()
            // @ts-expect-error Fix me later
            .retain(range.index)
            // @ts-expect-error Fix me later
            .delete(range.length).insert({
              [format]: value
            }), Quill.sources.USER);
          } else {
            this.quill.format(format, value, Quill.sources.USER);
          }
          this.update(range);
        });
        this.controls.push([format, input]);
      }
      update(range) {
        const formats = range == null ? {} : this.quill.getFormat(range);
        this.controls.forEach(pair => {
          const [format, input] = pair;
          if (input.tagName === 'SELECT') {
            let option = null;
            if (range == null) {
              option = null;
            } else if (formats[format] == null) {
              option = input.querySelector('option[selected]');
            } else if (!Array.isArray(formats[format])) {
              let value = formats[format];
              if (typeof value === 'string') {
                value = value.replace(/"/g, '\\"');
              }
              option = input.querySelector(`option[value="${value}"]`);
            }
            if (option == null) {
              // @ts-expect-error TODO fix me later
              input.value = ''; // TODO make configurable?
              // @ts-expect-error TODO fix me later
              input.selectedIndex = -1;
            } else {
              option.selected = true;
            }
          } else if (range == null) {
            input.classList.remove('ql-active');
            input.setAttribute('aria-pressed', 'false');
          } else if (input.hasAttribute('value')) {
            // both being null should match (default values)
            // '1' should match with 1 (headers)
            const value = formats[format];
            const isActive = value === input.getAttribute('value') || value != null && value.toString() === input.getAttribute('value') || value == null && !input.getAttribute('value');
            input.classList.toggle('ql-active', isActive);
            input.setAttribute('aria-pressed', isActive.toString());
          } else {
            const isActive = formats[format] != null;
            input.classList.toggle('ql-active', isActive);
            input.setAttribute('aria-pressed', isActive.toString());
          }
        });
      }
    };
    Toolbar$1.DEFAULTS = {};
    function addButton(container, format, value) {
      const input = document.createElement('button');
      input.setAttribute('type', 'button');
      input.classList.add(`ql-${format}`);
      input.setAttribute('aria-pressed', 'false');
      if (value != null) {
        input.value = value;
        input.setAttribute('aria-label', `${format}: ${value}`);
      } else {
        input.setAttribute('aria-label', format);
      }
      container.appendChild(input);
    }
    function addControls(container, groups) {
      if (!Array.isArray(groups[0])) {
        // @ts-expect-error
        groups = [groups];
      }
      groups.forEach(controls => {
        const group = document.createElement('span');
        group.classList.add('ql-formats');
        controls.forEach(control => {
          if (typeof control === 'string') {
            addButton(group, control);
          } else {
            const format = Object.keys(control)[0];
            const value = control[format];
            if (Array.isArray(value)) {
              addSelect(group, format, value);
            } else {
              addButton(group, format, value);
            }
          }
        });
        container.appendChild(group);
      });
    }
    function addSelect(container, format, values) {
      const input = document.createElement('select');
      input.classList.add(`ql-${format}`);
      values.forEach(value => {
        const option = document.createElement('option');
        if (value !== false) {
          option.setAttribute('value', String(value));
        } else {
          option.setAttribute('selected', 'selected');
        }
        input.appendChild(option);
      });
      container.appendChild(input);
    }
    Toolbar$1.DEFAULTS = {
      container: null,
      handlers: {
        clean() {
          const range = this.quill.getSelection();
          if (range == null) return;
          if (range.length === 0) {
            const formats = this.quill.getFormat();
            Object.keys(formats).forEach(name => {
              // Clean functionality in existing apps only clean inline formats
              if (this.quill.scroll.query(name, Scope.INLINE) != null) {
                this.quill.format(name, false, Quill.sources.USER);
              }
            });
          } else {
            this.quill.removeFormat(range, Quill.sources.USER);
          }
        },
        direction(value) {
          const {
            align
          } = this.quill.getFormat();
          if (value === 'rtl' && align == null) {
            this.quill.format('align', 'right', Quill.sources.USER);
          } else if (!value && align === 'right') {
            this.quill.format('align', false, Quill.sources.USER);
          }
          this.quill.format('direction', value, Quill.sources.USER);
        },
        indent(value) {
          const range = this.quill.getSelection();
          const formats = this.quill.getFormat(range);
          const indent = parseInt(formats.indent || 0, 10);
          if (value === '+1' || value === '-1') {
            let modifier = value === '+1' ? 1 : -1;
            if (formats.direction === 'rtl') modifier *= -1;
            this.quill.format('indent', indent + modifier, Quill.sources.USER);
          }
        },
        link(value) {
          if (value === true) {
            value = prompt('Enter link URL:'); // eslint-disable-line no-alert
          }
          this.quill.format('link', value, Quill.sources.USER);
        },
        list(value) {
          const range = this.quill.getSelection();
          const formats = this.quill.getFormat(range);
          if (value === 'check') {
            if (formats.list === 'checked' || formats.list === 'unchecked') {
              this.quill.format('list', false, Quill.sources.USER);
            } else {
              this.quill.format('list', 'unchecked', Quill.sources.USER);
            }
          } else {
            this.quill.format('list', value, Quill.sources.USER);
          }
        }
      }
    };

    const alignLeftIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"13\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"9\" y1=\"4\" y2=\"4\"/></svg>";
    const alignCenterIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"14\" x2=\"4\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"12\" x2=\"6\" y1=\"4\" y2=\"4\"/></svg>";
    const alignRightIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"5\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"9\" y1=\"4\" y2=\"4\"/></svg>";
    const alignJustifyIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"4\" y2=\"4\"/></svg>";
    const backgroundIcon = "<svg viewbox=\"0 0 18 18\"><g class=\"ql-fill ql-color-label\"><polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"/><rect height=\"1\" width=\"1\" x=\"4\" y=\"4\"/><polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"6\"/><rect height=\"1\" width=\"1\" x=\"3\" y=\"5\"/><rect height=\"1\" width=\"1\" x=\"4\" y=\"7\"/><polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"12\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"9\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"15\"/><polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"/><rect height=\"1\" width=\"1\" x=\"3\" y=\"8\"/><path d=\"M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z\"/><path d=\"M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z\"/><path d=\"M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z\"/><rect height=\"1\" width=\"1\" x=\"12\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"11\" y=\"3\"/><path d=\"M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"3\"/><rect height=\"1\" width=\"1\" x=\"6\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"3\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"5\" y=\"3\"/><rect height=\"1\" width=\"1\" x=\"9\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"14\"/><polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"/><rect height=\"1\" width=\"1\" x=\"13\" y=\"7\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"5\"/><rect height=\"1\" width=\"1\" x=\"14\" y=\"6\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"8\"/><rect height=\"1\" width=\"1\" x=\"14\" y=\"9\"/><path d=\"M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z\"/><rect height=\"1\" width=\"1\" x=\"14\" y=\"3\"/><polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"12\" y=\"5\"/><rect height=\"1\" width=\"1\" x=\"13\" y=\"4\"/><polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"/><rect height=\"1\" width=\"1\" x=\"9\" y=\"14\"/><rect height=\"1\" width=\"1\" x=\"8\" y=\"15\"/><path d=\"M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z\"/><rect height=\"1\" width=\"1\" x=\"5\" y=\"15\"/><path d=\"M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z\"/><rect height=\"1\" width=\"1\" x=\"11\" y=\"15\"/><path d=\"M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z\"/><rect height=\"1\" width=\"1\" x=\"14\" y=\"15\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"11\"/></g><polyline class=\"ql-stroke\" points=\"5.5 13 9 5 12.5 13\"/><line class=\"ql-stroke\" x1=\"11.63\" x2=\"6.38\" y1=\"11\" y2=\"11\"/></svg>";
    const blockquoteIcon = "<svg viewbox=\"0 0 18 18\"><rect class=\"ql-fill ql-stroke\" height=\"3\" width=\"3\" x=\"4\" y=\"5\"/><rect class=\"ql-fill ql-stroke\" height=\"3\" width=\"3\" x=\"11\" y=\"5\"/><path class=\"ql-even ql-fill ql-stroke\" d=\"M7,8c0,4.031-3,5-3,5\"/><path class=\"ql-even ql-fill ql-stroke\" d=\"M14,8c0,4.031-3,5-3,5\"/></svg>";
    const boldIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-stroke\" d=\"M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z\"/><path class=\"ql-stroke\" d=\"M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z\"/></svg>";
    const cleanIcon = "<svg class=\"\" viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"5\" x2=\"13\" y1=\"3\" y2=\"3\"/><line class=\"ql-stroke\" x1=\"6\" x2=\"9.35\" y1=\"12\" y2=\"3\"/><line class=\"ql-stroke\" x1=\"11\" x2=\"15\" y1=\"11\" y2=\"15\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"11\" y1=\"11\" y2=\"15\"/><rect class=\"ql-fill\" height=\"1\" rx=\"0.5\" ry=\"0.5\" width=\"7\" x=\"2\" y=\"14\"/></svg>";
    const codeIcon = "<svg viewbox=\"0 0 18 18\"><polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"/><polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"/><line class=\"ql-stroke\" x1=\"10\" x2=\"8\" y1=\"5\" y2=\"13\"/></svg>";
    const colorIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-color-label ql-stroke ql-transparent\" x1=\"3\" x2=\"15\" y1=\"15\" y2=\"15\"/><polyline class=\"ql-stroke\" points=\"5.5 11 9 3 12.5 11\"/><line class=\"ql-stroke\" x1=\"11.63\" x2=\"6.38\" y1=\"9\" y2=\"9\"/></svg>";
    const directionLeftToRightIcon = "<svg viewbox=\"0 0 18 18\"><polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"/><line class=\"ql-stroke ql-fill\" x1=\"15\" x2=\"11\" y1=\"4\" y2=\"4\"/><path class=\"ql-fill\" d=\"M11,3a3,3,0,0,0,0,6h1V3H11Z\"/><rect class=\"ql-fill\" height=\"11\" width=\"1\" x=\"11\" y=\"4\"/><rect class=\"ql-fill\" height=\"11\" width=\"1\" x=\"13\" y=\"4\"/></svg>";
    const directionRightToLeftIcon = "<svg viewbox=\"0 0 18 18\"><polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"/><line class=\"ql-stroke ql-fill\" x1=\"9\" x2=\"5\" y1=\"4\" y2=\"4\"/><path class=\"ql-fill\" d=\"M5,3A3,3,0,0,0,5,9H6V3H5Z\"/><rect class=\"ql-fill\" height=\"11\" width=\"1\" x=\"5\" y=\"4\"/><rect class=\"ql-fill\" height=\"11\" width=\"1\" x=\"7\" y=\"4\"/></svg>";
    const formulaIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z\"/><rect class=\"ql-fill\" height=\"1.6\" rx=\"0.8\" ry=\"0.8\" width=\"5\" x=\"5.15\" y=\"6.2\"/><path class=\"ql-fill\" d=\"M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z\"/></svg>";
    const headerIcon = "<svg viewBox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z\"/></svg>";
    const header2Icon = "<svg viewBox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z\"/></svg>";
    const italicIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"7\" x2=\"13\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"5\" x2=\"11\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"8\" x2=\"10\" y1=\"14\" y2=\"4\"/></svg>";
    const imageIcon = "<svg viewbox=\"0 0 18 18\"><rect class=\"ql-stroke\" height=\"10\" width=\"12\" x=\"3\" y=\"4\"/><circle class=\"ql-fill\" cx=\"6\" cy=\"7\" r=\"1\"/><polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"/></svg>";
    const indentIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"9\" y2=\"9\"/><polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"/></svg>";
    const outdentIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"9\" y2=\"9\"/><polyline class=\"ql-stroke\" points=\"5 7 5 11 3 9 5 7\"/></svg>";
    const linkIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"7\" x2=\"11\" y1=\"7\" y2=\"11\"/><path class=\"ql-even ql-stroke\" d=\"M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z\"/><path class=\"ql-even ql-stroke\" d=\"M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z\"/></svg>";
    const listBulletIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"6\" x2=\"15\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"6\" x2=\"15\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"6\" x2=\"15\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"3\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"3\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"3\" y1=\"14\" y2=\"14\"/></svg>";
    const listCheckIcon = "<svg class=\"\" viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"4\" y2=\"4\"/><polyline class=\"ql-stroke\" points=\"3 4 4 5 6 3\"/><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"14\" y2=\"14\"/><polyline class=\"ql-stroke\" points=\"3 14 4 15 6 13\"/><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"9\" y2=\"9\"/><polyline class=\"ql-stroke\" points=\"3 9 4 10 6 8\"/></svg>";
    const listOrderedIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"7\" x2=\"15\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"7\" x2=\"15\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"7\" x2=\"15\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke ql-thin\" x1=\"2.5\" x2=\"4.5\" y1=\"5.5\" y2=\"5.5\"/><path class=\"ql-fill\" d=\"M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z\"/><path class=\"ql-stroke ql-thin\" d=\"M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156\"/><path class=\"ql-stroke ql-thin\" d=\"M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109\"/></svg>";
    const subscriptIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z\"/><path class=\"ql-fill\" d=\"M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z\"/></svg>";
    const superscriptIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z\"/><path class=\"ql-fill\" d=\"M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z\"/></svg>";
    const strikeIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke ql-thin\" x1=\"15.5\" x2=\"2.5\" y1=\"8.5\" y2=\"9.5\"/><path class=\"ql-fill\" d=\"M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z\"/><path class=\"ql-fill\" d=\"M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z\"/></svg>";
    const tableIcon = "<svg viewbox=\"0 0 18 18\"><rect class=\"ql-stroke\" height=\"12\" width=\"12\" x=\"3\" y=\"3\"/><rect class=\"ql-fill\" height=\"2\" width=\"3\" x=\"5\" y=\"5\"/><rect class=\"ql-fill\" height=\"2\" width=\"4\" x=\"9\" y=\"5\"/><g class=\"ql-fill ql-transparent\"><rect height=\"2\" width=\"3\" x=\"5\" y=\"8\"/><rect height=\"2\" width=\"4\" x=\"9\" y=\"8\"/><rect height=\"2\" width=\"3\" x=\"5\" y=\"11\"/><rect height=\"2\" width=\"4\" x=\"9\" y=\"11\"/></g></svg>";
    const underlineIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-stroke\" d=\"M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3\"/><rect class=\"ql-fill\" height=\"1\" rx=\"0.5\" ry=\"0.5\" width=\"12\" x=\"3\" y=\"15\"/></svg>";
    const videoIcon = "<svg viewbox=\"0 0 18 18\"><rect class=\"ql-stroke\" height=\"12\" width=\"12\" x=\"3\" y=\"3\"/><rect class=\"ql-fill\" height=\"12\" width=\"1\" x=\"5\" y=\"3\"/><rect class=\"ql-fill\" height=\"12\" width=\"1\" x=\"12\" y=\"3\"/><rect class=\"ql-fill\" height=\"2\" width=\"8\" x=\"5\" y=\"8\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"3\" y=\"5\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"3\" y=\"7\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"3\" y=\"10\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"3\" y=\"12\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"12\" y=\"5\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"12\" y=\"7\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"12\" y=\"10\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"12\" y=\"12\"/></svg>";
    var Icons = {
      align: {
        '': alignLeftIcon,
        center: alignCenterIcon,
        right: alignRightIcon,
        justify: alignJustifyIcon
      },
      background: backgroundIcon,
      blockquote: blockquoteIcon,
      bold: boldIcon,
      clean: cleanIcon,
      code: codeIcon,
      'code-block': codeIcon,
      color: colorIcon,
      direction: {
        '': directionLeftToRightIcon,
        rtl: directionRightToLeftIcon
      },
      formula: formulaIcon,
      header: {
        '1': headerIcon,
        '2': header2Icon
      },
      italic: italicIcon,
      image: imageIcon,
      indent: {
        '+1': indentIcon,
        '-1': outdentIcon
      },
      link: linkIcon,
      list: {
        bullet: listBulletIcon,
        check: listCheckIcon,
        ordered: listOrderedIcon
      },
      script: {
        sub: subscriptIcon,
        super: superscriptIcon
      },
      strike: strikeIcon,
      table: tableIcon,
      underline: underlineIcon,
      video: videoIcon
    };

    const DropdownIcon = "<svg viewbox=\"0 0 18 18\"><polygon class=\"ql-stroke\" points=\"7 11 9 13 11 11 7 11\"/><polygon class=\"ql-stroke\" points=\"7 7 9 5 11 7 7 7\"/></svg>";
    let optionsCounter = 0;
    function toggleAriaAttribute(element, attribute) {
      element.setAttribute(attribute, `${!(element.getAttribute(attribute) === 'true')}`);
    }
    class Picker {
      constructor(select) {
        this.select = select;
        this.container = document.createElement('span');
        this.buildPicker();
        this.select.style.display = 'none';
        // @ts-expect-error Fix me later
        this.select.parentNode.insertBefore(this.container, this.select);
        this.label.addEventListener('mousedown', () => {
          this.togglePicker();
        });
        this.label.addEventListener('keydown', event => {
          switch (event.key) {
            case 'Enter':
              this.togglePicker();
              break;
            case 'Escape':
              this.escape();
              event.preventDefault();
              break;
          }
        });
        this.select.addEventListener('change', this.update.bind(this));
      }
      togglePicker() {
        this.container.classList.toggle('ql-expanded');
        // Toggle aria-expanded and aria-hidden to make the picker accessible
        toggleAriaAttribute(this.label, 'aria-expanded');
        // @ts-expect-error
        toggleAriaAttribute(this.options, 'aria-hidden');
      }
      buildItem(option) {
        const item = document.createElement('span');
        // @ts-expect-error
        item.tabIndex = '0';
        item.setAttribute('role', 'button');
        item.classList.add('ql-picker-item');
        const value = option.getAttribute('value');
        if (value) {
          item.setAttribute('data-value', value);
        }
        if (option.textContent) {
          item.setAttribute('data-label', option.textContent);
        }
        item.addEventListener('click', () => {
          this.selectItem(item, true);
        });
        item.addEventListener('keydown', event => {
          switch (event.key) {
            case 'Enter':
              this.selectItem(item, true);
              event.preventDefault();
              break;
            case 'Escape':
              this.escape();
              event.preventDefault();
              break;
          }
        });
        return item;
      }
      buildLabel() {
        const label = document.createElement('span');
        label.classList.add('ql-picker-label');
        label.innerHTML = DropdownIcon;
        // @ts-expect-error
        label.tabIndex = '0';
        label.setAttribute('role', 'button');
        label.setAttribute('aria-expanded', 'false');
        this.container.appendChild(label);
        return label;
      }
      buildOptions() {
        const options = document.createElement('span');
        options.classList.add('ql-picker-options');

        // Don't want screen readers to read this until options are visible
        options.setAttribute('aria-hidden', 'true');
        // @ts-expect-error
        options.tabIndex = '-1';

        // Need a unique id for aria-controls
        options.id = `ql-picker-options-${optionsCounter}`;
        optionsCounter += 1;
        this.label.setAttribute('aria-controls', options.id);

        // @ts-expect-error
        this.options = options;
        Array.from(this.select.options).forEach(option => {
          const item = this.buildItem(option);
          options.appendChild(item);
          if (option.selected === true) {
            this.selectItem(item);
          }
        });
        this.container.appendChild(options);
      }
      buildPicker() {
        Array.from(this.select.attributes).forEach(item => {
          this.container.setAttribute(item.name, item.value);
        });
        this.container.classList.add('ql-picker');
        this.label = this.buildLabel();
        this.buildOptions();
      }
      escape() {
        // Close menu and return focus to trigger label
        this.close();
        // Need setTimeout for accessibility to ensure that the browser executes
        // focus on the next process thread and after any DOM content changes
        setTimeout(() => this.label.focus(), 1);
      }
      close() {
        this.container.classList.remove('ql-expanded');
        this.label.setAttribute('aria-expanded', 'false');
        // @ts-expect-error
        this.options.setAttribute('aria-hidden', 'true');
      }
      selectItem(item) {
        let trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        const selected = this.container.querySelector('.ql-selected');
        if (item === selected) return;
        if (selected != null) {
          selected.classList.remove('ql-selected');
        }
        if (item == null) return;
        item.classList.add('ql-selected');
        // @ts-expect-error Fix me later
        this.select.selectedIndex = Array.from(item.parentNode.children).indexOf(item);
        if (item.hasAttribute('data-value')) {
          // @ts-expect-error Fix me later
          this.label.setAttribute('data-value', item.getAttribute('data-value'));
        } else {
          this.label.removeAttribute('data-value');
        }
        if (item.hasAttribute('data-label')) {
          // @ts-expect-error Fix me later
          this.label.setAttribute('data-label', item.getAttribute('data-label'));
        } else {
          this.label.removeAttribute('data-label');
        }
        if (trigger) {
          this.select.dispatchEvent(new Event('change'));
          this.close();
        }
      }
      update() {
        let option;
        if (this.select.selectedIndex > -1) {
          const item =
          // @ts-expect-error Fix me later
          this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
          option = this.select.options[this.select.selectedIndex];
          // @ts-expect-error
          this.selectItem(item);
        } else {
          this.selectItem(null);
        }
        const isActive = option != null && option !== this.select.querySelector('option[selected]');
        this.label.classList.toggle('ql-active', isActive);
      }
    }

    class ColorPicker extends Picker {
      constructor(select, label) {
        super(select);
        this.label.innerHTML = label;
        this.container.classList.add('ql-color-picker');
        Array.from(this.container.querySelectorAll('.ql-picker-item')).slice(0, 7).forEach(item => {
          item.classList.add('ql-primary');
        });
      }
      buildItem(option) {
        const item = super.buildItem(option);
        item.style.backgroundColor = option.getAttribute('value') || '';
        return item;
      }
      selectItem(item, trigger) {
        super.selectItem(item, trigger);
        const colorLabel = this.label.querySelector('.ql-color-label');
        const value = item ? item.getAttribute('data-value') || '' : '';
        if (colorLabel) {
          if (colorLabel.tagName === 'line') {
            colorLabel.style.stroke = value;
          } else {
            colorLabel.style.fill = value;
          }
        }
      }
    }

    class IconPicker extends Picker {
      constructor(select, icons) {
        super(select);
        this.container.classList.add('ql-icon-picker');
        Array.from(this.container.querySelectorAll('.ql-picker-item')).forEach(item => {
          item.innerHTML = icons[item.getAttribute('data-value') || ''];
        });
        this.defaultItem = this.container.querySelector('.ql-selected');
        this.selectItem(this.defaultItem);
      }
      selectItem(target, trigger) {
        super.selectItem(target, trigger);
        const item = target || this.defaultItem;
        if (item != null) {
          if (this.label.innerHTML === item.innerHTML) return;
          this.label.innerHTML = item.innerHTML;
        }
      }
    }

    const isScrollable = el => {
      const {
        overflowY
      } = getComputedStyle(el, null);
      return overflowY !== 'visible' && overflowY !== 'clip';
    };
    class Tooltip {
      constructor(quill, boundsContainer) {
        this.quill = quill;
        this.boundsContainer = boundsContainer || document.body;
        this.root = quill.addContainer('ql-tooltip');
        // @ts-expect-error
        this.root.innerHTML = this.constructor.TEMPLATE;
        if (isScrollable(this.quill.root)) {
          this.quill.root.addEventListener('scroll', () => {
            this.root.style.marginTop = `${-1 * this.quill.root.scrollTop}px`;
          });
        }
        this.hide();
      }
      hide() {
        this.root.classList.add('ql-hidden');
      }
      position(reference) {
        const left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
        // root.scrollTop should be 0 if scrollContainer !== root
        const top = reference.bottom + this.quill.root.scrollTop;
        this.root.style.left = `${left}px`;
        this.root.style.top = `${top}px`;
        this.root.classList.remove('ql-flip');
        const containerBounds = this.boundsContainer.getBoundingClientRect();
        const rootBounds = this.root.getBoundingClientRect();
        let shift = 0;
        if (rootBounds.right > containerBounds.right) {
          shift = containerBounds.right - rootBounds.right;
          this.root.style.left = `${left + shift}px`;
        }
        if (rootBounds.left < containerBounds.left) {
          shift = containerBounds.left - rootBounds.left;
          this.root.style.left = `${left + shift}px`;
        }
        if (rootBounds.bottom > containerBounds.bottom) {
          const height = rootBounds.bottom - rootBounds.top;
          const verticalShift = reference.bottom - reference.top + height;
          this.root.style.top = `${top - verticalShift}px`;
          this.root.classList.add('ql-flip');
        }
        return shift;
      }
      show() {
        this.root.classList.remove('ql-editing');
        this.root.classList.remove('ql-hidden');
      }
    }

    const ALIGNS = [false, 'center', 'right', 'justify'];
    const COLORS = ['#000000', '#e60000', '#ff9900', '#ffff00', '#008a00', '#0066cc', '#9933ff', '#ffffff', '#facccc', '#ffebcc', '#ffffcc', '#cce8cc', '#cce0f5', '#ebd6ff', '#bbbbbb', '#f06666', '#ffc266', '#ffff66', '#66b966', '#66a3e0', '#c285ff', '#888888', '#a10000', '#b26b00', '#b2b200', '#006100', '#0047b2', '#6b24b2', '#444444', '#5c0000', '#663d00', '#666600', '#003700', '#002966', '#3d1466'];
    const FONTS = [false, 'serif', 'monospace'];
    const HEADERS = ['1', '2', '3', false];
    const SIZES = ['small', false, 'large', 'huge'];
    class BaseTheme extends Theme {
      constructor(quill, options) {
        super(quill, options);
        const listener = e => {
          if (!document.body.contains(quill.root)) {
            document.body.removeEventListener('click', listener);
            return;
          }
          if (this.tooltip != null &&
          // @ts-expect-error
          !this.tooltip.root.contains(e.target) &&
          // @ts-expect-error
          document.activeElement !== this.tooltip.textbox && !this.quill.hasFocus()) {
            this.tooltip.hide();
          }
          if (this.pickers != null) {
            this.pickers.forEach(picker => {
              // @ts-expect-error
              if (!picker.container.contains(e.target)) {
                picker.close();
              }
            });
          }
        };
        quill.emitter.listenDOM('click', document.body, listener);
      }
      addModule(name) {
        const module = super.addModule(name);
        if (name === 'toolbar') {
          // @ts-expect-error
          this.extendToolbar(module);
        }
        return module;
      }
      buildButtons(buttons, icons) {
        Array.from(buttons).forEach(button => {
          const className = button.getAttribute('class') || '';
          className.split(/\s+/).forEach(name => {
            if (!name.startsWith('ql-')) return;
            name = name.slice('ql-'.length);
            if (icons[name] == null) return;
            if (name === 'direction') {
              // @ts-expect-error
              button.innerHTML = icons[name][''] + icons[name].rtl;
            } else if (typeof icons[name] === 'string') {
              // @ts-expect-error
              button.innerHTML = icons[name];
            } else {
              // @ts-expect-error
              const value = button.value || '';
              // @ts-expect-error
              if (value != null && icons[name][value]) {
                // @ts-expect-error
                button.innerHTML = icons[name][value];
              }
            }
          });
        });
      }
      buildPickers(selects, icons) {
        this.pickers = Array.from(selects).map(select => {
          if (select.classList.contains('ql-align')) {
            if (select.querySelector('option') == null) {
              fillSelect(select, ALIGNS);
            }
            if (typeof icons.align === 'object') {
              return new IconPicker(select, icons.align);
            }
          }
          if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
            const format = select.classList.contains('ql-background') ? 'background' : 'color';
            if (select.querySelector('option') == null) {
              fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
            }
            return new ColorPicker(select, icons[format]);
          }
          if (select.querySelector('option') == null) {
            if (select.classList.contains('ql-font')) {
              fillSelect(select, FONTS);
            } else if (select.classList.contains('ql-header')) {
              fillSelect(select, HEADERS);
            } else if (select.classList.contains('ql-size')) {
              fillSelect(select, SIZES);
            }
          }
          return new Picker(select);
        });
        const update = () => {
          this.pickers.forEach(picker => {
            picker.update();
          });
        };
        this.quill.on(Emitter.events.EDITOR_CHANGE, update);
      }
    }
    BaseTheme.DEFAULTS = merge({}, Theme.DEFAULTS, {
      modules: {
        toolbar: {
          handlers: {
            formula() {
              this.quill.theme.tooltip.edit('formula');
            },
            image() {
              let fileInput = this.container.querySelector('input.ql-image[type=file]');
              if (fileInput == null) {
                fileInput = document.createElement('input');
                fileInput.setAttribute('type', 'file');
                fileInput.setAttribute('accept', this.quill.uploader.options.mimetypes.join(', '));
                fileInput.classList.add('ql-image');
                fileInput.addEventListener('change', () => {
                  const range = this.quill.getSelection(true);
                  this.quill.uploader.upload(range, fileInput.files);
                  fileInput.value = '';
                });
                this.container.appendChild(fileInput);
              }
              fileInput.click();
            },
            video() {
              this.quill.theme.tooltip.edit('video');
            }
          }
        }
      }
    });
    class BaseTooltip extends Tooltip {
      constructor(quill, boundsContainer) {
        super(quill, boundsContainer);
        this.textbox = this.root.querySelector('input[type="text"]');
        this.listen();
      }
      listen() {
        // @ts-expect-error Fix me later
        this.textbox.addEventListener('keydown', event => {
          if (event.key === 'Enter') {
            this.save();
            event.preventDefault();
          } else if (event.key === 'Escape') {
            this.cancel();
            event.preventDefault();
          }
        });
      }
      cancel() {
        this.hide();
        this.restoreFocus();
      }
      edit() {
        let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
        let preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        this.root.classList.remove('ql-hidden');
        this.root.classList.add('ql-editing');
        if (this.textbox == null) return;
        if (preview != null) {
          this.textbox.value = preview;
        } else if (mode !== this.root.getAttribute('data-mode')) {
          this.textbox.value = '';
        }
        const bounds = this.quill.getBounds(this.quill.selection.savedRange);
        if (bounds != null) {
          this.position(bounds);
        }
        this.textbox.select();
        this.textbox.setAttribute('placeholder', this.textbox.getAttribute(`data-${mode}`) || '');
        this.root.setAttribute('data-mode', mode);
      }
      restoreFocus() {
        this.quill.focus({
          preventScroll: true
        });
      }
      save() {
        // @ts-expect-error Fix me later
        let {
          value
        } = this.textbox;
        switch (this.root.getAttribute('data-mode')) {
          case 'link':
            {
              const {
                scrollTop
              } = this.quill.root;
              if (this.linkRange) {
                this.quill.formatText(this.linkRange, 'link', value, Emitter.sources.USER);
                delete this.linkRange;
              } else {
                this.restoreFocus();
                this.quill.format('link', value, Emitter.sources.USER);
              }
              this.quill.root.scrollTop = scrollTop;
              break;
            }
          case 'video':
            {
              value = extractVideoUrl(value);
            }
          // eslint-disable-next-line no-fallthrough
          case 'formula':
            {
              if (!value) break;
              const range = this.quill.getSelection(true);
              if (range != null) {
                const index = range.index + range.length;
                this.quill.insertEmbed(index,
                // @ts-expect-error Fix me later
                this.root.getAttribute('data-mode'), value, Emitter.sources.USER);
                if (this.root.getAttribute('data-mode') === 'formula') {
                  this.quill.insertText(index + 1, ' ', Emitter.sources.USER);
                }
                this.quill.setSelection(index + 2, Emitter.sources.USER);
              }
              break;
            }
        }
        // @ts-expect-error Fix me later
        this.textbox.value = '';
        this.hide();
      }
    }
    function extractVideoUrl(url) {
      let match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
      if (match) {
        return `${match[1] || 'https'}://www.youtube.com/embed/${match[2]}?showinfo=0`;
      }
      // eslint-disable-next-line no-cond-assign
      if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
        return `${match[1] || 'https'}://player.vimeo.com/video/${match[2]}/`;
      }
      return url;
    }
    function fillSelect(select, values) {
      let defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      values.forEach(value => {
        const option = document.createElement('option');
        if (value === defaultValue) {
          option.setAttribute('selected', 'selected');
        } else {
          option.setAttribute('value', String(value));
        }
        select.appendChild(option);
      });
    }

    const TOOLBAR_CONFIG$1 = [['bold', 'italic', 'link'], [{
      header: 1
    }, {
      header: 2
    }, 'blockquote']];
    class BubbleTooltip extends BaseTooltip {
      static TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');
      constructor(quill, bounds) {
        super(quill, bounds);
        this.quill.on(Emitter.events.EDITOR_CHANGE, (type, range, oldRange, source) => {
          if (type !== Emitter.events.SELECTION_CHANGE) return;
          if (range != null && range.length > 0 && source === Emitter.sources.USER) {
            this.show();
            // Lock our width so we will expand beyond our offsetParent boundaries
            this.root.style.left = '0px';
            this.root.style.width = '';
            this.root.style.width = `${this.root.offsetWidth}px`;
            const lines = this.quill.getLines(range.index, range.length);
            if (lines.length === 1) {
              const bounds = this.quill.getBounds(range);
              if (bounds != null) {
                this.position(bounds);
              }
            } else {
              const lastLine = lines[lines.length - 1];
              const index = this.quill.getIndex(lastLine);
              const length = Math.min(lastLine.length() - 1, range.index + range.length - index);
              const indexBounds = this.quill.getBounds(new Range(index, length));
              if (indexBounds != null) {
                this.position(indexBounds);
              }
            }
          } else if (document.activeElement !== this.textbox && this.quill.hasFocus()) {
            this.hide();
          }
        });
      }
      listen() {
        super.listen();
        // @ts-expect-error Fix me later
        this.root.querySelector('.ql-close').addEventListener('click', () => {
          this.root.classList.remove('ql-editing');
        });
        this.quill.on(Emitter.events.SCROLL_OPTIMIZE, () => {
          // Let selection be restored by toolbar handlers before repositioning
          setTimeout(() => {
            if (this.root.classList.contains('ql-hidden')) return;
            const range = this.quill.getSelection();
            if (range != null) {
              const bounds = this.quill.getBounds(range);
              if (bounds != null) {
                this.position(bounds);
              }
            }
          }, 1);
        });
      }
      cancel() {
        this.show();
      }
      position(reference) {
        const shift = super.position(reference);
        const arrow = this.root.querySelector('.ql-tooltip-arrow');
        // @ts-expect-error
        arrow.style.marginLeft = '';
        if (shift !== 0) {
          // @ts-expect-error
          arrow.style.marginLeft = `${-1 * shift - arrow.offsetWidth / 2}px`;
        }
        return shift;
      }
    }
    class BubbleTheme extends BaseTheme {
      constructor(quill, options) {
        if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
          options.modules.toolbar.container = TOOLBAR_CONFIG$1;
        }
        super(quill, options);
        this.quill.container.classList.add('ql-bubble');
      }
      extendToolbar(toolbar) {
        // @ts-expect-error
        this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
        if (toolbar.container != null) {
          this.tooltip.root.appendChild(toolbar.container);
          this.buildButtons(toolbar.container.querySelectorAll('button'), Icons);
          this.buildPickers(toolbar.container.querySelectorAll('select'), Icons);
        }
      }
    }
    BubbleTheme.DEFAULTS = merge({}, BaseTheme.DEFAULTS, {
      modules: {
        toolbar: {
          handlers: {
            link(value) {
              if (!value) {
                this.quill.format('link', false);
              } else {
                this.quill.theme.tooltip.edit();
              }
            }
          }
        }
      }
    });

    const TOOLBAR_CONFIG = [[{
      header: ['1', '2', '3', false]
    }], ['bold', 'italic', 'underline', 'link'], [{
      list: 'ordered'
    }, {
      list: 'bullet'
    }], ['clean']];
    class SnowTooltip extends BaseTooltip {
      static TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');
      preview = this.root.querySelector('a.ql-preview');
      listen() {
        super.listen();
        // @ts-expect-error Fix me later
        this.root.querySelector('a.ql-action').addEventListener('click', event => {
          if (this.root.classList.contains('ql-editing')) {
            this.save();
          } else {
            // @ts-expect-error Fix me later
            this.edit('link', this.preview.textContent);
          }
          event.preventDefault();
        });
        // @ts-expect-error Fix me later
        this.root.querySelector('a.ql-remove').addEventListener('click', event => {
          if (this.linkRange != null) {
            const range = this.linkRange;
            this.restoreFocus();
            this.quill.formatText(range, 'link', false, Emitter.sources.USER);
            delete this.linkRange;
          }
          event.preventDefault();
          this.hide();
        });
        this.quill.on(Emitter.events.SELECTION_CHANGE, (range, oldRange, source) => {
          if (range == null) return;
          if (range.length === 0 && source === Emitter.sources.USER) {
            const [link, offset] = this.quill.scroll.descendant(Link, range.index);
            if (link != null) {
              this.linkRange = new Range(range.index - offset, link.length());
              const preview = Link.formats(link.domNode);
              // @ts-expect-error Fix me later
              this.preview.textContent = preview;
              // @ts-expect-error Fix me later
              this.preview.setAttribute('href', preview);
              this.show();
              const bounds = this.quill.getBounds(this.linkRange);
              if (bounds != null) {
                this.position(bounds);
              }
              return;
            }
          } else {
            delete this.linkRange;
          }
          this.hide();
        });
      }
      show() {
        super.show();
        this.root.removeAttribute('data-mode');
      }
    }
    class SnowTheme extends BaseTheme {
      constructor(quill, options) {
        if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
          options.modules.toolbar.container = TOOLBAR_CONFIG;
        }
        super(quill, options);
        this.quill.container.classList.add('ql-snow');
      }
      extendToolbar(toolbar) {
        if (toolbar.container != null) {
          toolbar.container.classList.add('ql-snow');
          this.buildButtons(toolbar.container.querySelectorAll('button'), Icons);
          this.buildPickers(toolbar.container.querySelectorAll('select'), Icons);
          // @ts-expect-error
          this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
          if (toolbar.container.querySelector('.ql-link')) {
            this.quill.keyboard.addBinding({
              key: 'k',
              shortKey: true
            }, (_range, context) => {
              toolbar.handlers.link.call(toolbar, !context.format.link);
            });
          }
        }
      }
    }
    SnowTheme.DEFAULTS = merge({}, BaseTheme.DEFAULTS, {
      modules: {
        toolbar: {
          handlers: {
            link(value) {
              if (value) {
                const range = this.quill.getSelection();
                if (range == null || range.length === 0) return;
                let preview = this.quill.getText(range);
                if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
                  preview = `mailto:${preview}`;
                }
                const {
                  tooltip
                } = this.quill.theme;
                tooltip.edit('link', preview);
              } else {
                this.quill.format('link', false);
              }
            }
          }
        }
      }
    });

    Quill.register({
      'attributors/attribute/direction': DirectionAttribute,
      'attributors/class/align': AlignClass,
      'attributors/class/background': BackgroundClass,
      'attributors/class/color': ColorClass,
      'attributors/class/direction': DirectionClass,
      'attributors/class/font': FontClass,
      'attributors/class/size': SizeClass,
      'attributors/style/align': AlignStyle,
      'attributors/style/background': BackgroundStyle,
      'attributors/style/color': ColorStyle,
      'attributors/style/direction': DirectionStyle,
      'attributors/style/font': FontStyle,
      'attributors/style/size': SizeStyle
    }, true);
    Quill.register({
      'formats/align': AlignClass,
      'formats/direction': DirectionClass,
      'formats/indent': IndentClass,
      'formats/background': BackgroundStyle,
      'formats/color': ColorStyle,
      'formats/font': FontClass,
      'formats/size': SizeClass,
      'formats/blockquote': Blockquote,
      'formats/code-block': CodeBlock$1,
      'formats/header': Header$1,
      'formats/list': ListItem$1,
      'formats/bold': Bold,
      'formats/code': Code,
      'formats/italic': Italic,
      'formats/link': Link,
      'formats/script': Script,
      'formats/strike': Strike,
      'formats/underline': Underline,
      'formats/formula': Formula,
      'formats/image': Image$1,
      'formats/video': Video,
      'modules/syntax': Syntax,
      'modules/table': Table,
      'modules/toolbar': Toolbar$1,
      'themes/bubble': BubbleTheme,
      'themes/snow': SnowTheme,
      'ui/icons': Icons,
      'ui/picker': Picker,
      'ui/icon-picker': IconPicker,
      'ui/color-picker': ColorPicker,
      'ui/tooltip': Tooltip
    }, true);

    /**
     * This library modifies the diff-patch-match library by Neil Fraser
     * by removing the patch and match functionality and certain advanced
     * options in the diff function. The original license is as follows:
     *
     * ===
     *
     * Diff Match and Patch
     *
     * Copyright 2006 Google Inc.
     * http://code.google.com/p/google-diff-match-patch/
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * The data structure representing a diff is an array of tuples:
     * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
     * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
     */
    var DIFF_DELETE = -1;
    var DIFF_INSERT = 1;
    var DIFF_EQUAL = 0;


    /**
     * Find the differences between two texts.  Simplifies the problem by stripping
     * any common prefix or suffix off the texts before diffing.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info
     * @return {Array} Array of diff tuples.
     */
    function diff_main(text1, text2, cursor_pos, _fix_unicode) {
      // Check for equality
      if (text1 === text2) {
        if (text1) {
          return [[DIFF_EQUAL, text1]];
        }
        return [];
      }

      if (cursor_pos != null) {
        var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);
        if (editdiff) {
          return editdiff;
        }
      }

      // Trim off common prefix (speedup).
      var commonlength = diff_commonPrefix(text1, text2);
      var commonprefix = text1.substring(0, commonlength);
      text1 = text1.substring(commonlength);
      text2 = text2.substring(commonlength);

      // Trim off common suffix (speedup).
      commonlength = diff_commonSuffix(text1, text2);
      var commonsuffix = text1.substring(text1.length - commonlength);
      text1 = text1.substring(0, text1.length - commonlength);
      text2 = text2.substring(0, text2.length - commonlength);

      // Compute the diff on the middle block.
      var diffs = diff_compute_(text1, text2);

      // Restore the prefix and suffix.
      if (commonprefix) {
        diffs.unshift([DIFF_EQUAL, commonprefix]);
      }
      if (commonsuffix) {
        diffs.push([DIFF_EQUAL, commonsuffix]);
      }
      diff_cleanupMerge(diffs, _fix_unicode);
      return diffs;
    }

    /**
     * Find the differences between two texts.  Assumes that the texts do not
     * have any common prefix or suffix.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @return {Array} Array of diff tuples.
     */
    function diff_compute_(text1, text2) {
      var diffs;

      if (!text1) {
        // Just add some text (speedup).
        return [[DIFF_INSERT, text2]];
      }

      if (!text2) {
        // Just delete some text (speedup).
        return [[DIFF_DELETE, text1]];
      }

      var longtext = text1.length > text2.length ? text1 : text2;
      var shorttext = text1.length > text2.length ? text2 : text1;
      var i = longtext.indexOf(shorttext);
      if (i !== -1) {
        // Shorter text is inside the longer text (speedup).
        diffs = [
          [DIFF_INSERT, longtext.substring(0, i)],
          [DIFF_EQUAL, shorttext],
          [DIFF_INSERT, longtext.substring(i + shorttext.length)]
        ];
        // Swap insertions for deletions if diff is reversed.
        if (text1.length > text2.length) {
          diffs[0][0] = diffs[2][0] = DIFF_DELETE;
        }
        return diffs;
      }

      if (shorttext.length === 1) {
        // Single character string.
        // After the previous speedup, the character can't be an equality.
        return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
      }

      // Check to see if the problem can be split in two.
      var hm = diff_halfMatch_(text1, text2);
      if (hm) {
        // A half-match was found, sort out the return data.
        var text1_a = hm[0];
        var text1_b = hm[1];
        var text2_a = hm[2];
        var text2_b = hm[3];
        var mid_common = hm[4];
        // Send both pairs off for separate processing.
        var diffs_a = diff_main(text1_a, text2_a);
        var diffs_b = diff_main(text1_b, text2_b);
        // Merge the results.
        return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
      }

      return diff_bisect_(text1, text2);
    }

    /**
     * Find the 'middle snake' of a diff, split the problem in two
     * and return the recursively constructed diff.
     * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @return {Array} Array of diff tuples.
     * @private
     */
    function diff_bisect_(text1, text2) {
      // Cache the text lengths to prevent multiple calls.
      var text1_length = text1.length;
      var text2_length = text2.length;
      var max_d = Math.ceil((text1_length + text2_length) / 2);
      var v_offset = max_d;
      var v_length = 2 * max_d;
      var v1 = new Array(v_length);
      var v2 = new Array(v_length);
      // Setting all elements to -1 is faster in Chrome & Firefox than mixing
      // integers and undefined.
      for (var x = 0; x < v_length; x++) {
        v1[x] = -1;
        v2[x] = -1;
      }
      v1[v_offset + 1] = 0;
      v2[v_offset + 1] = 0;
      var delta = text1_length - text2_length;
      // If the total number of characters is odd, then the front path will collide
      // with the reverse path.
      var front = (delta % 2 !== 0);
      // Offsets for start and end of k loop.
      // Prevents mapping of space beyond the grid.
      var k1start = 0;
      var k1end = 0;
      var k2start = 0;
      var k2end = 0;
      for (var d = 0; d < max_d; d++) {
        // Walk the front path one step.
        for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
          var k1_offset = v_offset + k1;
          var x1;
          if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
            x1 = v1[k1_offset + 1];
          } else {
            x1 = v1[k1_offset - 1] + 1;
          }
          var y1 = x1 - k1;
          while (
            x1 < text1_length && y1 < text2_length &&
            text1.charAt(x1) === text2.charAt(y1)
          ) {
            x1++;
            y1++;
          }
          v1[k1_offset] = x1;
          if (x1 > text1_length) {
            // Ran off the right of the graph.
            k1end += 2;
          } else if (y1 > text2_length) {
            // Ran off the bottom of the graph.
            k1start += 2;
          } else if (front) {
            var k2_offset = v_offset + delta - k1;
            if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {
              // Mirror x2 onto top-left coordinate system.
              var x2 = text1_length - v2[k2_offset];
              if (x1 >= x2) {
                // Overlap detected.
                return diff_bisectSplit_(text1, text2, x1, y1);
              }
            }
          }
        }

        // Walk the reverse path one step.
        for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
          var k2_offset = v_offset + k2;
          var x2;
          if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
            x2 = v2[k2_offset + 1];
          } else {
            x2 = v2[k2_offset - 1] + 1;
          }
          var y2 = x2 - k2;
          while (
            x2 < text1_length && y2 < text2_length &&
            text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)
          ) {
            x2++;
            y2++;
          }
          v2[k2_offset] = x2;
          if (x2 > text1_length) {
            // Ran off the left of the graph.
            k2end += 2;
          } else if (y2 > text2_length) {
            // Ran off the top of the graph.
            k2start += 2;
          } else if (!front) {
            var k1_offset = v_offset + delta - k2;
            if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {
              var x1 = v1[k1_offset];
              var y1 = v_offset + x1 - k1_offset;
              // Mirror x2 onto top-left coordinate system.
              x2 = text1_length - x2;
              if (x1 >= x2) {
                // Overlap detected.
                return diff_bisectSplit_(text1, text2, x1, y1);
              }
            }
          }
        }
      }
      // Diff took too long and hit the deadline or
      // number of diffs equals number of characters, no commonality at all.
      return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    }

    /**
     * Given the location of the 'middle snake', split the diff in two parts
     * and recurse.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {number} x Index of split point in text1.
     * @param {number} y Index of split point in text2.
     * @return {Array} Array of diff tuples.
     */
    function diff_bisectSplit_(text1, text2, x, y) {
      var text1a = text1.substring(0, x);
      var text2a = text2.substring(0, y);
      var text1b = text1.substring(x);
      var text2b = text2.substring(y);

      // Compute both diffs serially.
      var diffs = diff_main(text1a, text2a);
      var diffsb = diff_main(text1b, text2b);

      return diffs.concat(diffsb);
    }

    /**
     * Determine the common prefix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the start of each
     *     string.
     */
    function diff_commonPrefix(text1, text2) {
      // Quick check for common null cases.
      if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {
        return 0;
      }
      // Binary search.
      // Performance analysis: http://neil.fraser.name/news/2007/10/09/
      var pointermin = 0;
      var pointermax = Math.min(text1.length, text2.length);
      var pointermid = pointermax;
      var pointerstart = 0;
      while (pointermin < pointermid) {
        if (
          text1.substring(pointerstart, pointermid) ==
          text2.substring(pointerstart, pointermid)
        ) {
          pointermin = pointermid;
          pointerstart = pointermin;
        } else {
          pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }

      if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {
        pointermid--;
      }

      return pointermid;
    }

    /**
     * Determine the common suffix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the end of each string.
     */
    function diff_commonSuffix(text1, text2) {
      // Quick check for common null cases.
      if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {
        return 0;
      }
      // Binary search.
      // Performance analysis: http://neil.fraser.name/news/2007/10/09/
      var pointermin = 0;
      var pointermax = Math.min(text1.length, text2.length);
      var pointermid = pointermax;
      var pointerend = 0;
      while (pointermin < pointermid) {
        if (
          text1.substring(text1.length - pointermid, text1.length - pointerend) ==
          text2.substring(text2.length - pointermid, text2.length - pointerend)
        ) {
          pointermin = pointermid;
          pointerend = pointermin;
        } else {
          pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }

      if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {
        pointermid--;
      }

      return pointermid;
    }

    /**
     * Do the two texts share a substring which is at least half the length of the
     * longer text?
     * This speedup can produce non-minimal diffs.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {Array.<string>} Five element Array, containing the prefix of
     *     text1, the suffix of text1, the prefix of text2, the suffix of
     *     text2 and the common middle.  Or null if there was no match.
     */
    function diff_halfMatch_(text1, text2) {
      var longtext = text1.length > text2.length ? text1 : text2;
      var shorttext = text1.length > text2.length ? text2 : text1;
      if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
        return null;  // Pointless.
      }

      /**
       * Does a substring of shorttext exist within longtext such that the substring
       * is at least half the length of longtext?
       * Closure, but does not reference any external variables.
       * @param {string} longtext Longer string.
       * @param {string} shorttext Shorter string.
       * @param {number} i Start index of quarter length substring within longtext.
       * @return {Array.<string>} Five element Array, containing the prefix of
       *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
       *     of shorttext and the common middle.  Or null if there was no match.
       * @private
       */
      function diff_halfMatchI_(longtext, shorttext, i) {
        // Start with a 1/4 length substring at position i as a seed.
        var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
        var j = -1;
        var best_common = '';
        var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
        while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {
          var prefixLength = diff_commonPrefix(
            longtext.substring(i), shorttext.substring(j));
          var suffixLength = diff_commonSuffix(
            longtext.substring(0, i), shorttext.substring(0, j));
          if (best_common.length < suffixLength + prefixLength) {
            best_common = shorttext.substring(
              j - suffixLength, j) + shorttext.substring(j, j + prefixLength);
            best_longtext_a = longtext.substring(0, i - suffixLength);
            best_longtext_b = longtext.substring(i + prefixLength);
            best_shorttext_a = shorttext.substring(0, j - suffixLength);
            best_shorttext_b = shorttext.substring(j + prefixLength);
          }
        }
        if (best_common.length * 2 >= longtext.length) {
          return [
            best_longtext_a, best_longtext_b,
            best_shorttext_a, best_shorttext_b, best_common
          ];
        } else {
          return null;
        }
      }

      // First check if the second quarter is the seed for a half-match.
      var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
      // Check again based on the third quarter.
      var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
      var hm;
      if (!hm1 && !hm2) {
        return null;
      } else if (!hm2) {
        hm = hm1;
      } else if (!hm1) {
        hm = hm2;
      } else {
        // Both matched.  Select the longest.
        hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
      }

      // A half-match was found, sort out the return data.
      var text1_a, text1_b, text2_a, text2_b;
      if (text1.length > text2.length) {
        text1_a = hm[0];
        text1_b = hm[1];
        text2_a = hm[2];
        text2_b = hm[3];
      } else {
        text2_a = hm[0];
        text2_b = hm[1];
        text1_a = hm[2];
        text1_b = hm[3];
      }
      var mid_common = hm[4];
      return [text1_a, text1_b, text2_a, text2_b, mid_common];
    }

    /**
     * Reorder and merge like edit sections.  Merge equalities.
     * Any edit section can move as long as it doesn't cross an equality.
     * @param {Array} diffs Array of diff tuples.
     * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff
     */
    function diff_cleanupMerge(diffs, fix_unicode) {
      diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
      var pointer = 0;
      var count_delete = 0;
      var count_insert = 0;
      var text_delete = '';
      var text_insert = '';
      var commonlength;
      while (pointer < diffs.length) {
        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
          diffs.splice(pointer, 1);
          continue;
        }
        switch (diffs[pointer][0]) {
          case DIFF_INSERT:

            count_insert++;
            text_insert += diffs[pointer][1];
            pointer++;
            break;
          case DIFF_DELETE:
            count_delete++;
            text_delete += diffs[pointer][1];
            pointer++;
            break;
          case DIFF_EQUAL:
            var previous_equality = pointer - count_insert - count_delete - 1;
            if (fix_unicode) {
              // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,
              // we assume that the old and new text in the diff are complete and correct
              // unicode-encoded JS strings, but the tuple boundaries may fall between
              // surrogate pairs.  we fix this by shaving off stray surrogates from the end
              // of the previous equality and the beginning of this equality.  this may create
              // empty equalities or a common prefix or suffix.  for example, if AB and AC are
              // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and
              // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this
              // particular case, both equalities go away, we absorb any previous inequalities,
              // and we keep scanning for the next equality before rewriting the tuples.
              if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {
                var stray = diffs[previous_equality][1].slice(-1);
                diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);
                text_delete = stray + text_delete;
                text_insert = stray + text_insert;
                if (!diffs[previous_equality][1]) {
                  // emptied out previous equality, so delete it and include previous delete/insert
                  diffs.splice(previous_equality, 1);
                  pointer--;
                  var k = previous_equality - 1;
                  if (diffs[k] && diffs[k][0] === DIFF_INSERT) {
                    count_insert++;
                    text_insert = diffs[k][1] + text_insert;
                    k--;
                  }
                  if (diffs[k] && diffs[k][0] === DIFF_DELETE) {
                    count_delete++;
                    text_delete = diffs[k][1] + text_delete;
                    k--;
                  }
                  previous_equality = k;
                }
              }
              if (starts_with_pair_end(diffs[pointer][1])) {
                var stray = diffs[pointer][1].charAt(0);
                diffs[pointer][1] = diffs[pointer][1].slice(1);
                text_delete += stray;
                text_insert += stray;
              }
            }
            if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
              // for empty equality not at end, wait for next equality
              diffs.splice(pointer, 1);
              break;
            }
            if (text_delete.length > 0 || text_insert.length > 0) {
              // note that diff_commonPrefix and diff_commonSuffix are unicode-aware
              if (text_delete.length > 0 && text_insert.length > 0) {
                // Factor out any common prefixes.
                commonlength = diff_commonPrefix(text_insert, text_delete);
                if (commonlength !== 0) {
                  if (previous_equality >= 0) {
                    diffs[previous_equality][1] += text_insert.substring(0, commonlength);
                  } else {
                    diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);
                    pointer++;
                  }
                  text_insert = text_insert.substring(commonlength);
                  text_delete = text_delete.substring(commonlength);
                }
                // Factor out any common suffixes.
                commonlength = diff_commonSuffix(text_insert, text_delete);
                if (commonlength !== 0) {
                  diffs[pointer][1] =
                    text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                  text_insert = text_insert.substring(0, text_insert.length - commonlength);
                  text_delete = text_delete.substring(0, text_delete.length - commonlength);
                }
              }
              // Delete the offending records and add the merged ones.
              var n = count_insert + count_delete;
              if (text_delete.length === 0 && text_insert.length === 0) {
                diffs.splice(pointer - n, n);
                pointer = pointer - n;
              } else if (text_delete.length === 0) {
                diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);
                pointer = pointer - n + 1;
              } else if (text_insert.length === 0) {
                diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);
                pointer = pointer - n + 1;
              } else {
                diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);
                pointer = pointer - n + 2;
              }
            }
            if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {
              // Merge this equality with the previous one.
              diffs[pointer - 1][1] += diffs[pointer][1];
              diffs.splice(pointer, 1);
            } else {
              pointer++;
            }
            count_insert = 0;
            count_delete = 0;
            text_delete = '';
            text_insert = '';
            break;
        }
      }
      if (diffs[diffs.length - 1][1] === '') {
        diffs.pop();  // Remove the dummy entry at the end.
      }

      // Second pass: look for single edits surrounded on both sides by equalities
      // which can be shifted sideways to eliminate an equality.
      // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
      var changes = false;
      pointer = 1;
      // Intentionally ignore the first and last element (don't need checking).
      while (pointer < diffs.length - 1) {
        if (diffs[pointer - 1][0] === DIFF_EQUAL &&
          diffs[pointer + 1][0] === DIFF_EQUAL) {
          // This is a single edit surrounded by equalities.
          if (diffs[pointer][1].substring(diffs[pointer][1].length -
            diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {
            // Shift the edit over the previous equality.
            diffs[pointer][1] = diffs[pointer - 1][1] +
              diffs[pointer][1].substring(0, diffs[pointer][1].length -
                diffs[pointer - 1][1].length);
            diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
            diffs.splice(pointer - 1, 1);
            changes = true;
          } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
            diffs[pointer + 1][1]) {
            // Shift the edit over the next equality.
            diffs[pointer - 1][1] += diffs[pointer + 1][1];
            diffs[pointer][1] =
              diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
              diffs[pointer + 1][1];
            diffs.splice(pointer + 1, 1);
            changes = true;
          }
        }
        pointer++;
      }
      // If shifts were made, the diff needs reordering and another shift sweep.
      if (changes) {
        diff_cleanupMerge(diffs, fix_unicode);
      }
    }
    function is_surrogate_pair_start(charCode) {
      return charCode >= 0xD800 && charCode <= 0xDBFF;
    }

    function is_surrogate_pair_end(charCode) {
      return charCode >= 0xDC00 && charCode <= 0xDFFF;
    }

    function starts_with_pair_end(str) {
      return is_surrogate_pair_end(str.charCodeAt(0));
    }

    function ends_with_pair_start(str) {
      return is_surrogate_pair_start(str.charCodeAt(str.length - 1));
    }

    function remove_empty_tuples(tuples) {
      var ret = [];
      for (var i = 0; i < tuples.length; i++) {
        if (tuples[i][1].length > 0) {
          ret.push(tuples[i]);
        }
      }
      return ret;
    }

    function make_edit_splice(before, oldMiddle, newMiddle, after) {
      if (ends_with_pair_start(before) || starts_with_pair_end(after)) {
        return null;
      }
      return remove_empty_tuples([
        [DIFF_EQUAL, before],
        [DIFF_DELETE, oldMiddle],
        [DIFF_INSERT, newMiddle],
        [DIFF_EQUAL, after]
      ]);
    }

    function find_cursor_edit_diff(oldText, newText, cursor_pos) {
      // note: this runs after equality check has ruled out exact equality
      var oldRange = typeof cursor_pos === 'number' ?
        { index: cursor_pos, length: 0 } : cursor_pos.oldRange;
      var newRange = typeof cursor_pos === 'number' ?
        null : cursor_pos.newRange;
      // take into account the old and new selection to generate the best diff
      // possible for a text edit.  for example, a text change from "xxx" to "xx"
      // could be a delete or forwards-delete of any one of the x's, or the
      // result of selecting two of the x's and typing "x".
      var oldLength = oldText.length;
      var newLength = newText.length;
      if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {
        // see if we have an insert or delete before or after cursor
        var oldCursor = oldRange.index;
        var oldBefore = oldText.slice(0, oldCursor);
        var oldAfter = oldText.slice(oldCursor);
        var maybeNewCursor = newRange ? newRange.index : null;
        editBefore: {
          // is this an insert or delete right before oldCursor?
          var newCursor = oldCursor + newLength - oldLength;
          if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {
            break editBefore;
          }
          if (newCursor < 0 || newCursor > newLength) {
            break editBefore;
          }
          var newBefore = newText.slice(0, newCursor);
          var newAfter = newText.slice(newCursor);
          if (newAfter !== oldAfter) {
            break editBefore;
          }
          var prefixLength = Math.min(oldCursor, newCursor);
          var oldPrefix = oldBefore.slice(0, prefixLength);
          var newPrefix = newBefore.slice(0, prefixLength);
          if (oldPrefix !== newPrefix) {
            break editBefore;
          }
          var oldMiddle = oldBefore.slice(prefixLength);
          var newMiddle = newBefore.slice(prefixLength);
          return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);
        }
        editAfter: {
          // is this an insert or delete right after oldCursor?
          if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {
            break editAfter;
          }
          var cursor = oldCursor;
          var newBefore = newText.slice(0, cursor);
          var newAfter = newText.slice(cursor);
          if (newBefore !== oldBefore) {
            break editAfter;
          }
          var suffixLength = Math.min(oldLength - cursor, newLength - cursor);
          var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);
          var newSuffix = newAfter.slice(newAfter.length - suffixLength);
          if (oldSuffix !== newSuffix) {
            break editAfter;
          }
          var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);
          var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);
          return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);
        }
      }
      if (oldRange.length > 0 && newRange && newRange.length === 0) {
        replaceRange: {
          // see if diff could be a splice of the old selection range
          var oldPrefix = oldText.slice(0, oldRange.index);
          var oldSuffix = oldText.slice(oldRange.index + oldRange.length);
          var prefixLength = oldPrefix.length;
          var suffixLength = oldSuffix.length;
          if (newLength < prefixLength + suffixLength) {
            break replaceRange;
          }
          var newPrefix = newText.slice(0, prefixLength);
          var newSuffix = newText.slice(newLength - suffixLength);
          if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {
            break replaceRange;
          }
          var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);
          var newMiddle = newText.slice(prefixLength, newLength - suffixLength);
          return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);
        }
      }

      return null;
    }

    function diff(text1, text2, cursor_pos) {
      // only pass fix_unicode=true at the top level, not when diff_main is
      // recursively invoked
      return diff_main(text1, text2, cursor_pos, true);
    }

    diff.INSERT = DIFF_INSERT;
    diff.DELETE = DIFF_DELETE;
    diff.EQUAL = DIFF_EQUAL;

    var diff_1 = diff;

    var AttributeMap$1 = {};

    var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(AttributeMap$1, "__esModule", { value: true });
    var lodash_clonedeep_1$1 = __importDefault$1(lodash_clonedeepExports);
    var lodash_isequal_1$1 = __importDefault$1(lodash_isequalExports);
    var AttributeMap;
    (function (AttributeMap) {
        function compose(a, b, keepNull) {
            if (a === void 0) { a = {}; }
            if (b === void 0) { b = {}; }
            if (typeof a !== 'object') {
                a = {};
            }
            if (typeof b !== 'object') {
                b = {};
            }
            var attributes = lodash_clonedeep_1$1.default(b);
            if (!keepNull) {
                attributes = Object.keys(attributes).reduce(function (copy, key) {
                    if (attributes[key] != null) {
                        copy[key] = attributes[key];
                    }
                    return copy;
                }, {});
            }
            for (var key in a) {
                if (a[key] !== undefined && b[key] === undefined) {
                    attributes[key] = a[key];
                }
            }
            return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
        AttributeMap.compose = compose;
        function diff(a, b) {
            if (a === void 0) { a = {}; }
            if (b === void 0) { b = {}; }
            if (typeof a !== 'object') {
                a = {};
            }
            if (typeof b !== 'object') {
                b = {};
            }
            var attributes = Object.keys(a)
                .concat(Object.keys(b))
                .reduce(function (attrs, key) {
                if (!lodash_isequal_1$1.default(a[key], b[key])) {
                    attrs[key] = b[key] === undefined ? null : b[key];
                }
                return attrs;
            }, {});
            return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
        AttributeMap.diff = diff;
        function invert(attr, base) {
            if (attr === void 0) { attr = {}; }
            if (base === void 0) { base = {}; }
            attr = attr || {};
            var baseInverted = Object.keys(base).reduce(function (memo, key) {
                if (base[key] !== attr[key] && attr[key] !== undefined) {
                    memo[key] = base[key];
                }
                return memo;
            }, {});
            return Object.keys(attr).reduce(function (memo, key) {
                if (attr[key] !== base[key] && base[key] === undefined) {
                    memo[key] = null;
                }
                return memo;
            }, baseInverted);
        }
        AttributeMap.invert = invert;
        function transform(a, b, priority) {
            if (priority === void 0) { priority = false; }
            if (typeof a !== 'object') {
                return b;
            }
            if (typeof b !== 'object') {
                return undefined;
            }
            if (!priority) {
                return b; // b simply overwrites us without priority
            }
            var attributes = Object.keys(b).reduce(function (attrs, key) {
                if (a[key] === undefined) {
                    attrs[key] = b[key]; // null is a valid value
                }
                return attrs;
            }, {});
            return Object.keys(attributes).length > 0 ? attributes : undefined;
        }
        AttributeMap.transform = transform;
    })(AttributeMap || (AttributeMap = {}));
    AttributeMap$1.default = AttributeMap;

    var Op = {};

    var Iterator = {};

    var hasRequiredIterator;

    function requireIterator () {
    	if (hasRequiredIterator) return Iterator;
    	hasRequiredIterator = 1;
    	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(Iterator, "__esModule", { value: true });
    	var Op_1 = __importDefault(requireOp());
    	var Iterator$1 = /** @class */ (function () {
    	    function Iterator(ops) {
    	        this.ops = ops;
    	        this.index = 0;
    	        this.offset = 0;
    	    }
    	    Iterator.prototype.hasNext = function () {
    	        return this.peekLength() < Infinity;
    	    };
    	    Iterator.prototype.next = function (length) {
    	        if (!length) {
    	            length = Infinity;
    	        }
    	        var nextOp = this.ops[this.index];
    	        if (nextOp) {
    	            var offset = this.offset;
    	            var opLength = Op_1.default.length(nextOp);
    	            if (length >= opLength - offset) {
    	                length = opLength - offset;
    	                this.index += 1;
    	                this.offset = 0;
    	            }
    	            else {
    	                this.offset += length;
    	            }
    	            if (typeof nextOp.delete === 'number') {
    	                return { delete: length };
    	            }
    	            else {
    	                var retOp = {};
    	                if (nextOp.attributes) {
    	                    retOp.attributes = nextOp.attributes;
    	                }
    	                if (typeof nextOp.retain === 'number') {
    	                    retOp.retain = length;
    	                }
    	                else if (typeof nextOp.insert === 'string') {
    	                    retOp.insert = nextOp.insert.substr(offset, length);
    	                }
    	                else {
    	                    // offset should === 0, length should === 1
    	                    retOp.insert = nextOp.insert;
    	                }
    	                return retOp;
    	            }
    	        }
    	        else {
    	            return { retain: Infinity };
    	        }
    	    };
    	    Iterator.prototype.peek = function () {
    	        return this.ops[this.index];
    	    };
    	    Iterator.prototype.peekLength = function () {
    	        if (this.ops[this.index]) {
    	            // Should never return 0 if our index is being managed correctly
    	            return Op_1.default.length(this.ops[this.index]) - this.offset;
    	        }
    	        else {
    	            return Infinity;
    	        }
    	    };
    	    Iterator.prototype.peekType = function () {
    	        if (this.ops[this.index]) {
    	            if (typeof this.ops[this.index].delete === 'number') {
    	                return 'delete';
    	            }
    	            else if (typeof this.ops[this.index].retain === 'number') {
    	                return 'retain';
    	            }
    	            else {
    	                return 'insert';
    	            }
    	        }
    	        return 'retain';
    	    };
    	    Iterator.prototype.rest = function () {
    	        if (!this.hasNext()) {
    	            return [];
    	        }
    	        else if (this.offset === 0) {
    	            return this.ops.slice(this.index);
    	        }
    	        else {
    	            var offset = this.offset;
    	            var index = this.index;
    	            var next = this.next();
    	            var rest = this.ops.slice(this.index);
    	            this.offset = offset;
    	            this.index = index;
    	            return [next].concat(rest);
    	        }
    	    };
    	    return Iterator;
    	}());
    	Iterator.default = Iterator$1;
    	
    	return Iterator;
    }

    var hasRequiredOp;

    function requireOp () {
    	if (hasRequiredOp) return Op;
    	hasRequiredOp = 1;
    	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(Op, "__esModule", { value: true });
    	var Iterator_1 = __importDefault(requireIterator());
    	var Op$1;
    	(function (Op) {
    	    function iterator(ops) {
    	        return new Iterator_1.default(ops);
    	    }
    	    Op.iterator = iterator;
    	    function length(op) {
    	        if (typeof op.delete === 'number') {
    	            return op.delete;
    	        }
    	        else if (typeof op.retain === 'number') {
    	            return op.retain;
    	        }
    	        else {
    	            return typeof op.insert === 'string' ? op.insert.length : 1;
    	        }
    	    }
    	    Op.length = length;
    	})(Op$1 || (Op$1 = {}));
    	Op.default = Op$1;
    	
    	return Op;
    }

    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    var fast_diff_1 = __importDefault(diff_1);
    var lodash_clonedeep_1 = __importDefault(lodash_clonedeepExports);
    var lodash_isequal_1 = __importDefault(lodash_isequalExports);
    var AttributeMap_1 = __importDefault(AttributeMap$1);
    var Op_1 = __importDefault(requireOp());
    var NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()
    var Delta$2 = /** @class */ (function () {
        function Delta(ops) {
            // Assume we are given a well formed ops
            if (Array.isArray(ops)) {
                this.ops = ops;
            }
            else if (ops != null && Array.isArray(ops.ops)) {
                this.ops = ops.ops;
            }
            else {
                this.ops = [];
            }
        }
        Delta.prototype.insert = function (arg, attributes) {
            var newOp = {};
            if (typeof arg === 'string' && arg.length === 0) {
                return this;
            }
            newOp.insert = arg;
            if (attributes != null &&
                typeof attributes === 'object' &&
                Object.keys(attributes).length > 0) {
                newOp.attributes = attributes;
            }
            return this.push(newOp);
        };
        Delta.prototype.delete = function (length) {
            if (length <= 0) {
                return this;
            }
            return this.push({ delete: length });
        };
        Delta.prototype.retain = function (length, attributes) {
            if (length <= 0) {
                return this;
            }
            var newOp = { retain: length };
            if (attributes != null &&
                typeof attributes === 'object' &&
                Object.keys(attributes).length > 0) {
                newOp.attributes = attributes;
            }
            return this.push(newOp);
        };
        Delta.prototype.push = function (newOp) {
            var index = this.ops.length;
            var lastOp = this.ops[index - 1];
            newOp = lodash_clonedeep_1.default(newOp);
            if (typeof lastOp === 'object') {
                if (typeof newOp.delete === 'number' &&
                    typeof lastOp.delete === 'number') {
                    this.ops[index - 1] = { delete: lastOp.delete + newOp.delete };
                    return this;
                }
                // Since it does not matter if we insert before or after deleting at the same index,
                // always prefer to insert first
                if (typeof lastOp.delete === 'number' && newOp.insert != null) {
                    index -= 1;
                    lastOp = this.ops[index - 1];
                    if (typeof lastOp !== 'object') {
                        this.ops.unshift(newOp);
                        return this;
                    }
                }
                if (lodash_isequal_1.default(newOp.attributes, lastOp.attributes)) {
                    if (typeof newOp.insert === 'string' &&
                        typeof lastOp.insert === 'string') {
                        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
                        if (typeof newOp.attributes === 'object') {
                            this.ops[index - 1].attributes = newOp.attributes;
                        }
                        return this;
                    }
                    else if (typeof newOp.retain === 'number' &&
                        typeof lastOp.retain === 'number') {
                        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
                        if (typeof newOp.attributes === 'object') {
                            this.ops[index - 1].attributes = newOp.attributes;
                        }
                        return this;
                    }
                }
            }
            if (index === this.ops.length) {
                this.ops.push(newOp);
            }
            else {
                this.ops.splice(index, 0, newOp);
            }
            return this;
        };
        Delta.prototype.chop = function () {
            var lastOp = this.ops[this.ops.length - 1];
            if (lastOp && lastOp.retain && !lastOp.attributes) {
                this.ops.pop();
            }
            return this;
        };
        Delta.prototype.filter = function (predicate) {
            return this.ops.filter(predicate);
        };
        Delta.prototype.forEach = function (predicate) {
            this.ops.forEach(predicate);
        };
        Delta.prototype.map = function (predicate) {
            return this.ops.map(predicate);
        };
        Delta.prototype.partition = function (predicate) {
            var passed = [];
            var failed = [];
            this.forEach(function (op) {
                var target = predicate(op) ? passed : failed;
                target.push(op);
            });
            return [passed, failed];
        };
        Delta.prototype.reduce = function (predicate, initialValue) {
            return this.ops.reduce(predicate, initialValue);
        };
        Delta.prototype.changeLength = function () {
            return this.reduce(function (length, elem) {
                if (elem.insert) {
                    return length + Op_1.default.length(elem);
                }
                else if (elem.delete) {
                    return length - elem.delete;
                }
                return length;
            }, 0);
        };
        Delta.prototype.length = function () {
            return this.reduce(function (length, elem) {
                return length + Op_1.default.length(elem);
            }, 0);
        };
        Delta.prototype.slice = function (start, end) {
            if (start === void 0) { start = 0; }
            if (end === void 0) { end = Infinity; }
            var ops = [];
            var iter = Op_1.default.iterator(this.ops);
            var index = 0;
            while (index < end && iter.hasNext()) {
                var nextOp = void 0;
                if (index < start) {
                    nextOp = iter.next(start - index);
                }
                else {
                    nextOp = iter.next(end - index);
                    ops.push(nextOp);
                }
                index += Op_1.default.length(nextOp);
            }
            return new Delta(ops);
        };
        Delta.prototype.compose = function (other) {
            var thisIter = Op_1.default.iterator(this.ops);
            var otherIter = Op_1.default.iterator(other.ops);
            var ops = [];
            var firstOther = otherIter.peek();
            if (firstOther != null &&
                typeof firstOther.retain === 'number' &&
                firstOther.attributes == null) {
                var firstLeft = firstOther.retain;
                while (thisIter.peekType() === 'insert' &&
                    thisIter.peekLength() <= firstLeft) {
                    firstLeft -= thisIter.peekLength();
                    ops.push(thisIter.next());
                }
                if (firstOther.retain - firstLeft > 0) {
                    otherIter.next(firstOther.retain - firstLeft);
                }
            }
            var delta = new Delta(ops);
            while (thisIter.hasNext() || otherIter.hasNext()) {
                if (otherIter.peekType() === 'insert') {
                    delta.push(otherIter.next());
                }
                else if (thisIter.peekType() === 'delete') {
                    delta.push(thisIter.next());
                }
                else {
                    var length_1 = Math.min(thisIter.peekLength(), otherIter.peekLength());
                    var thisOp = thisIter.next(length_1);
                    var otherOp = otherIter.next(length_1);
                    if (typeof otherOp.retain === 'number') {
                        var newOp = {};
                        if (typeof thisOp.retain === 'number') {
                            newOp.retain = length_1;
                        }
                        else {
                            newOp.insert = thisOp.insert;
                        }
                        // Preserve null when composing with a retain, otherwise remove it for inserts
                        var attributes = AttributeMap_1.default.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
                        if (attributes) {
                            newOp.attributes = attributes;
                        }
                        delta.push(newOp);
                        // Optimization if rest of other is just retain
                        if (!otherIter.hasNext() &&
                            lodash_isequal_1.default(delta.ops[delta.ops.length - 1], newOp)) {
                            var rest = new Delta(thisIter.rest());
                            return delta.concat(rest).chop();
                        }
                        // Other op should be delete, we could be an insert or retain
                        // Insert + delete cancels out
                    }
                    else if (typeof otherOp.delete === 'number' &&
                        typeof thisOp.retain === 'number') {
                        delta.push(otherOp);
                    }
                }
            }
            return delta.chop();
        };
        Delta.prototype.concat = function (other) {
            var delta = new Delta(this.ops.slice());
            if (other.ops.length > 0) {
                delta.push(other.ops[0]);
                delta.ops = delta.ops.concat(other.ops.slice(1));
            }
            return delta;
        };
        Delta.prototype.diff = function (other, cursor) {
            if (this.ops === other.ops) {
                return new Delta();
            }
            var strings = [this, other].map(function (delta) {
                return delta
                    .map(function (op) {
                    if (op.insert != null) {
                        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
                    }
                    var prep = delta === other ? 'on' : 'with';
                    throw new Error('diff() called ' + prep + ' non-document');
                })
                    .join('');
            });
            var retDelta = new Delta();
            var diffResult = fast_diff_1.default(strings[0], strings[1], cursor);
            var thisIter = Op_1.default.iterator(this.ops);
            var otherIter = Op_1.default.iterator(other.ops);
            diffResult.forEach(function (component) {
                var length = component[1].length;
                while (length > 0) {
                    var opLength = 0;
                    switch (component[0]) {
                        case fast_diff_1.default.INSERT:
                            opLength = Math.min(otherIter.peekLength(), length);
                            retDelta.push(otherIter.next(opLength));
                            break;
                        case fast_diff_1.default.DELETE:
                            opLength = Math.min(length, thisIter.peekLength());
                            thisIter.next(opLength);
                            retDelta.delete(opLength);
                            break;
                        case fast_diff_1.default.EQUAL:
                            opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
                            var thisOp = thisIter.next(opLength);
                            var otherOp = otherIter.next(opLength);
                            if (lodash_isequal_1.default(thisOp.insert, otherOp.insert)) {
                                retDelta.retain(opLength, AttributeMap_1.default.diff(thisOp.attributes, otherOp.attributes));
                            }
                            else {
                                retDelta.push(otherOp).delete(opLength);
                            }
                            break;
                    }
                    length -= opLength;
                }
            });
            return retDelta.chop();
        };
        Delta.prototype.eachLine = function (predicate, newline) {
            if (newline === void 0) { newline = '\n'; }
            var iter = Op_1.default.iterator(this.ops);
            var line = new Delta();
            var i = 0;
            while (iter.hasNext()) {
                if (iter.peekType() !== 'insert') {
                    return;
                }
                var thisOp = iter.peek();
                var start = Op_1.default.length(thisOp) - iter.peekLength();
                var index = typeof thisOp.insert === 'string'
                    ? thisOp.insert.indexOf(newline, start) - start
                    : -1;
                if (index < 0) {
                    line.push(iter.next());
                }
                else if (index > 0) {
                    line.push(iter.next(index));
                }
                else {
                    if (predicate(line, iter.next(1).attributes || {}, i) === false) {
                        return;
                    }
                    i += 1;
                    line = new Delta();
                }
            }
            if (line.length() > 0) {
                predicate(line, {}, i);
            }
        };
        Delta.prototype.invert = function (base) {
            var inverted = new Delta();
            this.reduce(function (baseIndex, op) {
                if (op.insert) {
                    inverted.delete(Op_1.default.length(op));
                }
                else if (op.retain && op.attributes == null) {
                    inverted.retain(op.retain);
                    return baseIndex + op.retain;
                }
                else if (op.delete || (op.retain && op.attributes)) {
                    var length_2 = (op.delete || op.retain);
                    var slice = base.slice(baseIndex, baseIndex + length_2);
                    slice.forEach(function (baseOp) {
                        if (op.delete) {
                            inverted.push(baseOp);
                        }
                        else if (op.retain && op.attributes) {
                            inverted.retain(Op_1.default.length(baseOp), AttributeMap_1.default.invert(op.attributes, baseOp.attributes));
                        }
                    });
                    return baseIndex + length_2;
                }
                return baseIndex;
            }, 0);
            return inverted.chop();
        };
        Delta.prototype.transform = function (arg, priority) {
            if (priority === void 0) { priority = false; }
            priority = !!priority;
            if (typeof arg === 'number') {
                return this.transformPosition(arg, priority);
            }
            var other = arg;
            var thisIter = Op_1.default.iterator(this.ops);
            var otherIter = Op_1.default.iterator(other.ops);
            var delta = new Delta();
            while (thisIter.hasNext() || otherIter.hasNext()) {
                if (thisIter.peekType() === 'insert' &&
                    (priority || otherIter.peekType() !== 'insert')) {
                    delta.retain(Op_1.default.length(thisIter.next()));
                }
                else if (otherIter.peekType() === 'insert') {
                    delta.push(otherIter.next());
                }
                else {
                    var length_3 = Math.min(thisIter.peekLength(), otherIter.peekLength());
                    var thisOp = thisIter.next(length_3);
                    var otherOp = otherIter.next(length_3);
                    if (thisOp.delete) {
                        // Our delete either makes their delete redundant or removes their retain
                        continue;
                    }
                    else if (otherOp.delete) {
                        delta.push(otherOp);
                    }
                    else {
                        // We retain either their retain or insert
                        delta.retain(length_3, AttributeMap_1.default.transform(thisOp.attributes, otherOp.attributes, priority));
                    }
                }
            }
            return delta.chop();
        };
        Delta.prototype.transformPosition = function (index, priority) {
            if (priority === void 0) { priority = false; }
            priority = !!priority;
            var thisIter = Op_1.default.iterator(this.ops);
            var offset = 0;
            while (thisIter.hasNext() && offset <= index) {
                var length_4 = thisIter.peekLength();
                var nextType = thisIter.peekType();
                thisIter.next();
                if (nextType === 'delete') {
                    index -= Math.min(length_4, index - offset);
                    continue;
                }
                else if (nextType === 'insert' && (offset < index || !priority)) {
                    index += length_4;
                }
                offset += length_4;
            }
            return index;
        };
        Delta.Op = Op_1.default;
        Delta.AttributeMap = AttributeMap_1.default;
        return Delta;
    }());
    var Delta_1 = Delta$2;

    var IconUndo = "<svg viewbox=\"0 0 18 18\">\n  <polygon class=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\"></polygon>\n  <path class=\"ql-stroke\" d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"></path>\n</svg>";

    var IconRedo = "<svg viewbox=\"0 0 18 18\">\n  <polygon class=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\"></polygon>\n  <path class=\"ql-stroke\" d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"></path>\n</svg>";

    var i18nConfig = {
        en: {
            toolbarHeader: 'Body',
            toolbarFont: 'System',
            fontYahei: 'MS Yahei',
            fontSong: 'SimSun',
            fontKai: 'KaiTi',
            tableDialogLabel: 'Slide & Click',
            imageDialogLocal: 'Select Local Image',
            imageDialogUrlLabel: 'Or input image url',
            iamgeDialogInsert: 'Insert',
            imageDialogTypeErr: 'File type is error, please upload again!',
            imageDialogSizeErr: 'Image size cannot exceed $M',
            placeholder: 'Start Note(Support input markdown)...',
            alignLeft: 'Left align',
            alignRight: 'Right align',
            alignCenter: 'Center align',
            tableBackground: 'Background Colors',
            linkWords: 'Text',
            linkUrl: 'Link',
            linkSave: 'Save',
            linkTarget: 'Link To Url',
            linkClear: 'Remove Link',
            linkUrlErr: 'Please input correct Url!',
            imgStatusUploading: ' Image uploading... ',
            imgStatusFail: ' Upload fail & click to upload again ',
            imgRemarkPre: 'Fig. ',
            imgRemarkLabel: 'Add Remark',
            deleteImg: 'Delete Image',
        },
        zh: {
            toolbarHeader: '正文',
            toolbarFont: '系统字体',
            fontYahei: '微软雅黑',
            fontSong: '宋体',
            fontKai: '楷体',
            tableDialogLabel: '滑动点击生成',
            imageDialogLocal: '选择本地图片',
            imageDialogUrlLabel: '或输入网络图片URL',
            iamgeDialogInsert: '插入',
            imageDialogTypeErr: '图片格式错误，请重新上传！',
            imageDialogSizeErr: '图片大小不能超过$M',
            placeholder: '开始笔记（支持直接Markdown输入）...',
            alignLeft: '居左',
            alignRight: '居右',
            alignCenter: '居中',
            tableBackground: '背景色',
            linkWords: '文本',
            linkUrl: '链接',
            linkSave: '保存',
            linkTarget: '跳转',
            linkClear: '取消链接',
            linkUrlErr: '请输入正确Url！',
            imgStatusUploading: ' 图片上传中... ',
            imgStatusFail: ' 上传失败，点击重新上传 ',
            imgRemarkPre: '图：',
            imgRemarkLabel: '添加备注',
            deleteImg: '删除图片',
        },
    };
    var getI18nText = function (keys, i18n) {
        if (i18n === void 0) { i18n = 'en'; }
        if (Array.isArray(keys))
            return keys.map(function (key) { return i18nConfig[i18n][key]; });
        return i18nConfig[i18n][keys];
    };

    // 匹配URL地址，可以不含协议
    function isUrl(url) {
        return /(?:(https?|ftp|file):\/\/)?[\w\-]+(\.[\w\-]+)+([\w\-.,@?^=%&:\/~+#]*[\w\-@?^=%&\/~+#])?$/.test(url);
    }
    // 匹配邮箱地址
    function isEmail(url) {
        return /^\S+@\S+\.\S+$/.test(url);
    }
    // 是否移动端H5
    function isMobile() {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) ||
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
            return true;
        }
        return false;
    }
    // 设置content
    function setContent(content, quill) {
        var _a;
        // console.log(6666, quill.getModule('imageResize'));
        (_a = quill.getModule('imageResize')) === null || _a === void 0 ? void 0 : _a.hide(); // 在设置新值时，需要将上一个笔记可能遗留的imageResize图层弄消失，不然focus图片后的图层可能会保留
        if (content) {
            if (typeof content === 'object') {
                quill.setContents(content);
            }
            else {
                quill.clipboard.dangerouslyPasteHTML(content);
            }
        }
        else {
            quill.setText('');
        }
    }
    // toolbar的option在disable中切换
    var optionDisableToggle = function (quill, blockList, disable) {
        var toolbar = quill.getModule('toolbar');
        blockList.forEach(function (item) {
            var btns = toolbar.container.querySelectorAll(".ql-" + item);
            btns.forEach(function (btn) {
                if (btn.className.indexOf('ql-picker') >= 0) {
                    var picker = btn.querySelector('.ql-picker-options');
                    if (disable) {
                        picker.setAttribute('style', 'display: none');
                        btn.classList.add('picker-disable');
                    }
                    else {
                        picker.setAttribute('style', '');
                        btn.classList.remove('picker-disable');
                    }
                }
                else {
                    btn.disabled = disable;
                }
            });
        });
    };
    var throttle = function (fn, delay) {
        if (delay === void 0) { delay = 200; }
        var timer = null;
        return function () {
            if (timer)
                return;
            timer = setTimeout(function () {
                fn();
                timer = null;
            }, delay);
        };
    };
    function htmlDecode(str) {
        var div = document.createElement('div');
        div.innerHTML = str;
        return div.innerText;
    }

    // Copy/paste or drag images into the rich-text editor.
    /* 原改编自 'quill-image-drop-module'，主要Bug是
    		1. Quill已支持Drop成Base64图片，当本Module运行时Drop会插入两次base64图片
    		2. paste到table中还是Base64
    		3. 无法上传到服务器
    */

    // 新的Module原理：在text-change时将所有编辑器中有base64的图片都上传，增加uploading状态
    // https://github.com/quilljs/quill/issues/1089#issuecomment-614313509
    class ImageDrop {
      /**
       * Instantiate the module given a quill instance and any options
       * @param {Quill} quill
       * @param {Object} options
       */
      constructor(quill, options = {}) {
        this.quill = quill; // save the quill reference
        this.options = options;
        this.editorContainer = quill.root.parentNode;
        this.imageHandler = options.imageHandler; // 添加图片上传方法
        this.uploadedImgsList = options.uploadedImgsList;
        // if (this.uploadTimer) clearTimeout(this.uploadTimer);
        this.quill.on('text-change', (delta, oldDelta, source) => {
          if (this.imageHandler && this.imageHandler.imgUploadApi) {
            throttle(() => {
              const imgs = quill.container.querySelectorAll(
                'img[src^="data:"]:not(img[data-status=uploading]):not(img[data-status=fail])',
              );

              if (imgs && imgs.length > 0) {
                imgs.forEach((img) => {
                  this.uploadBase64Img(img);
                });
              }
            })();
          }

          // // 当删除图片，该图片的失败tooltip应该删除，此tooltip是在ImageDrop Module中添加
          // for (let i = 0; i < delta.ops.length; i++) {
          //   if (delta.ops[i].hasOwnProperty('delete') && source === 'user') {
          //     // 判断所有 delete 的 img url
          //     const deleted = ImageDrop.getImgUrls(this.quill.getContents().diff(oldDelta));
          //     // getImgUrls(this.quill.getContents()) 能拿到所有现存 img url
          //     if (deleted && deleted.length > 0) {
          //       this.onDelete();
          //     }
          //   }
          // }
          this.onDelete(); // 图片删除、图片后新增换行时去除格式
        });
        // this.b64ToUrl = this.b64ToUrl.bind(this);
      }

      uploadBase64Img(img) {
        console.log('upload img');
        const base64Str = img.getAttribute('src');
        if (typeof base64Str === 'string' && /data:image\/.*;base64,/.test(base64Str)) {
          const words = getI18nText(['imgStatusUploading', 'imgStatusFail'], this.options.i18n);
          img.setAttribute('data-status', 'uploading');
          img.parentNode.classList.add('img-container'); // 只能给图片的父元素添加 after 伪元素，img无法添加
          img.parentNode.setAttribute('data-after', words[0]);
          // const statusDiv = document.createElement('div');
          // statusDiv.classList.add('img-status', 'uploading');
          // statusDiv.innerHTML = '<p>图片上传中...</p>';
          // statusDiv.style.cssText = `left:${img.offsetLeft}px;top:${img.offsetTop}px;display:block;`;
          // this.editorContainer.append(statusDiv);
          const { uploadSuccCB, uploadFailCB } = this.imageHandler;
          this.b64ToUrl(base64Str)
            .then((url) => {
              img.setAttribute('src', url);
              img.setAttribute('data-status', 'success');
              img.parentNode.setAttribute('data-after', '');
              this.uploadedImgsList.push(url);
              if (uploadSuccCB) uploadSuccCB(url);
            })
            .catch((error) => {
              console.log(error);
              img.setAttribute('data-status', 'fail');
              img.parentNode.setAttribute('data-after', words[1]);
              if (uploadFailCB) uploadFailCB(error);
              img.parentNode.onclick = () => this.uploadBase64Img(img);
            });
        }
      }

      onDelete() {
        const allContainers = this.quill.container.querySelectorAll('.img-container[data-after]');
        if (allContainers && allContainers.length > 0) {
          allContainers.forEach((container) => {
            const imgs = container.querySelectorAll('img[src^="data:"]');
            if (!imgs || imgs.length === 0) {
              container.removeAttribute('data-after');
              container.removeAttribute('class');
            }
          });
        }
        // const imgTooltip = this.quill.root.parentNode.querySelectorAll('div.upload-fail');
        // if (imgTooltip.length > 0) {
        //   const base64Img = this.quill.container.querySelectorAll('img[src^="data:"]');
        //   let classList = [];
        //   base64Img.forEach((img) => {
        //     classList = classList.concat(img.className.split(' '));
        //   });
        //   imgTooltip.forEach((tooltip) => {
        //     const match = tooltip.className.split(' ').filter((css) => /i-\w/.test(css));
        //     if (!classList.includes(match[0])) this.quill.root.parentNode.removeChild(tooltip);
        //   });
        // }
      }

      b64ToUrl(base64) {
        return new Promise((resolve, reject) => {
          // Split the base64 string in data and contentType
          const block = base64.split(';');
          // Get the content type of the image
          const contentType = block[0].split(':')[1];
          // get the real base64 content of the file
          const realData = block[1].split(',')[1];
          // Convert it to a blob to upload
          const blob = ImageDrop.b64toBlob(realData, contentType);

          const { imgUploadApi } = this.imageHandler;
          ImageDrop.uploadImg(
            blob,
            imgUploadApi,
            (url) => {
              resolve(url);
            },
            (error) => {
              reject(error);
            },
          );
        });
      }

      // 获取 delta 中所有图片 URL：https://github.com/quilljs/quill/issues/2041#issuecomment-492488030
      static getImgUrls(delta) {
        return delta.ops.filter((i) => i.insert && i.insert.image).map((i) => i.insert.image);
      }

      /**
       * Convert a base64 string in a Blob according to the data and contentType.
       *
       * @param b64Data {String} Pure base64 string without contentType
       * @param contentType {String} the content type of the file i.e (image/jpeg - image/png - text/plain)
       * @param sliceSize {Int} SliceSize to process the byteCharacters
       * @see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript
       * @return Blob
       */
      static b64toBlob(b64Data, contentType, sliceSize) {
        contentType = contentType || '';
        sliceSize = sliceSize || 512;

        const byteCharacters = atob(b64Data);
        const byteArrays = [];

        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
          const slice = byteCharacters.slice(offset, offset + sliceSize);

          const byteNumbers = new Array(slice.length);
          for (let i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
          }

          const byteArray = new Uint8Array(byteNumbers);

          byteArrays.push(byteArray);
        }

        return new Blob(byteArrays, { type: contentType });
      }

      static uploadImg = (blob, imgUploadApi, uploadSuccCB, uploadFailCB) => {
        try {
          const formData = new FormData();
          formData.append('file', blob, blob.name || `default.${blob.type.split('/')[1]}`);
          imgUploadApi(formData)
            .then((url) => {
              uploadSuccCB(url);
            })
            .catch((error) => {
              console.log('upload img error: ', error);
              uploadFailCB(error);
            });
        } catch (e) {
          console.log('uploadImg: ', e);
          uploadFailCB(e);
        }
      };
      // showFailTooltip(img, id) {
      //   if (img) {
      //     const base64Str = img.getAttribute('src');
      //     if (typeof base64Str === 'string' && /data:image\/.*;base64,/.test(base64Str)) {
      //       const rect = img.getBoundingClientRect();

      //       const tooltip = this.editorContainer.querySelector(`div.i-${id}`);
      //       const tooltip = img.parent.querySelector('.img-status');
      //       img.parent.style.position = 'relative';
      //       const containerRect = img.parent.getBoundingClientRect();
      //       if (tooltip) {
      //         tooltip.style.cssText = `${tooltip.style.cssText}left:${
      //           rect.left - containerRect.left - 1 + this.editorContainer.scrollLeft
      //         }px;top:${rect.top - containerRect.top + this.editorContainer.scrollTop}px;max-height:${
      //           img.height
      //         }px;max-width:${img.width}px;display: block;`;
      //         // setTimeout(() => {
      //         //   tooltip.style.display = 'none';
      //         // }, 2000);
      //       }
      //     } else {
      //       // 已经上传成功的图片删除失败tooltip
      //       img.parentNode.removeChild(
      //         // this.quill.root.parentNode.querySelector(`div.i-${id}`),
      //         img.parent.querySelector('.img-status'),
      //       );
      //     }
      //   }
      // }
    }

    var IconAlignLeft = "<svg viewbox=\"0 0 18 18\">\n  <line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"9\" y2=\"9\"></line>\n  <line class=\"ql-stroke\" x1=\"3\" x2=\"13\" y1=\"14\" y2=\"14\"></line>\n  <line class=\"ql-stroke\" x1=\"3\" x2=\"9\" y1=\"4\" y2=\"4\"></line>\n</svg>";

    var IconAlignCenter = "<svg viewbox=\"0 0 18 18\">\n  <line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"></line>\n  <line class=\"ql-stroke\" x1=\"14\" x2=\"4\" y1=\"14\" y2=\"14\"></line>\n  <line class=\"ql-stroke\" x1=\"12\" x2=\"6\" y1=\"4\" y2=\"4\"></line>\n</svg>";

    var IconAlignRight = "<svg viewbox=\"0 0 18 18\">\n  <line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"></line>\n  <line class=\"ql-stroke\" x1=\"15\" x2=\"5\" y1=\"14\" y2=\"14\"></line>\n  <line class=\"ql-stroke\" x1=\"15\" x2=\"9\" y1=\"4\" y2=\"4\"></line>\n</svg>";

    var deleteIcon = "<svg width=\"18px\" height=\"18px\" viewBox=\"64 64 896 896\" focusable=\"false\" width=\"1em\" height=\"1em\" aria-hidden=\"true\"><path class=\"ql-fill\" d=\"M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z\"></path></svg>";

    var Words = "<svg class=\"icon\" viewBox=\"0 0 1024 1024\" p-id=\"1605\" width=\"22\" height=\"22\"><path class=\"ql-fill\" d=\"M640 272H192a32 32 0 0 1 0-64h448a32 32 0 0 1 0 64zM832 480H576a32 32 0 0 1 0-64h256a32 32 0 0 1 0 64z\" fill=\"#444444\"></path><path class=\"ql-fill\" d=\"M416 816a32 32 0 0 1-32-32v-544a32 32 0 0 1 64 0v544a32 32 0 0 1-32 32zM704 816a32 32 0 0 1-32-32V448a32 32 0 0 1 64 0v336a32 32 0 0 1-32 32z\" fill=\"#444444\"></path></svg>";

    var unlinkIcon = "<svg viewBox=\"0 0 1024 1024\" p-id=\"7520\" width=\"20\" height=\"20\"><path class=\"ql-fill\" d=\"M384 128v128h64V128H384zM523.328 613.824l-147.072 147.072a80 80 0 0 1-113.152-113.152l147.072-147.072-45.248-45.248-147.072 147.072a144 144 0 0 0 203.648 203.648l147.072-147.072-45.248-45.248zM613.76 523.328l45.312 45.248 147.072-147.072a144 144 0 1 0-203.648-203.648L455.424 364.928l45.248 45.248 147.072-147.072a80 80 0 0 1 113.152 113.152L613.824 523.328zM768 576h128v64h-128V576zM128 448h128V384H128v64zM640 768v128H576v-128h64zM750.848 705.6l103.808 103.744-45.312 45.248-103.68-103.68 45.184-45.312zM169.344 214.592l103.808 103.808 45.248-45.248-103.744-103.808-45.312 45.248z\"></path></svg>";

    var jumpIcon = "<svg viewBox=\"0 0 1024 1024\" width=\"18\" height=\"18\"><path class=\"ql-fill\" d=\"M385.088 85.333333a42.666667 42.666667 0 1 1 0 85.333334H213.333333a42.666667 42.666667 0 0 0-42.666666 42.666666v597.333334a42.666667 42.666667 0 0 0 42.666666 42.666666h597.333334a42.666667 42.666667 0 0 0 42.666666-42.666666V640a42.666667 42.666667 0 1 1 85.333334 0v170.666667c0 70.688-57.312 128-128 128H213.333333c-70.688 0-128-57.312-128-128V213.333333c0-70.688 57.312-128 128-128z m517.44 0.501334l0.64 0.106666c0.501333 0.074667 0.992 0.170667 1.482667 0.266667l0.170666 0.042667c1.344 0.277333 2.666667 0.618667 3.946667 1.024l0.469333 0.149333a38.186667 38.186667 0 0 1 5.248 2.112c1.568 0.746667 3.114667 1.610667 4.608 2.570667l0.138667 0.106666 1.653333 1.12a42.730667 42.730667 0 0 1 5.28 4.501334l-1.098666-1.066667 0.682666 0.650667 0.426667 0.416a43.52 43.52 0 0 1 3.104 3.456l1.386667 1.834666a42.762667 42.762667 0 0 1 5.909333 11.637334l0.138667 0.458666c0.576 1.813333 1.024 3.690667 1.354666 5.6l0.106667 0.64 0.032 0.234667c0.298667 2.058667 0.458667 4.16 0.458667 6.304v277.333333a42.666667 42.666667 0 1 1-85.333334 0V230.997333L542.165333 542.165333a42.666667 42.666667 0 0 1-58.634666 1.610667l-1.706667-1.6a42.666667 42.666667 0 0 1 0-60.341333L792.992 170.666667H618.666667a42.666667 42.666667 0 0 1-42.613334-40.533334L576 128a42.666667 42.666667 0 0 1 42.666667-42.666667h277.333333a43.178667 43.178667 0 0 1 6.304 0.458667l0.224 0.042667z\" p-id=\"9528\"></path></svg>";

    var iconsConfig = {
        unlinkIcon: unlinkIcon,
        jumpIcon: jumpIcon,
    };
    var genIconDom = function (icon, title, className) {
        return "<span class=\"" + (className || 'flex flex-center') + "\" onmouseenter=\"showTitle(this, '" + title + "')\" style=\"width:100%;height:100%;\">" + icon + "</span>";
    };

    /*
    调整图片大小
    主要参考quill-image-resize-module，但是原包依赖quill版本较低，会导致包体积大（还有lodash）；另外必须window上有Quill，在建构工具中添加变量会导致和syntax的highlight冲突
    */

    const DefaultOptions = {
      modules: ['DisplaySize', 'Toolbar', 'Resize'],
      overlayStyles: {
        position: 'absolute',
        zIndex: 10,
        border: '1px dashed #dbc8ff',
      },
      handleStyles: {
        position: 'absolute',
        height: '12px',
        width: '12px',
        backgroundColor: 'white',
        border: '1px solid #777',
        opacity: '0.60',
      },
      displayStyles: {
        position: 'absolute',
        padding: '4px 8px',
        textAlign: 'center',
        backgroundColor: 'white',
        color: '#333',
        border: '1px solid #e7e7e7',
        opacity: '0.70',
        cursor: 'default',
      },
      toolbarStyles: {
        position: 'absolute',
        top: '-12px',
        left: 'calc(50% - 36px)',
        textAlign: 'center',
        color: '#333',
        width: '72px',
        display: 'flex',
        flexWrap: 'wrap',
        justifyContent: 'center',
      },
      toolbarButtonStyles: {
        display: 'flex',
        width: '24px',
        height: '24px',
        background: 'white',
        border: '1px solid #e7e7e7',
        cursor: 'pointer',
        zIndex: 12,
        justifyContent: 'center',
        alignItems: 'center',
      },
      toolbarButtonSvgStyles: {
        // fill: '#6918b4',
        // stroke: '#6918b4',
        // strokeWidth: '1',
      },
    };

    class BaseModule {
      constructor(resizer) {
        this.overlay = resizer.overlay;
        this.img = resizer.img;
        this.options = resizer.options;
        this.requestUpdate = resizer.onUpdate;
      }
      /*
            requestUpdate (passed in by the library during construction, above) can be used to let the library know that
            you've changed something about the image that would require re-calculating the overlay (and all of its child
            elements)
            For example, if you add a margin to the element, you'll want to call this or else all the controls will be
            misaligned on-screen.
         */

      /*
            onCreate will be called when the element is clicked on
            If the module has any user controls, it should create any containers that it'll need here.
            The overlay has absolute positioning, and will be automatically repositioned and resized as needed, so you can
            use your own absolute positioning and the 'top', 'right', etc. styles to be positioned relative to the element
            on-screen.
         */
      onCreate() {}

      /*
            onDestroy will be called when the element is de-selected, or when this module otherwise needs to tidy up.
            If you created any DOM elements in onCreate, please remove them from the DOM and destroy them here.
         */
      onDestroy() {}

      /*
            onUpdate will be called any time that the element is changed (e.g. resized, aligned, etc.)
            This frequently happens during resize dragging, so keep computations light while here to ensure a smooth
            user experience.
         */
      onUpdate() {}
    }

    class DisplaySize extends BaseModule {
      onCreate = () => {
        // Create the container to hold the size display
        this.display = document.createElement('div');

        // Apply styles
        Object.assign(this.display.style, this.options.displayStyles);

        // Attach it
        this.overlay.appendChild(this.display);
      };

      onDestroy() {}

      onUpdate = () => {
        if (!this.display || !this.img) {
          return;
        }

        const size = this.getCurrentSize();
        this.display.innerHTML = size.join(' &times; ');
        if (size[0] > 120 && size[1] > 30) {
          // position on top of image
          Object.assign(this.display.style, {
            right: '4px',
            bottom: '4px',
            left: 'auto',
          });
        } else if (this.img.style.float === 'right') {
          // position off bottom left
          const dispRect = this.display.getBoundingClientRect();
          Object.assign(this.display.style, {
            right: 'auto',
            bottom: `-${dispRect.height + 4}px`,
            left: `-${dispRect.width + 4}px`,
          });
        } else {
          // position off bottom right
          const dispRect = this.display.getBoundingClientRect();
          Object.assign(this.display.style, {
            right: `-${dispRect.width + 4}px`,
            bottom: `-${dispRect.height + 4}px`,
            left: 'auto',
          });
        }
      };

      getCurrentSize = () => [
        this.img.width,
        Math.round((this.img.width / this.img.naturalWidth) * this.img.naturalHeight),
      ];
    }

    class Resize extends BaseModule {
      isMobile = isMobile();

      onCreate = () => {
        // track resize handles
        this.boxes = [];

        // add 4 resize handles
        this.addBox('nwse-resize'); // top left
        this.addBox('nesw-resize'); // top right
        this.addBox('nwse-resize'); // bottom right
        this.addBox('nesw-resize'); // bottom left

        this.positionBoxes();
      };

      onDestroy = () => {
        // reset drag handle cursors
        this.setCursor('');
      };

      positionBoxes = () => {
        const handleXOffset = `${-parseFloat(this.options.handleStyles.width) / 2}px`;
        const handleYOffset = `${-parseFloat(this.options.handleStyles.height) / 2}px`;

        // set the top and left for each drag handle
        [
          { left: handleXOffset, top: handleYOffset }, // top left
          { right: handleXOffset, top: handleYOffset }, // top right
          { right: handleXOffset, bottom: handleYOffset }, // bottom right
          { left: handleXOffset, bottom: handleYOffset }, // bottom left
        ].forEach((pos, idx) => {
          Object.assign(this.boxes[idx].style, pos);
        });
      };

      addBox = (cursor) => {
        // create div element for resize handle
        const box = document.createElement('div');

        // Star with the specified styles
        Object.assign(box.style, this.options.handleStyles);
        box.style.cursor = cursor;

        // Set the width/height to use 'px'
        box.style.width = `${this.options.handleStyles.width}px`;
        box.style.height = `${this.options.handleStyles.height}px`;

        // listen for mousedown on each box
        if (this.isMobile) {
          box.addEventListener('touchstart', this.handleMousedown, false);
        } else {
          box.addEventListener('mousedown', this.handleMousedown, false);
        }
        // add drag handle to document
        this.overlay.appendChild(box);
        // keep track of drag handle
        this.boxes.push(box);
      };

      handleMousedown = (evt) => {
        // note which box
        this.dragBox = evt.target;
        // note starting mousedown position
        if (this.isMobile) {
          this.dragStartX = evt.touches[0].clientX;
        } else {
          this.dragStartX = evt.clientX;
        }
        // store the width before the drag
        this.preDragWidth = this.img.width || this.img.naturalWidth;
        // set the proper cursor everywhere
        this.setCursor(this.dragBox.style.cursor);
        // listen for movement and mouseup
        if (this.isMobile) {
          document.addEventListener('touchmove', this.handleDrag, false);
          document.addEventListener('touchend', this.handleMouseup, false);
        } else {
          document.addEventListener('mousemove', this.handleDrag, false);
          document.addEventListener('mouseup', this.handleMouseup, false);
        }
      };

      handleMouseup = () => {
        // reset cursor everywhere
        this.setCursor('');
        // stop listening for movement and mouseup
        if (this.isMobile) {
          document.removeEventListener('touchmove', this.handleDrag);
          document.removeEventListener('touchend', this.handleMouseup);
        } else {
          document.removeEventListener('mousemove', this.handleDrag);
          document.removeEventListener('mouseup', this.handleMouseup);
        }
      };

      handleDrag = (evt) => {
        if (!this.img) {
          // image not set yet
          return;
        }
        // update image size
        let clientX;
        if (this.isMobile) {
          clientX = evt.touches[0].clientX;
        } else {
          clientX = evt.clientX;
        }
        const deltaX = clientX - this.dragStartX;
        if (this.dragBox === this.boxes[0] || this.dragBox === this.boxes[3]) {
          // left-side resize handler; dragging right shrinks image
          this.img.width = Math.round(this.preDragWidth - deltaX);
        } else {
          // right-side resize handler; dragging right enlarges image
          this.img.width = Math.round(this.preDragWidth + deltaX);
        }
        this.requestUpdate();
      };

      setCursor = (value) => {
        [document.body, this.img].forEach((el) => {
          el.style.cursor = value; // eslint-disable-line no-param-reassign
        });
      };
    }

    const Parchment = Quill.imports.parchment;
    const FloatStyle = new Parchment.StyleAttributor('float', 'float');
    const MarginStyle = new Parchment.StyleAttributor('margin', 'margin');
    const DisplayStyle = new Parchment.StyleAttributor('display', 'display');

    class Toolbar extends BaseModule {
      constructor(props) {
        super(props);
        this.quill = props.quill;
        this.hide = props.hide;
        this.options = props.options;
      }
      onCreate = () => {
        // Setup Toolbar
        this.toolbar = document.createElement('div');
        Object.assign(this.toolbar.style, this.options.toolbarStyles);
        this.overlay.appendChild(this.toolbar);

        // Setup Buttons
        this._defineAlignments();
        this._addToolbarButtons();
      };

      // The toolbar and its children will be destroyed when the overlay is removed
      onDestroy() {}

      // Nothing to update on drag because we are are positioned relative to the overlay
      onUpdate() {}

      _defineAlignments = () => {
        const index = this.quill.getIndex(Quill.find(this.img)); // the index of image
        this.alignments = [
          {
            icon: IconAlignLeft,
            apply: () => {
              DisplayStyle.add(this.img, 'inline');
              FloatStyle.add(this.img, 'left');
              MarginStyle.add(this.img, '0 1em 1em 0');
              this.quill.formatLine(index + 2, 1, 'align', false); // 左对齐在 Quill 其实是不设置 align，设置 align=left 反而有问题
              // this.img.parentNode.classList.add('')
            },
            isApplied: () => FloatStyle.value(this.img) === 'left',
          },
          {
            icon: IconAlignCenter,
            apply: () => {
              DisplayStyle.add(this.img, 'block');
              FloatStyle.remove(this.img);
              MarginStyle.add(this.img, 'auto');
              this.quill.formatLine(index + 2, 1, 'align', 'center');
              this.img.parentNode.classList.add('img-center');
            },
            isApplied: () => MarginStyle.value(this.img) === 'auto',
          },
          {
            icon: IconAlignRight,
            apply: () => {
              DisplayStyle.add(this.img, 'inline');
              FloatStyle.add(this.img, 'right');
              MarginStyle.add(this.img, '0 0 1em 1em');
              this.quill.formatLine(index + 2, 1, 'align', 'right');
              this.img.parentNode.classList.add('float-right');
            },
            isApplied: () => FloatStyle.value(this.img) === 'right',
          },
          {
            icon: Words,
            apply: () => {
              let align;
              if (MarginStyle.value(this.img) === 'auto') {
                align = 'center';
              } else if (FloatStyle.value(this.img)) {
                align = FloatStyle.value(this.img);
              }
              const imgRemarkPre =
                this.options.imgRemarkPre || getI18nText('imgRemarkPre', this.options.i18n);
              this.quill.insertText(index + 1, `\n${imgRemarkPre}`, { color: '#999999', size: '12px' });
              this.quill.insertText(index + 2 + imgRemarkPre.length, '\n', { align });
              this.quill.setSelection(index + 2 + imgRemarkPre.length, Quill.sources.SILENT);
              this.img.setAttribute('data-remark', '1');
            },
            isApplied: () => this.img.getAttribute('data-remark') === '1',
          },
          {
            icon: deleteIcon,
            apply: () => {
              Quill.find(this.img).deleteAt(0);
              this.hide();
            },
            isApplied: () => false,
          },
        ];
      };

      _addToolbarButtons = () => {
        const buttons = [];
        const words = getI18nText(['alignLeft', 'alignCenter', 'alignRight', 'imgRemarkLabel', 'deleteImg'], this.options.i18n);
        this.alignments.forEach((alignment, idx) => {
          const button = document.createElement('span');
          buttons.push(button);
          button.innerHTML = genIconDom(alignment.icon, words[idx]);
          button.addEventListener('click', () => {
            // deselect all buttons
            buttons.forEach((bt, index) => {
              if (index !== 3) bt.style.filter = ''; // 第 4 位是备注，可以和其他共存
            });
            if (alignment.isApplied()) {
              // If applied, unapply
              FloatStyle.remove(this.img);
              MarginStyle.remove(this.img);
              DisplayStyle.remove(this.img);
            } else {
              // otherwise, select button and apply
              this._selectButton(button);
              alignment.apply();
            }
            // image may change position; redraw drag handles
            this.requestUpdate();
          });
          Object.assign(button.style, this.options.toolbarButtonStyles);
          if (idx > 0) {
            button.style.borderLeftWidth = '0';
          }
          // 注释掉这行代码，有报错，参考：https://github.com/kensnyder/quill-image-resize-module/issues/39
          // Object.assign(
          //   button.children[0].style,
          //   this.options.toolbarButtonSvgStyles,
          // );
          if (alignment.isApplied()) {
            // select button if previously applied
            this._selectButton(button);
          }
          this.toolbar.appendChild(button);
        });
      };

      _selectButton(button) {
        button.style.filter = 'invert(20%)';
      }
    }

    const knownModules = { DisplaySize, Toolbar, Resize };
    class ImageResize {
      constructor(quill, options = {}) {
        // save the quill reference and options
        this.quill = quill;

        // Apply the options to our defaults, and stash them for later
        // defaultsDeep doesn't do arrays as you'd expect, so we'll need to apply the classes array from options separately
        let moduleClasses = false;
        if (options.modules) {
          moduleClasses = options.modules.slice();
        }

        // Apply options to default options
        // this.options = defaultsDeep({}, options, DefaultOptions);
        this.options = { ...DefaultOptions, ...options };

        // (see above about moduleClasses)
        if (moduleClasses !== false) {
          this.options.modules = moduleClasses;
        }

        // disable native image resizing on firefox
        document.execCommand('enableObjectResizing', false, 'false');

        // respond to clicks inside the editor
        this.quill.root.addEventListener('click', this.handleClick, false);

        this.quill.root.parentNode.style.position =
          this.quill.root.parentNode.style.position || 'relative';

        // setup modules
        this.moduleClasses = this.options.modules;

        this.modules = [];
      }

      initializeModules = () => {
        this.removeModules();

        this.modules = this.moduleClasses.map(
          (ModuleClass) => new (knownModules[ModuleClass] || ModuleClass)(this),
        );

        this.modules.forEach((module) => {
          module.onCreate();
        });

        this.onUpdate();
      };

      onUpdate = () => {
        this.repositionElements();
        this.modules.forEach((module) => {
          module.onUpdate();
        });
      };

      removeModules = () => {
        this.modules.forEach((module) => {
          module.onDestroy();
        });

        this.modules = [];
      };

      handleClick = (evt) => {
        if (evt.target && evt.target.tagName && evt.target.tagName.toUpperCase() === 'IMG') {
          if (this.img === evt.target) {
            // we are already focused on this image
            return;
          }
          if (this.img) {
            // we were just focused on another image
            this.hide();
          }
          // clicked on an image inside the editor
          this.show(evt.target);
        } else if (this.img) {
          // clicked on a non image
          this.hide();
        }
      };

      show = (img) => {
        // keep track of this img element
        this.img = img;

        this.showOverlay();

        this.initializeModules();
      };

      showOverlay = () => {
        if (this.overlay) {
          this.hideOverlay();
        }

        // this.quill.setSelection(null);

        // prevent spurious text selection
        this.setUserSelect('none');

        // listen for the image being deleted or moved
        document.addEventListener('keyup', this.checkImage, true);
        this.quill.root.addEventListener('input', this.checkImage, true);

        // Create and add the overlay
        this.overlay = document.createElement('div');
        Object.assign(this.overlay.style, this.options.overlayStyles);

        this.quill.root.parentNode.appendChild(this.overlay);
        // 编辑器滚动隐藏 overlay
        this.quill.root.addEventListener('scroll', throttle(() => {
          if (this.img && this.overlay) {
            this.hide();
          }
        }));

        this.repositionElements();
      };

      hideOverlay = () => {
        if (!this.overlay) {
          return;
        }

        // Remove the overlay
        this.quill.root.parentNode.removeChild(this.overlay);
        this.overlay = undefined;

        // stop listening for image deletion or movement
        document.removeEventListener('keyup', this.checkImage);
        this.quill.root.removeEventListener('input', this.checkImage);

        // reset user-select
        this.setUserSelect('');
      };

      repositionElements = () => {
        if (!this.overlay || !this.img) {
          return;
        }

        // position the overlay over the image
        const parent = this.quill.root.parentNode;
        const imgRect = this.img.getBoundingClientRect();
        const containerRect = parent.getBoundingClientRect();

        Object.assign(this.overlay.style, {
          left: `${imgRect.left - containerRect.left - 1 + parent.scrollLeft}px`,
          top: `${imgRect.top - containerRect.top + parent.scrollTop}px`,
          width: `${imgRect.width}px`,
          height: `${imgRect.height}px`,
        });
      };

      hide = () => {
        this.hideOverlay();
        this.removeModules();
        this.img = undefined;
      };

      setUserSelect = (value) => {
        ['userSelect', 'mozUserSelect', 'webkitUserSelect', 'msUserSelect'].forEach((prop) => {
          // set on contenteditable element and <html>
          this.quill.root.style[prop] = value;
          document.documentElement.style[prop] = value;
        });
      };

      checkImage = (evt) => {
        if (this.img) {
          if (evt.keyCode === 46 || evt.keyCode === 8) {
            Quill.find(this.img).deleteAt(0); // find为静态方法，原来这里有 bug 未生效
          }
          this.hide();
        }
      };
    }

    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
    const DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';
    const DATA_URL_DEFAULT_CHARSET = 'us-ascii';

    const testParameter = (name, filters) => filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);

    const supportedProtocols = new Set([
    	'https:',
    	'http:',
    	'file:',
    ]);

    const hasCustomProtocol = urlString => {
    	try {
    		const {protocol} = new URL(urlString);
    		return protocol.endsWith(':') && !supportedProtocols.has(protocol);
    	} catch {
    		return false;
    	}
    };

    const normalizeDataURL = (urlString, {stripHash}) => {
    	const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);

    	if (!match) {
    		throw new Error(`Invalid URL: ${urlString}`);
    	}

    	let {type, data, hash} = match.groups;
    	const mediaType = type.split(';');
    	hash = stripHash ? '' : hash;

    	let isBase64 = false;
    	if (mediaType[mediaType.length - 1] === 'base64') {
    		mediaType.pop();
    		isBase64 = true;
    	}

    	// Lowercase MIME type
    	const mimeType = mediaType.shift()?.toLowerCase() ?? '';
    	const attributes = mediaType
    		.map(attribute => {
    			let [key, value = ''] = attribute.split('=').map(string => string.trim());

    			// Lowercase `charset`
    			if (key === 'charset') {
    				value = value.toLowerCase();

    				if (value === DATA_URL_DEFAULT_CHARSET) {
    					return '';
    				}
    			}

    			return `${key}${value ? `=${value}` : ''}`;
    		})
    		.filter(Boolean);

    	const normalizedMediaType = [
    		...attributes,
    	];

    	if (isBase64) {
    		normalizedMediaType.push('base64');
    	}

    	if (normalizedMediaType.length > 0 || (mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE)) {
    		normalizedMediaType.unshift(mimeType);
    	}

    	return `data:${normalizedMediaType.join(';')},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ''}`;
    };

    function normalizeUrl(urlString, options) {
    	options = {
    		defaultProtocol: 'http',
    		normalizeProtocol: true,
    		forceHttp: false,
    		forceHttps: false,
    		stripAuthentication: true,
    		stripHash: false,
    		stripTextFragment: true,
    		stripWWW: true,
    		removeQueryParameters: [/^utm_\w+/i],
    		removeTrailingSlash: true,
    		removeSingleSlash: true,
    		removeDirectoryIndex: false,
    		removeExplicitPort: false,
    		sortQueryParameters: true,
    		...options,
    	};

    	// Legacy: Append `:` to the protocol if missing.
    	if (typeof options.defaultProtocol === 'string' && !options.defaultProtocol.endsWith(':')) {
    		options.defaultProtocol = `${options.defaultProtocol}:`;
    	}

    	urlString = urlString.trim();

    	// Data URL
    	if (/^data:/i.test(urlString)) {
    		return normalizeDataURL(urlString, options);
    	}

    	if (hasCustomProtocol(urlString)) {
    		return urlString;
    	}

    	const hasRelativeProtocol = urlString.startsWith('//');
    	const isRelativeUrl = !hasRelativeProtocol && /^\.*\//.test(urlString);

    	// Prepend protocol
    	if (!isRelativeUrl) {
    		urlString = urlString.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, options.defaultProtocol);
    	}

    	const urlObject = new URL(urlString);

    	if (options.forceHttp && options.forceHttps) {
    		throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');
    	}

    	if (options.forceHttp && urlObject.protocol === 'https:') {
    		urlObject.protocol = 'http:';
    	}

    	if (options.forceHttps && urlObject.protocol === 'http:') {
    		urlObject.protocol = 'https:';
    	}

    	// Remove auth
    	if (options.stripAuthentication) {
    		urlObject.username = '';
    		urlObject.password = '';
    	}

    	// Remove hash
    	if (options.stripHash) {
    		urlObject.hash = '';
    	} else if (options.stripTextFragment) {
    		urlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, '');
    	}

    	// Remove duplicate slashes if not preceded by a protocol
    	// NOTE: This could be implemented using a single negative lookbehind
    	// regex, but we avoid that to maintain compatibility with older js engines
    	// which do not have support for that feature.
    	if (urlObject.pathname) {
    		// TODO: Replace everything below with `urlObject.pathname = urlObject.pathname.replace(/(?<!\b[a-z][a-z\d+\-.]{1,50}:)\/{2,}/g, '/');` when Safari supports negative lookbehind.

    		// Split the string by occurrences of this protocol regex, and perform
    		// duplicate-slash replacement on the strings between those occurrences
    		// (if any).
    		const protocolRegex = /\b[a-z][a-z\d+\-.]{1,50}:\/\//g;

    		let lastIndex = 0;
    		let result = '';
    		for (;;) {
    			const match = protocolRegex.exec(urlObject.pathname);
    			if (!match) {
    				break;
    			}

    			const protocol = match[0];
    			const protocolAtIndex = match.index;
    			const intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);

    			result += intermediate.replace(/\/{2,}/g, '/');
    			result += protocol;
    			lastIndex = protocolAtIndex + protocol.length;
    		}

    		const remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);
    		result += remnant.replace(/\/{2,}/g, '/');

    		urlObject.pathname = result;
    	}

    	// Decode URI octets
    	if (urlObject.pathname) {
    		try {
    			urlObject.pathname = decodeURI(urlObject.pathname);
    		} catch {}
    	}

    	// Remove directory index
    	if (options.removeDirectoryIndex === true) {
    		options.removeDirectoryIndex = [/^index\.[a-z]+$/];
    	}

    	if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {
    		let pathComponents = urlObject.pathname.split('/');
    		const lastComponent = pathComponents[pathComponents.length - 1];

    		if (testParameter(lastComponent, options.removeDirectoryIndex)) {
    			pathComponents = pathComponents.slice(0, -1);
    			urlObject.pathname = pathComponents.slice(1).join('/') + '/';
    		}
    	}

    	if (urlObject.hostname) {
    		// Remove trailing dot
    		urlObject.hostname = urlObject.hostname.replace(/\.$/, '');

    		// Remove `www.`
    		if (options.stripWWW && /^www\.(?!www\.)[a-z\-\d]{1,63}\.[a-z.\-\d]{2,63}$/.test(urlObject.hostname)) {
    			// Each label should be max 63 at length (min: 1).
    			// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names
    			// Each TLD should be up to 63 characters long (min: 2).
    			// It is technically possible to have a single character TLD, but none currently exist.
    			urlObject.hostname = urlObject.hostname.replace(/^www\./, '');
    		}
    	}

    	// Remove query unwanted parameters
    	if (Array.isArray(options.removeQueryParameters)) {
    		// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.
    		for (const key of [...urlObject.searchParams.keys()]) {
    			if (testParameter(key, options.removeQueryParameters)) {
    				urlObject.searchParams.delete(key);
    			}
    		}
    	}

    	if (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {
    		urlObject.search = '';
    	}

    	// Keep wanted query parameters
    	if (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {
    		// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.
    		for (const key of [...urlObject.searchParams.keys()]) {
    			if (!testParameter(key, options.keepQueryParameters)) {
    				urlObject.searchParams.delete(key);
    			}
    		}
    	}

    	// Sort query parameters
    	if (options.sortQueryParameters) {
    		urlObject.searchParams.sort();

    		// Calling `.sort()` encodes the search parameters, so we need to decode them again.
    		try {
    			urlObject.search = decodeURIComponent(urlObject.search);
    		} catch {}
    	}

    	if (options.removeTrailingSlash) {
    		urlObject.pathname = urlObject.pathname.replace(/\/$/, '');
    	}

    	// Remove an explicit port number, excluding a default port number, if applicable
    	if (options.removeExplicitPort && urlObject.port) {
    		urlObject.port = '';
    	}

    	const oldUrlString = urlString;

    	// Take advantage of many of the Node `url` normalizations
    	urlString = urlObject.toString();

    	if (!options.removeSingleSlash && urlObject.pathname === '/' && !oldUrlString.endsWith('/') && urlObject.hash === '') {
    		urlString = urlString.replace(/\/$/, '');
    	}

    	// Remove ending `/` unless removeSingleSlash is false
    	if ((options.removeTrailingSlash || urlObject.pathname === '/') && urlObject.hash === '' && options.removeSingleSlash) {
    		urlString = urlString.replace(/\/$/, '');
    	}

    	// Restore relative protocol, if applicable
    	if (hasRelativeProtocol && !options.normalizeProtocol) {
    		urlString = urlString.replace(/^http:\/\//, '//');
    	}

    	// Remove http/https
    	if (options.stripProtocol) {
    		urlString = urlString.replace(/^(?:https?:)?\/\//, '');
    	}

    	return urlString;
    }

    var defaults = {
        globalRegularExpression: /(https?:\/\/|www\.)[\w-\.]+\.[\w-\.]+(\/([\S]+)?)?/gi,
        urlRegularExpression: /(https?:\/\/|www\.)[\w-\.]+\.[\w-\.]+(\/([\S]+)?)?/gi,
        globalMailRegularExpression: /([\w-\.]+@[\w-\.]+\.[\w-\.]+)/gi,
        mailRegularExpression: /([\w-\.]+@[\w-\.]+\.[\w-\.]+)/gi,
        normalizeRegularExpression: /(https?:\/\/|www\.)[\S]+/i,
        normalizeUrlOptions: {
            stripWWW: false,
        },
    };
    var MagicUrl = /** @class */ (function () {
        function MagicUrl(quill, options) {
            var _this = this;
            this.quill = quill;
            options = options || {};
            this.options = __assign(__assign({}, defaults), options);
            this.urlNormalizer = function (url) { return _this.normalize(url); };
            this.mailNormalizer = function (mail) { return "mailto:" + mail; };
            this.registerTypeListener();
            this.registerPasteListener();
            this.registerBlurListener();
        }
        MagicUrl.prototype.registerPasteListener = function () {
            var _this = this;
            // Preserves existing links
            this.quill.clipboard.addMatcher('A', function (node, delta) {
                var _a;
                var href = node.getAttribute('href');
                var attributes = (_a = delta.ops[0]) === null || _a === void 0 ? void 0 : _a.attributes;
                if ((attributes === null || attributes === void 0 ? void 0 : attributes.link) != null) {
                    attributes.link = href;
                }
                return delta;
            });
            this.quill.clipboard.addMatcher(Node.TEXT_NODE, function (node, delta) {
                if (typeof node.data !== 'string') {
                    return undefined;
                }
                var urlRegExp = _this.options.globalRegularExpression;
                var mailRegExp = _this.options.globalMailRegularExpression;
                urlRegExp.lastIndex = 0;
                mailRegExp.lastIndex = 0;
                var newDelta = new Delta_1();
                var index = 0;
                var urlResult = urlRegExp.exec(node.data);
                var mailResult = mailRegExp.exec(node.data);
                var handleMatch = function (result, regExp, normalizer) {
                    var head = node.data.substring(index, result.index);
                    newDelta.insert(head);
                    var match = result[0];
                    newDelta.insert(match, { link: normalizer(match) });
                    index = regExp.lastIndex;
                    return regExp.exec(node.data);
                };
                while (urlResult !== null || mailResult !== null) {
                    if (urlResult === null) {
                        if (mailResult)
                            mailResult = handleMatch(mailResult, mailRegExp, _this.mailNormalizer);
                    }
                    else if (mailResult === null) {
                        urlResult = handleMatch(urlResult, urlRegExp, _this.urlNormalizer);
                    }
                    else if (mailResult.index <= urlResult.index) {
                        while (urlResult !== null && urlResult.index < mailRegExp.lastIndex) {
                            urlResult = urlRegExp.exec(node.data);
                        }
                        mailResult = handleMatch(mailResult, mailRegExp, _this.mailNormalizer);
                    }
                    else {
                        while (mailResult !== null && mailResult.index < urlRegExp.lastIndex) {
                            mailResult = mailRegExp.exec(node.data);
                        }
                        urlResult = handleMatch(urlResult, urlRegExp, _this.urlNormalizer);
                    }
                }
                if (index > 0) {
                    var tail = node.data.substring(index);
                    newDelta.insert(tail);
                    if (delta)
                        delta.ops = newDelta.ops;
                }
                return delta;
            });
        };
        MagicUrl.prototype.registerTypeListener = function () {
            var _this = this;
            this.quill.on('text-change', function (delta) {
                var ops = delta.ops;
                // Only return true, if last operation includes whitespace inserts
                // Equivalent to listening for enter, tab or space
                if (!ops || ops.length < 1 || ops.length > 2) {
                    return;
                }
                var lastOp = ops[ops.length - 1];
                if (!lastOp.insert || typeof lastOp.insert !== 'string' || !lastOp.insert.match(/\s/)) {
                    return;
                }
                _this.checkTextForUrl(!!lastOp.insert.match(/ |\t/));
            });
        };
        MagicUrl.prototype.registerBlurListener = function () {
            var _this = this;
            this.quill.root.addEventListener('blur', function () {
                _this.checkTextForUrl();
            });
        };
        MagicUrl.prototype.checkTextForUrl = function (triggeredByInlineWhitespace) {
            if (triggeredByInlineWhitespace === void 0) { triggeredByInlineWhitespace = false; }
            var sel = this.quill.getSelection();
            if (!sel) {
                return;
            }
            var leaf = this.quill.getLeaf(sel.index)[0];
            var leafIndex = this.quill.getIndex(leaf);
            if (!leaf.text) {
                return;
            }
            // We only care about the leaf until the current cursor position
            var relevantLength = sel.index - leafIndex;
            var text = leaf.text.slice(0, relevantLength);
            if (!text || leaf.parent.domNode.localName === 'a') {
                return;
            }
            var nextLetter = leaf.text[relevantLength];
            // Do not proceed if we are in the middle of a word
            if (nextLetter != null && nextLetter.match(/\S/)) {
                return;
            }
            var bailOutEndingRegex = triggeredByInlineWhitespace ? /\s\s$/ : /\s$/;
            if (text.match(bailOutEndingRegex)) {
                return;
            }
            var urlMatches = text.match(this.options.urlRegularExpression);
            var mailMatches = text.match(this.options.mailRegularExpression);
            if (urlMatches) {
                this.handleMatches(leafIndex, text, urlMatches, this.urlNormalizer);
            }
            else if (mailMatches) {
                this.handleMatches(leafIndex, text, mailMatches, this.mailNormalizer);
            }
        };
        MagicUrl.prototype.handleMatches = function (leafIndex, text, matches, normalizer) {
            var match = matches.pop();
            if (match) {
                var matchIndex = text.lastIndexOf(match);
                var after = text.split(match).pop();
                if (after && after.match(/\S/)) {
                    return;
                }
                this.updateText(leafIndex + matchIndex, match.trim(), normalizer);
            }
        };
        MagicUrl.prototype.updateText = function (index, string, normalizer) {
            var ops = new Delta_1().retain(index).retain(string.length, { link: normalizer(string) });
            this.quill.updateContents(ops);
        };
        MagicUrl.prototype.normalize = function (url) {
            if (this.options.normalizeRegularExpression.test(url)) {
                try {
                    return normalizeUrl(url, this.options.normalizeUrlOptions);
                }
                catch (error) {
                    console.error(error);
                }
            }
            return url;
        };
        return MagicUrl;
    }());

    const BlockEmbed = Quill.import('blots/block/embed');

    class HorizontalRule extends BlockEmbed {}
    HorizontalRule.blotName = 'hr';
    HorizontalRule.tagName = 'hr';

    const Block$2 = Quill.import('blots/block');

    Quill.register('formats/horizontal', HorizontalRule);

    class MarkdownShortcuts {
      constructor(quill, options) {
        this.quill = quill;
        this.options = options;
        this.ignoreElements = (options && options.ignore) || [];

        this.ignoreTags = ['PRE'];

        const elements = [
          {
            name: 'header',
            pattern: /^(#){1,6}\s/g,
            action: (text, selection, pattern) => {
              var match = pattern.exec(text);
              if (!match) return;
              const size = match[0].length;
              // Need to defer this action https://github.com/quilljs/quill/issues/1134
              setTimeout(() => {
                this.quill.formatLine(selection.index, 0, 'header', size - 1);
                this.quill.deleteText(selection.index - size, size);
              }, 0);
            },
          },
          {
            name: 'blockquote',
            pattern: /^(>)\s/g,
            action: (text, selection) => {
              // Need to defer this action https://github.com/quilljs/quill/issues/1134
              setTimeout(() => {
                this.quill.formatLine(selection.index, 1, 'blockquote', true);
                this.quill.deleteText(selection.index - 2, 2);
              }, 0);
            },
          },
          {
            name: 'code-block',
            pattern: /^`{3}(?:\s|\n)/g,
            action: (text, selection) => {
              // Need to defer this action https://github.com/quilljs/quill/issues/1134
              setTimeout(() => {
                this.quill.formatLine(selection.index, 1, 'code-block', true);
                this.quill.deleteText(selection.index - 4, 4);
              }, 0);
            },
          },
          {
            name: 'bolditalic',
            pattern: /(?:\*|_){3}(.+?)(?:\*|_){3}/g,
            action: (text, selection, pattern, lineStart) => {
              let match = pattern.exec(text);

              const annotatedText = match[0];
              const matchedText = match[1];
              const startIndex = lineStart + match.index;

              if (text.match(/^([*_ \n]+)$/g)) return;

              setTimeout(() => {
                this.quill.deleteText(startIndex, annotatedText.length);
                this.quill.insertText(startIndex, matchedText, { bold: true, italic: true });
                this.quill.format('bold', false);
              }, 0);
            },
          },
          {
            name: 'bold',
            pattern: /(?:\*|_){2}(.+?)(?:\*|_){2}/g,
            action: (text, selection, pattern, lineStart) => {
              let match = pattern.exec(text);

              const annotatedText = match[0];
              const matchedText = match[1];
              const startIndex = lineStart + match.index;

              if (text.match(/^([*_ \n]+)$/g)) return;

              setTimeout(() => {
                this.quill.deleteText(startIndex, annotatedText.length);
                this.quill.insertText(startIndex, matchedText, { bold: true });
                this.quill.format('bold', false);
              }, 0);
            },
          },
          {
            name: 'italic',
            pattern: /(?:\*|_){1}(.+?)(?:\*|_){1}/g,
            action: (text, selection, pattern, lineStart) => {
              let match = pattern.exec(text);

              const annotatedText = match[0];
              const matchedText = match[1];
              const startIndex = lineStart + match.index;

              if (text.match(/^([*_ \n]+)$/g)) return;

              setTimeout(() => {
                this.quill.deleteText(startIndex, annotatedText.length);
                this.quill.insertText(startIndex, matchedText, { italic: true });
                this.quill.format('italic', false);
              }, 0);
            },
          },
          {
            name: 'strikethrough',
            pattern: /(?:~~)(.+?)(?:~~)/g,
            action: (text, selection, pattern, lineStart) => {
              let match = pattern.exec(text);

              const annotatedText = match[0];
              const matchedText = match[1];
              const startIndex = lineStart + match.index;

              if (text.match(/^([*_ \n]+)$/g)) return;

              setTimeout(() => {
                this.quill.deleteText(startIndex, annotatedText.length);
                this.quill.insertText(startIndex, matchedText, { strike: true });
                this.quill.format('strike', false);
              }, 0);
            },
          },
          {
            name: 'code',
            pattern: /(?:`)(.+?)(?:`)/g,
            action: (text, selection, pattern, lineStart) => {
              let match = pattern.exec(text);

              const annotatedText = match[0];
              const matchedText = match[1];
              const startIndex = lineStart + match.index;

              if (text.match(/^([*_ \n]+)$/g)) return;

              setTimeout(() => {
                this.quill.deleteText(startIndex, annotatedText.length);
                this.quill.insertText(startIndex, matchedText, { code: true });
                this.quill.format('code', false);
                this.quill.insertText(this.quill.getSelection(), ' ');
              }, 0);
            },
          },
          {
            name: 'hr',
            pattern: /^([-*]\s?){3}/g,
            action: (text, selection) => {
              const startIndex = selection.index - text.length;
              setTimeout(() => {
                this.quill.deleteText(startIndex, text.length);

                this.quill.insertEmbed(startIndex + 1, 'hr', true, Quill.sources.USER);
                this.quill.insertText(startIndex + 2, '\n', Quill.sources.SILENT);
                this.quill.setSelection(startIndex + 2, Quill.sources.SILENT);
              }, 0);
            },
          },
          {
            name: 'plus-ul',
            // Quill 1.3.5 already treat * as another trigger for bullet lists
            pattern: /^\+\s$/g,
            action: (text, selection, pattern) => {
              setTimeout(() => {
                this.quill.formatLine(selection.index, 1, 'list', 'unordered');
                this.quill.deleteText(selection.index - 2, 2);
              }, 0);
            },
          },
          {
            name: 'asterisk-ul',
            pattern: /^(\-|\*)\s$/g,
            action: (text, selection) => {
              setTimeout(() => {
                this.quill.formatLine(selection.index, 1, 'list', 'bullet');
                this.quill.deleteText(selection.index - 2, 2);
              }, 0);
            },
          },
          {
            name: 'image',
            pattern: /(?:!\[(.+?)\])(?:\((.+?)\))/g,
            action: (text, selection, pattern) => {
              const startIndex = text.search(pattern);
              const matchedText = text.match(pattern)[0];
              // const hrefText = text.match(/(?:!\[(.*?)\])/g)[0]
              const hrefLink = text.match(/(?:\((.*?)\))/g)[0];
              const start = selection.index - matchedText.length - 1;
              if (startIndex !== -1) {
                setTimeout(() => {
                  this.quill.deleteText(start, matchedText.length);
                  this.quill.insertEmbed(start, 'image', hrefLink.slice(1, hrefLink.length - 1));
                }, 0);
              }
            },
          },
          {
            name: 'link',
            pattern: /(?:\[(.+?)\])(?:\((.+?)\))/g,
            action: (text, selection, pattern) => {
              const startIndex = text.search(pattern);
              const matchedText = text.match(pattern)[0];
              const hrefText = text.match(/(?:\[(.*?)\])/g)[0];
              const hrefLink = text.match(/(?:\((.*?)\))/g)[0];
              const start = selection.index - matchedText.length - 1;
              if (startIndex !== -1) {
                setTimeout(() => {
                  this.quill.deleteText(start, matchedText.length);
                  this.quill.insertText(
                    start,
                    hrefText.slice(1, hrefText.length - 1),
                    'link',
                    hrefLink.slice(1, hrefLink.length - 1),
                  );
                }, 0);
              }
            },
          },
        ];

        this.matches = elements.filter((element) => !this.ignoreElements.includes(element.name));

        // Handler that looks for insert deltas that match specific characters
        this.quill.on('text-change', (delta, oldContents, source) => {
          for (let i = 0; i < delta.ops.length; i++) {
            if (delta.ops[i].hasOwnProperty('insert')) {
              if (delta.ops[i].insert === ' ') {
                this.onSpace();
              } else if (delta.ops[i].insert === '\n') {
                this.onEnter();
              }
            } else if (delta.ops[i].hasOwnProperty('delete') && source === 'user') {
              this.onDelete();
            }
          }
        });
      }

      isValid(text, tagName) {
        return typeof text !== 'undefined' && text && this.ignoreTags.indexOf(tagName) === -1;
      }

      onSpace() {
        const selection = this.quill.getSelection();
        if (!selection) return;
        const [line, offset] = this.quill.getLine(selection.index);
        const text = line.domNode.textContent;
        const lineStart = selection.index - offset;
        if (this.isValid(text, line.domNode.tagName)) {
          for (let match of this.matches) {
            const matchedText = text.match(match.pattern);
            // 不要在代码块中使用markdown激活
            // 不在table中激活header、list、code、引用等
            // console.log('markdown matched:', match, matchedText, line.domNode.tagName, selection, this.quill.getFormat());
            const format = this.quill.getFormat() || {};
            const disableInTable = [
              'header',
              'blockquote',
              'code-block',
              'hr',
              'plus-ul',
              'asterisk-ul',
            ];
            if (matchedText && !format['code-block'] && !(format['table-cell-line'] && disableInTable.includes(match.name))) {
              // We need to replace only matched text not the whole line
              match.action(text, selection, match.pattern, lineStart);
              return;
            }
          }
        }
      }

      onEnter() {
        let selection = this.quill.getSelection();
        if (!selection) return;
        const [line, offset] = this.quill.getLine(selection.index);
        const text = line.domNode.textContent + ' ';
        const lineStart = selection.index - offset;
        selection.length = selection.index++;
        if (this.isValid(text, line.domNode.tagName)) {
          for (let match of this.matches) {
            const matchedText = text.match(match.pattern);
            // 不要在代码块中使用markdown激活
            // 不在table中激活header、list、code、引用等
            // console.log('markdown matched:', match, matchedText, line.domNode.tagName, selection, this.quill.getFormat());
            const format = this.quill.getFormat() || {};
            const disableInTable = [
              'header',
              'blockquote',
              'code-block',
              'hr',
              'plus-ul',
              'asterisk-ul',
            ];
            if (
              matchedText &&
              !format['code-block'] &&
              !(format['table-cell-line'] && disableInTable.includes(match.name))
            ) {
              match.action(text, selection, match.pattern, lineStart);
              return;
            }
          }
        }
      }

      onDelete() {
        const range = this.quill.getSelection();
        if (!range) {
          return;
        }
      }

      isLastBrElement(range) {
        const [block] = this.quill.scroll.descendant(Block$2, range.index);
        const isBrElement = block != null && block.domNode.firstChild instanceof HTMLBRElement;
        return isBrElement;
      }

      isEmptyLine(range) {
        const [line] = this.quill.getLine(range.index);
        const isEmpty = line.children.head.text.trim() === '';
        return isEmpty;
      }
    }

    function deepFreeze(obj) {
        if (obj instanceof Map) {
            obj.clear = obj.delete = obj.set = function () {
                throw new Error('map is read-only');
            };
        } else if (obj instanceof Set) {
            obj.add = obj.clear = obj.delete = function () {
                throw new Error('set is read-only');
            };
        }

        // Freeze self
        Object.freeze(obj);

        Object.getOwnPropertyNames(obj).forEach(function (name) {
            var prop = obj[name];

            // Freeze prop if it is an object
            if (typeof prop == 'object' && !Object.isFrozen(prop)) {
                deepFreeze(prop);
            }
        });

        return obj;
    }

    var deepFreezeEs6 = deepFreeze;
    var _default = deepFreeze;
    deepFreezeEs6.default = _default;

    /** @implements CallbackResponse */
    class Response {
      /**
       * @param {CompiledMode} mode
       */
      constructor(mode) {
        // eslint-disable-next-line no-undefined
        if (mode.data === undefined) mode.data = {};

        this.data = mode.data;
        this.isMatchIgnored = false;
      }

      ignoreMatch() {
        this.isMatchIgnored = true;
      }
    }

    /**
     * @param {string} value
     * @returns {string}
     */
    function escapeHTML(value) {
      return value
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;');
    }

    /**
     * performs a shallow merge of multiple objects into one
     *
     * @template T
     * @param {T} original
     * @param {Record<string,any>[]} objects
     * @returns {T} a single new object
     */
    function inherit(original, ...objects) {
      /** @type Record<string,any> */
      const result = Object.create(null);

      for (const key in original) {
        result[key] = original[key];
      }
      objects.forEach(function(obj) {
        for (const key in obj) {
          result[key] = obj[key];
        }
      });
      return /** @type {T} */ (result);
    }

    /**
     * @typedef {object} Renderer
     * @property {(text: string) => void} addText
     * @property {(node: Node) => void} openNode
     * @property {(node: Node) => void} closeNode
     * @property {() => string} value
     */

    /** @typedef {{kind?: string, sublanguage?: boolean}} Node */
    /** @typedef {{walk: (r: Renderer) => void}} Tree */
    /** */

    const SPAN_CLOSE = '</span>';

    /**
     * Determines if a node needs to be wrapped in <span>
     *
     * @param {Node} node */
    const emitsWrappingTags = (node) => {
      return !!node.kind;
    };

    /** @type {Renderer} */
    class HTMLRenderer {
      /**
       * Creates a new HTMLRenderer
       *
       * @param {Tree} parseTree - the parse tree (must support `walk` API)
       * @param {{classPrefix: string}} options
       */
      constructor(parseTree, options) {
        this.buffer = "";
        this.classPrefix = options.classPrefix;
        parseTree.walk(this);
      }

      /**
       * Adds texts to the output stream
       *
       * @param {string} text */
      addText(text) {
        this.buffer += escapeHTML(text);
      }

      /**
       * Adds a node open to the output stream (if needed)
       *
       * @param {Node} node */
      openNode(node) {
        if (!emitsWrappingTags(node)) return;

        let className = node.kind;
        if (!node.sublanguage) {
          className = `${this.classPrefix}${className}`;
        }
        this.span(className);
      }

      /**
       * Adds a node close to the output stream (if needed)
       *
       * @param {Node} node */
      closeNode(node) {
        if (!emitsWrappingTags(node)) return;

        this.buffer += SPAN_CLOSE;
      }

      /**
       * returns the accumulated buffer
      */
      value() {
        return this.buffer;
      }

      // helpers

      /**
       * Builds a span element
       *
       * @param {string} className */
      span(className) {
        this.buffer += `<span class="${className}">`;
      }
    }

    /** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */
    /** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */
    /**  */

    class TokenTree {
      constructor() {
        /** @type DataNode */
        this.rootNode = { children: [] };
        this.stack = [this.rootNode];
      }

      get top() {
        return this.stack[this.stack.length - 1];
      }

      get root() { return this.rootNode; }

      /** @param {Node} node */
      add(node) {
        this.top.children.push(node);
      }

      /** @param {string} kind */
      openNode(kind) {
        /** @type Node */
        const node = { kind, children: [] };
        this.add(node);
        this.stack.push(node);
      }

      closeNode() {
        if (this.stack.length > 1) {
          return this.stack.pop();
        }
        // eslint-disable-next-line no-undefined
        return undefined;
      }

      closeAllNodes() {
        while (this.closeNode());
      }

      toJSON() {
        return JSON.stringify(this.rootNode, null, 4);
      }

      /**
       * @typedef { import("./html_renderer").Renderer } Renderer
       * @param {Renderer} builder
       */
      walk(builder) {
        // this does not
        return this.constructor._walk(builder, this.rootNode);
        // this works
        // return TokenTree._walk(builder, this.rootNode);
      }

      /**
       * @param {Renderer} builder
       * @param {Node} node
       */
      static _walk(builder, node) {
        if (typeof node === "string") {
          builder.addText(node);
        } else if (node.children) {
          builder.openNode(node);
          node.children.forEach((child) => this._walk(builder, child));
          builder.closeNode(node);
        }
        return builder;
      }

      /**
       * @param {Node} node
       */
      static _collapse(node) {
        if (typeof node === "string") return;
        if (!node.children) return;

        if (node.children.every(el => typeof el === "string")) {
          // node.text = node.children.join("");
          // delete node.children;
          node.children = [node.children.join("")];
        } else {
          node.children.forEach((child) => {
            TokenTree._collapse(child);
          });
        }
      }
    }

    /**
      Currently this is all private API, but this is the minimal API necessary
      that an Emitter must implement to fully support the parser.

      Minimal interface:

      - addKeyword(text, kind)
      - addText(text)
      - addSublanguage(emitter, subLanguageName)
      - finalize()
      - openNode(kind)
      - closeNode()
      - closeAllNodes()
      - toHTML()

    */

    /**
     * @implements {Emitter}
     */
    class TokenTreeEmitter extends TokenTree {
      /**
       * @param {*} options
       */
      constructor(options) {
        super();
        this.options = options;
      }

      /**
       * @param {string} text
       * @param {string} kind
       */
      addKeyword(text, kind) {
        if (text === "") { return; }

        this.openNode(kind);
        this.addText(text);
        this.closeNode();
      }

      /**
       * @param {string} text
       */
      addText(text) {
        if (text === "") { return; }

        this.add(text);
      }

      /**
       * @param {Emitter & {root: DataNode}} emitter
       * @param {string} name
       */
      addSublanguage(emitter, name) {
        /** @type DataNode */
        const node = emitter.root;
        node.kind = name;
        node.sublanguage = true;
        this.add(node);
      }

      toHTML() {
        const renderer = new HTMLRenderer(this, this.options);
        return renderer.value();
      }

      finalize() {
        return true;
      }
    }

    /**
     * @param {string} value
     * @returns {RegExp}
     * */
    function escape(value) {
      return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'm');
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source$9(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat$9(...args) {
      const joined = args.map((x) => source$9(x)).join("");
      return joined;
    }

    /**
     * Any of the passed expresssions may match
     *
     * Creates a huge this | this | that | that match
     * @param {(RegExp | string)[] } args
     * @returns {string}
     */
    function either$3(...args) {
      const joined = '(' + args.map((x) => source$9(x)).join("|") + ")";
      return joined;
    }

    /**
     * @param {RegExp} re
     * @returns {number}
     */
    function countMatchGroups(re) {
      return (new RegExp(re.toString() + '|')).exec('').length - 1;
    }

    /**
     * Does lexeme start with a regular expression match at the beginning
     * @param {RegExp} re
     * @param {string} lexeme
     */
    function startsWith(re, lexeme) {
      const match = re && re.exec(lexeme);
      return match && match.index === 0;
    }

    // BACKREF_RE matches an open parenthesis or backreference. To avoid
    // an incorrect parse, it additionally matches the following:
    // - [...] elements, where the meaning of parentheses and escapes change
    // - other escape sequences, so we do not misparse escape sequences as
    //   interesting elements
    // - non-matching or lookahead parentheses, which do not capture. These
    //   follow the '(' with a '?'.
    const BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;

    // join logically computes regexps.join(separator), but fixes the
    // backreferences so they continue to match.
    // it also places each individual regular expression into it's own
    // match group, keeping track of the sequencing of those match groups
    // is currently an exercise for the caller. :-)
    /**
     * @param {(string | RegExp)[]} regexps
     * @param {string} separator
     * @returns {string}
     */
    function join(regexps, separator = "|") {
      let numCaptures = 0;

      return regexps.map((regex) => {
        numCaptures += 1;
        const offset = numCaptures;
        let re = source$9(regex);
        let out = '';

        while (re.length > 0) {
          const match = BACKREF_RE.exec(re);
          if (!match) {
            out += re;
            break;
          }
          out += re.substring(0, match.index);
          re = re.substring(match.index + match[0].length);
          if (match[0][0] === '\\' && match[1]) {
            // Adjust the backreference.
            out += '\\' + String(Number(match[1]) + offset);
          } else {
            out += match[0];
            if (match[0] === '(') {
              numCaptures++;
            }
          }
        }
        return out;
      }).map(re => `(${re})`).join(separator);
    }

    // Common regexps
    const MATCH_NOTHING_RE = /\b\B/;
    const IDENT_RE$1 = '[a-zA-Z]\\w*';
    const UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
    const NUMBER_RE = '\\b\\d+(\\.\\d+)?';
    const C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
    const BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
    const RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

    /**
    * @param { Partial<Mode> & {binary?: string | RegExp} } opts
    */
    const SHEBANG = (opts = {}) => {
      const beginShebang = /^#![ ]*\//;
      if (opts.binary) {
        opts.begin = concat$9(
          beginShebang,
          /.*\b/,
          opts.binary,
          /\b.*/);
      }
      return inherit({
        className: 'meta',
        begin: beginShebang,
        end: /$/,
        relevance: 0,
        /** @type {ModeCallback} */
        "on:begin": (m, resp) => {
          if (m.index !== 0) resp.ignoreMatch();
        }
      }, opts);
    };

    // Common modes
    const BACKSLASH_ESCAPE = {
      begin: '\\\\[\\s\\S]', relevance: 0
    };
    const APOS_STRING_MODE = {
      className: 'string',
      begin: '\'',
      end: '\'',
      illegal: '\\n',
      contains: [BACKSLASH_ESCAPE]
    };
    const QUOTE_STRING_MODE = {
      className: 'string',
      begin: '"',
      end: '"',
      illegal: '\\n',
      contains: [BACKSLASH_ESCAPE]
    };
    const PHRASAL_WORDS_MODE = {
      begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
    };
    /**
     * Creates a comment mode
     *
     * @param {string | RegExp} begin
     * @param {string | RegExp} end
     * @param {Mode | {}} [modeOptions]
     * @returns {Partial<Mode>}
     */
    const COMMENT = function(begin, end, modeOptions = {}) {
      const mode = inherit(
        {
          className: 'comment',
          begin,
          end,
          contains: []
        },
        modeOptions
      );
      mode.contains.push(PHRASAL_WORDS_MODE);
      mode.contains.push({
        className: 'doctag',
        begin: '(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):',
        relevance: 0
      });
      return mode;
    };
    const C_LINE_COMMENT_MODE = COMMENT('//', '$');
    const C_BLOCK_COMMENT_MODE = COMMENT('/\\*', '\\*/');
    const HASH_COMMENT_MODE = COMMENT('#', '$');
    const NUMBER_MODE = {
      className: 'number',
      begin: NUMBER_RE,
      relevance: 0
    };
    const C_NUMBER_MODE = {
      className: 'number',
      begin: C_NUMBER_RE,
      relevance: 0
    };
    const BINARY_NUMBER_MODE = {
      className: 'number',
      begin: BINARY_NUMBER_RE,
      relevance: 0
    };
    const CSS_NUMBER_MODE = {
      className: 'number',
      begin: NUMBER_RE + '(' +
        '%|em|ex|ch|rem' +
        '|vw|vh|vmin|vmax' +
        '|cm|mm|in|pt|pc|px' +
        '|deg|grad|rad|turn' +
        '|s|ms' +
        '|Hz|kHz' +
        '|dpi|dpcm|dppx' +
        ')?',
      relevance: 0
    };
    const REGEXP_MODE = {
      // this outer rule makes sure we actually have a WHOLE regex and not simply
      // an expression such as:
      //
      //     3 / something
      //
      // (which will then blow up when regex's `illegal` sees the newline)
      begin: /(?=\/[^/\n]*\/)/,
      contains: [{
        className: 'regexp',
        begin: /\//,
        end: /\/[gimuy]*/,
        illegal: /\n/,
        contains: [
          BACKSLASH_ESCAPE,
          {
            begin: /\[/,
            end: /\]/,
            relevance: 0,
            contains: [BACKSLASH_ESCAPE]
          }
        ]
      }]
    };
    const TITLE_MODE = {
      className: 'title',
      begin: IDENT_RE$1,
      relevance: 0
    };
    const UNDERSCORE_TITLE_MODE = {
      className: 'title',
      begin: UNDERSCORE_IDENT_RE,
      relevance: 0
    };
    const METHOD_GUARD = {
      // excludes method names from keyword processing
      begin: '\\.\\s*' + UNDERSCORE_IDENT_RE,
      relevance: 0
    };

    /**
     * Adds end same as begin mechanics to a mode
     *
     * Your mode must include at least a single () match group as that first match
     * group is what is used for comparison
     * @param {Partial<Mode>} mode
     */
    const END_SAME_AS_BEGIN = function(mode) {
      return Object.assign(mode,
        {
          /** @type {ModeCallback} */
          'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },
          /** @type {ModeCallback} */
          'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }
        });
    };

    var MODES$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        MATCH_NOTHING_RE: MATCH_NOTHING_RE,
        IDENT_RE: IDENT_RE$1,
        UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,
        NUMBER_RE: NUMBER_RE,
        C_NUMBER_RE: C_NUMBER_RE,
        BINARY_NUMBER_RE: BINARY_NUMBER_RE,
        RE_STARTERS_RE: RE_STARTERS_RE,
        SHEBANG: SHEBANG,
        BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,
        APOS_STRING_MODE: APOS_STRING_MODE,
        QUOTE_STRING_MODE: QUOTE_STRING_MODE,
        PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,
        COMMENT: COMMENT,
        C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,
        C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,
        HASH_COMMENT_MODE: HASH_COMMENT_MODE,
        NUMBER_MODE: NUMBER_MODE,
        C_NUMBER_MODE: C_NUMBER_MODE,
        BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,
        CSS_NUMBER_MODE: CSS_NUMBER_MODE,
        REGEXP_MODE: REGEXP_MODE,
        TITLE_MODE: TITLE_MODE,
        UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,
        METHOD_GUARD: METHOD_GUARD,
        END_SAME_AS_BEGIN: END_SAME_AS_BEGIN
    });

    // Grammar extensions / plugins
    // See: https://github.com/highlightjs/highlight.js/issues/2833

    // Grammar extensions allow "syntactic sugar" to be added to the grammar modes
    // without requiring any underlying changes to the compiler internals.

    // `compileMatch` being the perfect small example of now allowing a grammar
    // author to write `match` when they desire to match a single expression rather
    // than being forced to use `begin`.  The extension then just moves `match` into
    // `begin` when it runs.  Ie, no features have been added, but we've just made
    // the experience of writing (and reading grammars) a little bit nicer.

    // ------

    // TODO: We need negative look-behind support to do this properly
    /**
     * Skip a match if it has a preceding dot
     *
     * This is used for `beginKeywords` to prevent matching expressions such as
     * `bob.keyword.do()`. The mode compiler automatically wires this up as a
     * special _internal_ 'on:begin' callback for modes with `beginKeywords`
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */
    function skipIfhasPrecedingDot(match, response) {
      const before = match.input[match.index - 1];
      if (before === ".") {
        response.ignoreMatch();
      }
    }


    /**
     * `beginKeywords` syntactic sugar
     * @type {CompilerExt}
     */
    function beginKeywords(mode, parent) {
      if (!parent) return;
      if (!mode.beginKeywords) return;

      // for languages with keywords that include non-word characters checking for
      // a word boundary is not sufficient, so instead we check for a word boundary
      // or whitespace - this does no harm in any case since our keyword engine
      // doesn't allow spaces in keywords anyways and we still check for the boundary
      // first
      mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\.)(?=\\b|\\s)';
      mode.__beforeBegin = skipIfhasPrecedingDot;
      mode.keywords = mode.keywords || mode.beginKeywords;
      delete mode.beginKeywords;

      // prevents double relevance, the keywords themselves provide
      // relevance, the mode doesn't need to double it
      // eslint-disable-next-line no-undefined
      if (mode.relevance === undefined) mode.relevance = 0;
    }

    /**
     * Allow `illegal` to contain an array of illegal values
     * @type {CompilerExt}
     */
    function compileIllegal(mode, _parent) {
      if (!Array.isArray(mode.illegal)) return;

      mode.illegal = either$3(...mode.illegal);
    }

    /**
     * `match` to match a single expression for readability
     * @type {CompilerExt}
     */
    function compileMatch(mode, _parent) {
      if (!mode.match) return;
      if (mode.begin || mode.end) throw new Error("begin & end are not supported with match");

      mode.begin = mode.match;
      delete mode.match;
    }

    /**
     * provides the default 1 relevance to all modes
     * @type {CompilerExt}
     */
    function compileRelevance(mode, _parent) {
      // eslint-disable-next-line no-undefined
      if (mode.relevance === undefined) mode.relevance = 1;
    }

    // keywords that should have no default relevance value
    const COMMON_KEYWORDS = [
      'of',
      'and',
      'for',
      'in',
      'not',
      'or',
      'if',
      'then',
      'parent', // common variable name
      'list', // common variable name
      'value' // common variable name
    ];

    const DEFAULT_KEYWORD_CLASSNAME = "keyword";

    /**
     * Given raw keywords from a language definition, compile them.
     *
     * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords
     * @param {boolean} caseInsensitive
     */
    function compileKeywords(rawKeywords, caseInsensitive, className = DEFAULT_KEYWORD_CLASSNAME) {
      /** @type KeywordDict */
      const compiledKeywords = {};

      // input can be a string of keywords, an array of keywords, or a object with
      // named keys representing className (which can then point to a string or array)
      if (typeof rawKeywords === 'string') {
        compileList(className, rawKeywords.split(" "));
      } else if (Array.isArray(rawKeywords)) {
        compileList(className, rawKeywords);
      } else {
        Object.keys(rawKeywords).forEach(function(className) {
          // collapse all our objects back into the parent object
          Object.assign(
            compiledKeywords,
            compileKeywords(rawKeywords[className], caseInsensitive, className)
          );
        });
      }
      return compiledKeywords;

      // ---

      /**
       * Compiles an individual list of keywords
       *
       * Ex: "for if when while|5"
       *
       * @param {string} className
       * @param {Array<string>} keywordList
       */
      function compileList(className, keywordList) {
        if (caseInsensitive) {
          keywordList = keywordList.map(x => x.toLowerCase());
        }
        keywordList.forEach(function(keyword) {
          const pair = keyword.split('|');
          compiledKeywords[pair[0]] = [className, scoreForKeyword(pair[0], pair[1])];
        });
      }
    }

    /**
     * Returns the proper score for a given keyword
     *
     * Also takes into account comment keywords, which will be scored 0 UNLESS
     * another score has been manually assigned.
     * @param {string} keyword
     * @param {string} [providedScore]
     */
    function scoreForKeyword(keyword, providedScore) {
      // manual scores always win over common keywords
      // so you can force a score of 1 if you really insist
      if (providedScore) {
        return Number(providedScore);
      }

      return commonKeyword(keyword) ? 0 : 1;
    }

    /**
     * Determines if a given keyword is common or not
     *
     * @param {string} keyword */
    function commonKeyword(keyword) {
      return COMMON_KEYWORDS.includes(keyword.toLowerCase());
    }

    // compilation

    /**
     * Compiles a language definition result
     *
     * Given the raw result of a language definition (Language), compiles this so
     * that it is ready for highlighting code.
     * @param {Language} language
     * @param {{plugins: HLJSPlugin[]}} opts
     * @returns {CompiledLanguage}
     */
    function compileLanguage(language, { plugins }) {
      /**
       * Builds a regex with the case sensativility of the current language
       *
       * @param {RegExp | string} value
       * @param {boolean} [global]
       */
      function langRe(value, global) {
        return new RegExp(
          source$9(value),
          'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')
        );
      }

      /**
        Stores multiple regular expressions and allows you to quickly search for
        them all in a string simultaneously - returning the first match.  It does
        this by creating a huge (a|b|c) regex - each individual item wrapped with ()
        and joined by `|` - using match groups to track position.  When a match is
        found checking which position in the array has content allows us to figure
        out which of the original regexes / match groups triggered the match.

        The match object itself (the result of `Regex.exec`) is returned but also
        enhanced by merging in any meta-data that was registered with the regex.
        This is how we keep track of which mode matched, and what type of rule
        (`illegal`, `begin`, end, etc).
      */
      class MultiRegex {
        constructor() {
          this.matchIndexes = {};
          // @ts-ignore
          this.regexes = [];
          this.matchAt = 1;
          this.position = 0;
        }

        // @ts-ignore
        addRule(re, opts) {
          opts.position = this.position++;
          // @ts-ignore
          this.matchIndexes[this.matchAt] = opts;
          this.regexes.push([opts, re]);
          this.matchAt += countMatchGroups(re) + 1;
        }

        compile() {
          if (this.regexes.length === 0) {
            // avoids the need to check length every time exec is called
            // @ts-ignore
            this.exec = () => null;
          }
          const terminators = this.regexes.map(el => el[1]);
          this.matcherRe = langRe(join(terminators), true);
          this.lastIndex = 0;
        }

        /** @param {string} s */
        exec(s) {
          this.matcherRe.lastIndex = this.lastIndex;
          const match = this.matcherRe.exec(s);
          if (!match) { return null; }

          // eslint-disable-next-line no-undefined
          const i = match.findIndex((el, i) => i > 0 && el !== undefined);
          // @ts-ignore
          const matchData = this.matchIndexes[i];
          // trim off any earlier non-relevant match groups (ie, the other regex
          // match groups that make up the multi-matcher)
          match.splice(0, i);

          return Object.assign(match, matchData);
        }
      }

      /*
        Created to solve the key deficiently with MultiRegex - there is no way to
        test for multiple matches at a single location.  Why would we need to do
        that?  In the future a more dynamic engine will allow certain matches to be
        ignored.  An example: if we matched say the 3rd regex in a large group but
        decided to ignore it - we'd need to started testing again at the 4th
        regex... but MultiRegex itself gives us no real way to do that.

        So what this class creates MultiRegexs on the fly for whatever search
        position they are needed.

        NOTE: These additional MultiRegex objects are created dynamically.  For most
        grammars most of the time we will never actually need anything more than the
        first MultiRegex - so this shouldn't have too much overhead.

        Say this is our search group, and we match regex3, but wish to ignore it.

          regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0

        What we need is a new MultiRegex that only includes the remaining
        possibilities:

          regex4 | regex5                               ' ie, startAt = 3

        This class wraps all that complexity up in a simple API... `startAt` decides
        where in the array of expressions to start doing the matching. It
        auto-increments, so if a match is found at position 2, then startAt will be
        set to 3.  If the end is reached startAt will return to 0.

        MOST of the time the parser will be setting startAt manually to 0.
      */
      class ResumableMultiRegex {
        constructor() {
          // @ts-ignore
          this.rules = [];
          // @ts-ignore
          this.multiRegexes = [];
          this.count = 0;

          this.lastIndex = 0;
          this.regexIndex = 0;
        }

        // @ts-ignore
        getMatcher(index) {
          if (this.multiRegexes[index]) return this.multiRegexes[index];

          const matcher = new MultiRegex();
          this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));
          matcher.compile();
          this.multiRegexes[index] = matcher;
          return matcher;
        }

        resumingScanAtSamePosition() {
          return this.regexIndex !== 0;
        }

        considerAll() {
          this.regexIndex = 0;
        }

        // @ts-ignore
        addRule(re, opts) {
          this.rules.push([re, opts]);
          if (opts.type === "begin") this.count++;
        }

        /** @param {string} s */
        exec(s) {
          const m = this.getMatcher(this.regexIndex);
          m.lastIndex = this.lastIndex;
          let result = m.exec(s);

          // The following is because we have no easy way to say "resume scanning at the
          // existing position but also skip the current rule ONLY". What happens is
          // all prior rules are also skipped which can result in matching the wrong
          // thing. Example of matching "booger":

          // our matcher is [string, "booger", number]
          //
          // ....booger....

          // if "booger" is ignored then we'd really need a regex to scan from the
          // SAME position for only: [string, number] but ignoring "booger" (if it
          // was the first match), a simple resume would scan ahead who knows how
          // far looking only for "number", ignoring potential string matches (or
          // future "booger" matches that might be valid.)

          // So what we do: We execute two matchers, one resuming at the same
          // position, but the second full matcher starting at the position after:

          //     /--- resume first regex match here (for [number])
          //     |/---- full match here for [string, "booger", number]
          //     vv
          // ....booger....

          // Which ever results in a match first is then used. So this 3-4 step
          // process essentially allows us to say "match at this position, excluding
          // a prior rule that was ignored".
          //
          // 1. Match "booger" first, ignore. Also proves that [string] does non match.
          // 2. Resume matching for [number]
          // 3. Match at index + 1 for [string, "booger", number]
          // 4. If #2 and #3 result in matches, which came first?
          if (this.resumingScanAtSamePosition()) {
            if (result && result.index === this.lastIndex) ; else { // use the second matcher result
              const m2 = this.getMatcher(0);
              m2.lastIndex = this.lastIndex + 1;
              result = m2.exec(s);
            }
          }

          if (result) {
            this.regexIndex += result.position + 1;
            if (this.regexIndex === this.count) {
              // wrap-around to considering all matches again
              this.considerAll();
            }
          }

          return result;
        }
      }

      /**
       * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
       * the content and find matches.
       *
       * @param {CompiledMode} mode
       * @returns {ResumableMultiRegex}
       */
      function buildModeRegex(mode) {
        const mm = new ResumableMultiRegex();

        mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: "begin" }));

        if (mode.terminatorEnd) {
          mm.addRule(mode.terminatorEnd, { type: "end" });
        }
        if (mode.illegal) {
          mm.addRule(mode.illegal, { type: "illegal" });
        }

        return mm;
      }

      /** skip vs abort vs ignore
       *
       * @skip   - The mode is still entered and exited normally (and contains rules apply),
       *           but all content is held and added to the parent buffer rather than being
       *           output when the mode ends.  Mostly used with `sublanguage` to build up
       *           a single large buffer than can be parsed by sublanguage.
       *
       *             - The mode begin ands ends normally.
       *             - Content matched is added to the parent mode buffer.
       *             - The parser cursor is moved forward normally.
       *
       * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
       *           never matched) but DOES NOT continue to match subsequent `contains`
       *           modes.  Abort is bad/suboptimal because it can result in modes
       *           farther down not getting applied because an earlier rule eats the
       *           content but then aborts.
       *
       *             - The mode does not begin.
       *             - Content matched by `begin` is added to the mode buffer.
       *             - The parser cursor is moved forward accordingly.
       *
       * @ignore - Ignores the mode (as if it never matched) and continues to match any
       *           subsequent `contains` modes.  Ignore isn't technically possible with
       *           the current parser implementation.
       *
       *             - The mode does not begin.
       *             - Content matched by `begin` is ignored.
       *             - The parser cursor is not moved forward.
       */

      /**
       * Compiles an individual mode
       *
       * This can raise an error if the mode contains certain detectable known logic
       * issues.
       * @param {Mode} mode
       * @param {CompiledMode | null} [parent]
       * @returns {CompiledMode | never}
       */
      function compileMode(mode, parent) {
        const cmode = /** @type CompiledMode */ (mode);
        if (mode.isCompiled) return cmode;

        [
          // do this early so compiler extensions generally don't have to worry about
          // the distinction between match/begin
          compileMatch
        ].forEach(ext => ext(mode, parent));

        language.compilerExtensions.forEach(ext => ext(mode, parent));

        // __beforeBegin is considered private API, internal use only
        mode.__beforeBegin = null;

        [
          beginKeywords,
          // do this later so compiler extensions that come earlier have access to the
          // raw array if they wanted to perhaps manipulate it, etc.
          compileIllegal,
          // default to 1 relevance if not specified
          compileRelevance
        ].forEach(ext => ext(mode, parent));

        mode.isCompiled = true;

        let keywordPattern = null;
        if (typeof mode.keywords === "object") {
          keywordPattern = mode.keywords.$pattern;
          delete mode.keywords.$pattern;
        }

        if (mode.keywords) {
          mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
        }

        // both are not allowed
        if (mode.lexemes && keywordPattern) {
          throw new Error("ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) ");
        }

        // `mode.lexemes` was the old standard before we added and now recommend
        // using `keywords.$pattern` to pass the keyword pattern
        keywordPattern = keywordPattern || mode.lexemes || /\w+/;
        cmode.keywordPatternRe = langRe(keywordPattern, true);

        if (parent) {
          if (!mode.begin) mode.begin = /\B|\b/;
          cmode.beginRe = langRe(mode.begin);
          if (mode.endSameAsBegin) mode.end = mode.begin;
          if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
          if (mode.end) cmode.endRe = langRe(mode.end);
          cmode.terminatorEnd = source$9(mode.end) || '';
          if (mode.endsWithParent && parent.terminatorEnd) {
            cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;
          }
        }
        if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));
        if (!mode.contains) mode.contains = [];

        mode.contains = [].concat(...mode.contains.map(function(c) {
          return expandOrCloneMode(c === 'self' ? mode : c);
        }));
        mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });

        if (mode.starts) {
          compileMode(mode.starts, parent);
        }

        cmode.matcher = buildModeRegex(cmode);
        return cmode;
      }

      if (!language.compilerExtensions) language.compilerExtensions = [];

      // self is not valid at the top-level
      if (language.contains && language.contains.includes('self')) {
        throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
      }

      // we need a null object, which inherit will guarantee
      language.classNameAliases = inherit(language.classNameAliases || {});

      return compileMode(/** @type Mode */ (language));
    }

    /**
     * Determines if a mode has a dependency on it's parent or not
     *
     * If a mode does have a parent dependency then often we need to clone it if
     * it's used in multiple places so that each copy points to the correct parent,
     * where-as modes without a parent can often safely be re-used at the bottom of
     * a mode chain.
     *
     * @param {Mode | null} mode
     * @returns {boolean} - is there a dependency on the parent?
     * */
    function dependencyOnParent(mode) {
      if (!mode) return false;

      return mode.endsWithParent || dependencyOnParent(mode.starts);
    }

    /**
     * Expands a mode or clones it if necessary
     *
     * This is necessary for modes with parental dependenceis (see notes on
     * `dependencyOnParent`) and for nodes that have `variants` - which must then be
     * exploded into their own individual modes at compile time.
     *
     * @param {Mode} mode
     * @returns {Mode | Mode[]}
     * */
    function expandOrCloneMode(mode) {
      if (mode.variants && !mode.cachedVariants) {
        mode.cachedVariants = mode.variants.map(function(variant) {
          return inherit(mode, { variants: null }, variant);
        });
      }

      // EXPAND
      // if we have variants then essentially "replace" the mode with the variants
      // this happens in compileMode, where this function is called from
      if (mode.cachedVariants) {
        return mode.cachedVariants;
      }

      // CLONE
      // if we have dependencies on parents then we need a unique
      // instance of ourselves, so we can be reused with many
      // different parents without issue
      if (dependencyOnParent(mode)) {
        return inherit(mode, { starts: mode.starts ? inherit(mode.starts) : null });
      }

      if (Object.isFrozen(mode)) {
        return inherit(mode);
      }

      // no special dependency issues, just return ourselves
      return mode;
    }

    var version = "10.7.3";

    // @ts-nocheck

    function hasValueOrEmptyAttribute(value) {
      return Boolean(value || value === "");
    }

    function BuildVuePlugin(hljs) {
      const Component = {
        props: ["language", "code", "autodetect"],
        data: function() {
          return {
            detectedLanguage: "",
            unknownLanguage: false
          };
        },
        computed: {
          className() {
            if (this.unknownLanguage) return "";

            return "hljs " + this.detectedLanguage;
          },
          highlighted() {
            // no idea what language to use, return raw code
            if (!this.autoDetect && !hljs.getLanguage(this.language)) {
              console.warn(`The language "${this.language}" you specified could not be found.`);
              this.unknownLanguage = true;
              return escapeHTML(this.code);
            }

            let result = {};
            if (this.autoDetect) {
              result = hljs.highlightAuto(this.code);
              this.detectedLanguage = result.language;
            } else {
              result = hljs.highlight(this.language, this.code, this.ignoreIllegals);
              this.detectedLanguage = this.language;
            }
            return result.value;
          },
          autoDetect() {
            return !this.language || hasValueOrEmptyAttribute(this.autodetect);
          },
          ignoreIllegals() {
            return true;
          }
        },
        // this avoids needing to use a whole Vue compilation pipeline just
        // to build Highlight.js
        render(createElement) {
          return createElement("pre", {}, [
            createElement("code", {
              class: this.className,
              domProps: { innerHTML: this.highlighted }
            })
          ]);
        }
        // template: `<pre><code :class="className" v-html="highlighted"></code></pre>`
      };

      const VuePlugin = {
        install(Vue) {
          Vue.component('highlightjs', Component);
        }
      };

      return { Component, VuePlugin };
    }

    /* plugin itself */

    /** @type {HLJSPlugin} */
    const mergeHTMLPlugin = {
      "after:highlightElement": ({ el, result, text }) => {
        const originalStream = nodeStream(el);
        if (!originalStream.length) return;

        const resultNode = document.createElement('div');
        resultNode.innerHTML = result.value;
        result.value = mergeStreams(originalStream, nodeStream(resultNode), text);
      }
    };

    /* Stream merging support functions */

    /**
     * @typedef Event
     * @property {'start'|'stop'} event
     * @property {number} offset
     * @property {Node} node
     */

    /**
     * @param {Node} node
     */
    function tag(node) {
      return node.nodeName.toLowerCase();
    }

    /**
     * @param {Node} node
     */
    function nodeStream(node) {
      /** @type Event[] */
      const result = [];
      (function _nodeStream(node, offset) {
        for (let child = node.firstChild; child; child = child.nextSibling) {
          if (child.nodeType === 3) {
            offset += child.nodeValue.length;
          } else if (child.nodeType === 1) {
            result.push({
              event: 'start',
              offset: offset,
              node: child
            });
            offset = _nodeStream(child, offset);
            // Prevent void elements from having an end tag that would actually
            // double them in the output. There are more void elements in HTML
            // but we list only those realistically expected in code display.
            if (!tag(child).match(/br|hr|img|input/)) {
              result.push({
                event: 'stop',
                offset: offset,
                node: child
              });
            }
          }
        }
        return offset;
      })(node, 0);
      return result;
    }

    /**
     * @param {any} original - the original stream
     * @param {any} highlighted - stream of the highlighted source
     * @param {string} value - the original source itself
     */
    function mergeStreams(original, highlighted, value) {
      let processed = 0;
      let result = '';
      const nodeStack = [];

      function selectStream() {
        if (!original.length || !highlighted.length) {
          return original.length ? original : highlighted;
        }
        if (original[0].offset !== highlighted[0].offset) {
          return (original[0].offset < highlighted[0].offset) ? original : highlighted;
        }

        /*
        To avoid starting the stream just before it should stop the order is
        ensured that original always starts first and closes last:

        if (event1 == 'start' && event2 == 'start')
          return original;
        if (event1 == 'start' && event2 == 'stop')
          return highlighted;
        if (event1 == 'stop' && event2 == 'start')
          return original;
        if (event1 == 'stop' && event2 == 'stop')
          return highlighted;

        ... which is collapsed to:
        */
        return highlighted[0].event === 'start' ? original : highlighted;
      }

      /**
       * @param {Node} node
       */
      function open(node) {
        /** @param {Attr} attr */
        function attributeString(attr) {
          return ' ' + attr.nodeName + '="' + escapeHTML(attr.value) + '"';
        }
        // @ts-ignore
        result += '<' + tag(node) + [].map.call(node.attributes, attributeString).join('') + '>';
      }

      /**
       * @param {Node} node
       */
      function close(node) {
        result += '</' + tag(node) + '>';
      }

      /**
       * @param {Event} event
       */
      function render(event) {
        (event.event === 'start' ? open : close)(event.node);
      }

      while (original.length || highlighted.length) {
        let stream = selectStream();
        result += escapeHTML(value.substring(processed, stream[0].offset));
        processed = stream[0].offset;
        if (stream === original) {
          /*
          On any opening or closing tag of the original markup we first close
          the entire highlighted node stack, then render the original tag along
          with all the following original tags at the same offset and then
          reopen all the tags on the highlighted stack.
          */
          nodeStack.reverse().forEach(close);
          do {
            render(stream.splice(0, 1)[0]);
            stream = selectStream();
          } while (stream === original && stream.length && stream[0].offset === processed);
          nodeStack.reverse().forEach(open);
        } else {
          if (stream[0].event === 'start') {
            nodeStack.push(stream[0].node);
          } else {
            nodeStack.pop();
          }
          render(stream.splice(0, 1)[0]);
        }
      }
      return result + escapeHTML(value.substr(processed));
    }

    /*

    For the reasoning behind this please see:
    https://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419

    */

    /**
     * @type {Record<string, boolean>}
     */
    const seenDeprecations = {};

    /**
     * @param {string} message
     */
    const error = (message) => {
      console.error(message);
    };

    /**
     * @param {string} message
     * @param {any} args
     */
    const warn = (message, ...args) => {
      console.log(`WARN: ${message}`, ...args);
    };

    /**
     * @param {string} version
     * @param {string} message
     */
    const deprecated = (version, message) => {
      if (seenDeprecations[`${version}/${message}`]) return;

      console.log(`Deprecated as of ${version}. ${message}`);
      seenDeprecations[`${version}/${message}`] = true;
    };

    /*
    Syntax highlighting with language autodetection.
    https://highlightjs.org/
    */

    const escape$1 = escapeHTML;
    const inherit$1 = inherit;
    const NO_MATCH = Symbol("nomatch");

    /**
     * @param {any} hljs - object that is extended (legacy)
     * @returns {HLJSApi}
     */
    const HLJS = function(hljs) {
      // Global internal variables used within the highlight.js library.
      /** @type {Record<string, Language>} */
      const languages = Object.create(null);
      /** @type {Record<string, string>} */
      const aliases = Object.create(null);
      /** @type {HLJSPlugin[]} */
      const plugins = [];

      // safe/production mode - swallows more errors, tries to keep running
      // even if a single syntax or parse hits a fatal error
      let SAFE_MODE = true;
      const fixMarkupRe = /(^(<[^>]+>|\t|)+|\n)/gm;
      const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
      /** @type {Language} */
      const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };

      // Global options used when within external APIs. This is modified when
      // calling the `hljs.configure` function.
      /** @type HLJSOptions */
      let options = {
        noHighlightRe: /^(no-?highlight)$/i,
        languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
        classPrefix: 'hljs-',
        tabReplace: null,
        useBR: false,
        languages: null,
        // beta configuration options, subject to change, welcome to discuss
        // https://github.com/highlightjs/highlight.js/issues/1086
        __emitter: TokenTreeEmitter
      };

      /* Utility functions */

      /**
       * Tests a language name to see if highlighting should be skipped
       * @param {string} languageName
       */
      function shouldNotHighlight(languageName) {
        return options.noHighlightRe.test(languageName);
      }

      /**
       * @param {HighlightedHTMLElement} block - the HTML element to determine language for
       */
      function blockLanguage(block) {
        let classes = block.className + ' ';

        classes += block.parentNode ? block.parentNode.className : '';

        // language-* takes precedence over non-prefixed class names.
        const match = options.languageDetectRe.exec(classes);
        if (match) {
          const language = getLanguage(match[1]);
          if (!language) {
            warn(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
            warn("Falling back to no-highlight mode for this block.", block);
          }
          return language ? match[1] : 'no-highlight';
        }

        return classes
          .split(/\s+/)
          .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
      }

      /**
       * Core highlighting function.
       *
       * OLD API
       * highlight(lang, code, ignoreIllegals, continuation)
       *
       * NEW API
       * highlight(code, {lang, ignoreIllegals})
       *
       * @param {string} codeOrlanguageName - the language to use for highlighting
       * @param {string | HighlightOptions} optionsOrCode - the code to highlight
       * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
       * @param {CompiledMode} [continuation] - current continuation mode, if any
       *
       * @returns {HighlightResult} Result - an object that represents the result
       * @property {string} language - the language name
       * @property {number} relevance - the relevance score
       * @property {string} value - the highlighted HTML code
       * @property {string} code - the original raw code
       * @property {CompiledMode} top - top of the current mode stack
       * @property {boolean} illegal - indicates whether any illegal matches were found
      */
      function highlight(codeOrlanguageName, optionsOrCode, ignoreIllegals, continuation) {
        let code = "";
        let languageName = "";
        if (typeof optionsOrCode === "object") {
          code = codeOrlanguageName;
          ignoreIllegals = optionsOrCode.ignoreIllegals;
          languageName = optionsOrCode.language;
          // continuation not supported at all via the new API
          // eslint-disable-next-line no-undefined
          continuation = undefined;
        } else {
          // old API
          deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
          deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
          languageName = codeOrlanguageName;
          code = optionsOrCode;
        }

        /** @type {BeforeHighlightContext} */
        const context = {
          code,
          language: languageName
        };
        // the plugin can change the desired language or the code to be highlighted
        // just be changing the object it was passed
        fire("before:highlight", context);

        // a before plugin can usurp the result completely by providing it's own
        // in which case we don't even need to call highlight
        const result = context.result
          ? context.result
          : _highlight(context.language, context.code, ignoreIllegals, continuation);

        result.code = context.code;
        // the plugin can change anything in result to suite it
        fire("after:highlight", result);

        return result;
      }

      /**
       * private highlight that's used internally and does not fire callbacks
       *
       * @param {string} languageName - the language to use for highlighting
       * @param {string} codeToHighlight - the code to highlight
       * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
       * @param {CompiledMode?} [continuation] - current continuation mode, if any
       * @returns {HighlightResult} - result of the highlight operation
      */
      function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
        /**
         * Return keyword data if a match is a keyword
         * @param {CompiledMode} mode - current mode
         * @param {RegExpMatchArray} match - regexp match data
         * @returns {KeywordData | false}
         */
        function keywordData(mode, match) {
          const matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];
          return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];
        }

        function processKeywords() {
          if (!top.keywords) {
            emitter.addText(modeBuffer);
            return;
          }

          let lastIndex = 0;
          top.keywordPatternRe.lastIndex = 0;
          let match = top.keywordPatternRe.exec(modeBuffer);
          let buf = "";

          while (match) {
            buf += modeBuffer.substring(lastIndex, match.index);
            const data = keywordData(top, match);
            if (data) {
              const [kind, keywordRelevance] = data;
              emitter.addText(buf);
              buf = "";

              relevance += keywordRelevance;
              if (kind.startsWith("_")) {
                // _ implied for relevance only, do not highlight
                // by applying a class name
                buf += match[0];
              } else {
                const cssClass = language.classNameAliases[kind] || kind;
                emitter.addKeyword(match[0], cssClass);
              }
            } else {
              buf += match[0];
            }
            lastIndex = top.keywordPatternRe.lastIndex;
            match = top.keywordPatternRe.exec(modeBuffer);
          }
          buf += modeBuffer.substr(lastIndex);
          emitter.addText(buf);
        }

        function processSubLanguage() {
          if (modeBuffer === "") return;
          /** @type HighlightResult */
          let result = null;

          if (typeof top.subLanguage === 'string') {
            if (!languages[top.subLanguage]) {
              emitter.addText(modeBuffer);
              return;
            }
            result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
            continuations[top.subLanguage] = /** @type {CompiledMode} */ (result.top);
          } else {
            result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
          }

          // Counting embedded language score towards the host language may be disabled
          // with zeroing the containing mode relevance. Use case in point is Markdown that
          // allows XML everywhere and makes every XML snippet to have a much larger Markdown
          // score.
          if (top.relevance > 0) {
            relevance += result.relevance;
          }
          emitter.addSublanguage(result.emitter, result.language);
        }

        function processBuffer() {
          if (top.subLanguage != null) {
            processSubLanguage();
          } else {
            processKeywords();
          }
          modeBuffer = '';
        }

        /**
         * @param {Mode} mode - new mode to start
         */
        function startNewMode(mode) {
          if (mode.className) {
            emitter.openNode(language.classNameAliases[mode.className] || mode.className);
          }
          top = Object.create(mode, { parent: { value: top } });
          return top;
        }

        /**
         * @param {CompiledMode } mode - the mode to potentially end
         * @param {RegExpMatchArray} match - the latest match
         * @param {string} matchPlusRemainder - match plus remainder of content
         * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
         */
        function endOfMode(mode, match, matchPlusRemainder) {
          let matched = startsWith(mode.endRe, matchPlusRemainder);

          if (matched) {
            if (mode["on:end"]) {
              const resp = new Response(mode);
              mode["on:end"](match, resp);
              if (resp.isMatchIgnored) matched = false;
            }

            if (matched) {
              while (mode.endsParent && mode.parent) {
                mode = mode.parent;
              }
              return mode;
            }
          }
          // even if on:end fires an `ignore` it's still possible
          // that we might trigger the end node because of a parent mode
          if (mode.endsWithParent) {
            return endOfMode(mode.parent, match, matchPlusRemainder);
          }
        }

        /**
         * Handle matching but then ignoring a sequence of text
         *
         * @param {string} lexeme - string containing full match text
         */
        function doIgnore(lexeme) {
          if (top.matcher.regexIndex === 0) {
            // no more regexs to potentially match here, so we move the cursor forward one
            // space
            modeBuffer += lexeme[0];
            return 1;
          } else {
            // no need to move the cursor, we still have additional regexes to try and
            // match at this very spot
            resumeScanAtSamePosition = true;
            return 0;
          }
        }

        /**
         * Handle the start of a new potential mode match
         *
         * @param {EnhancedMatch} match - the current match
         * @returns {number} how far to advance the parse cursor
         */
        function doBeginMatch(match) {
          const lexeme = match[0];
          const newMode = match.rule;

          const resp = new Response(newMode);
          // first internal before callbacks, then the public ones
          const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
          for (const cb of beforeCallbacks) {
            if (!cb) continue;
            cb(match, resp);
            if (resp.isMatchIgnored) return doIgnore(lexeme);
          }

          if (newMode && newMode.endSameAsBegin) {
            newMode.endRe = escape(lexeme);
          }

          if (newMode.skip) {
            modeBuffer += lexeme;
          } else {
            if (newMode.excludeBegin) {
              modeBuffer += lexeme;
            }
            processBuffer();
            if (!newMode.returnBegin && !newMode.excludeBegin) {
              modeBuffer = lexeme;
            }
          }
          startNewMode(newMode);
          // if (mode["after:begin"]) {
          //   let resp = new Response(mode);
          //   mode["after:begin"](match, resp);
          // }
          return newMode.returnBegin ? 0 : lexeme.length;
        }

        /**
         * Handle the potential end of mode
         *
         * @param {RegExpMatchArray} match - the current match
         */
        function doEndMatch(match) {
          const lexeme = match[0];
          const matchPlusRemainder = codeToHighlight.substr(match.index);

          const endMode = endOfMode(top, match, matchPlusRemainder);
          if (!endMode) { return NO_MATCH; }

          const origin = top;
          if (origin.skip) {
            modeBuffer += lexeme;
          } else {
            if (!(origin.returnEnd || origin.excludeEnd)) {
              modeBuffer += lexeme;
            }
            processBuffer();
            if (origin.excludeEnd) {
              modeBuffer = lexeme;
            }
          }
          do {
            if (top.className) {
              emitter.closeNode();
            }
            if (!top.skip && !top.subLanguage) {
              relevance += top.relevance;
            }
            top = top.parent;
          } while (top !== endMode.parent);
          if (endMode.starts) {
            if (endMode.endSameAsBegin) {
              endMode.starts.endRe = endMode.endRe;
            }
            startNewMode(endMode.starts);
          }
          return origin.returnEnd ? 0 : lexeme.length;
        }

        function processContinuations() {
          const list = [];
          for (let current = top; current !== language; current = current.parent) {
            if (current.className) {
              list.unshift(current.className);
            }
          }
          list.forEach(item => emitter.openNode(item));
        }

        /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */
        let lastMatch = {};

        /**
         *  Process an individual match
         *
         * @param {string} textBeforeMatch - text preceeding the match (since the last match)
         * @param {EnhancedMatch} [match] - the match itself
         */
        function processLexeme(textBeforeMatch, match) {
          const lexeme = match && match[0];

          // add non-matched text to the current mode buffer
          modeBuffer += textBeforeMatch;

          if (lexeme == null) {
            processBuffer();
            return 0;
          }

          // we've found a 0 width match and we're stuck, so we need to advance
          // this happens when we have badly behaved rules that have optional matchers to the degree that
          // sometimes they can end up matching nothing at all
          // Ref: https://github.com/highlightjs/highlight.js/issues/2140
          if (lastMatch.type === "begin" && match.type === "end" && lastMatch.index === match.index && lexeme === "") {
            // spit the "skipped" character that our regex choked on back into the output sequence
            modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
            if (!SAFE_MODE) {
              /** @type {AnnotatedError} */
              const err = new Error('0 width match regex');
              err.languageName = languageName;
              err.badRule = lastMatch.rule;
              throw err;
            }
            return 1;
          }
          lastMatch = match;

          if (match.type === "begin") {
            return doBeginMatch(match);
          } else if (match.type === "illegal" && !ignoreIllegals) {
            // illegal match, we do not continue processing
            /** @type {AnnotatedError} */
            const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');
            err.mode = top;
            throw err;
          } else if (match.type === "end") {
            const processed = doEndMatch(match);
            if (processed !== NO_MATCH) {
              return processed;
            }
          }

          // edge case for when illegal matches $ (end of line) which is technically
          // a 0 width match but not a begin/end match so it's not caught by the
          // first handler (when ignoreIllegals is true)
          if (match.type === "illegal" && lexeme === "") {
            // advance so we aren't stuck in an infinite loop
            return 1;
          }

          // infinite loops are BAD, this is a last ditch catch all. if we have a
          // decent number of iterations yet our index (cursor position in our
          // parsing) still 3x behind our index then something is very wrong
          // so we bail
          if (iterations > 100000 && iterations > match.index * 3) {
            const err = new Error('potential infinite loop, way more iterations than matches');
            throw err;
          }

          /*
          Why might be find ourselves here?  Only one occasion now.  An end match that was
          triggered but could not be completed.  When might this happen?  When an `endSameasBegin`
          rule sets the end rule to a specific match.  Since the overall mode termination rule that's
          being used to scan the text isn't recompiled that means that any match that LOOKS like
          the end (but is not, because it is not an exact match to the beginning) will
          end up here.  A definite end match, but when `doEndMatch` tries to "reapply"
          the end rule and fails to match, we wind up here, and just silently ignore the end.

          This causes no real harm other than stopping a few times too many.
          */

          modeBuffer += lexeme;
          return lexeme.length;
        }

        const language = getLanguage(languageName);
        if (!language) {
          error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
          throw new Error('Unknown language: "' + languageName + '"');
        }

        const md = compileLanguage(language, { plugins });
        let result = '';
        /** @type {CompiledMode} */
        let top = continuation || md;
        /** @type Record<string,CompiledMode> */
        const continuations = {}; // keep continuations for sub-languages
        const emitter = new options.__emitter(options);
        processContinuations();
        let modeBuffer = '';
        let relevance = 0;
        let index = 0;
        let iterations = 0;
        let resumeScanAtSamePosition = false;

        try {
          top.matcher.considerAll();

          for (;;) {
            iterations++;
            if (resumeScanAtSamePosition) {
              // only regexes not matched previously will now be
              // considered for a potential match
              resumeScanAtSamePosition = false;
            } else {
              top.matcher.considerAll();
            }
            top.matcher.lastIndex = index;

            const match = top.matcher.exec(codeToHighlight);
            // console.log("match", match[0], match.rule && match.rule.begin)

            if (!match) break;

            const beforeMatch = codeToHighlight.substring(index, match.index);
            const processedCount = processLexeme(beforeMatch, match);
            index = match.index + processedCount;
          }
          processLexeme(codeToHighlight.substr(index));
          emitter.closeAllNodes();
          emitter.finalize();
          result = emitter.toHTML();

          return {
            // avoid possible breakage with v10 clients expecting
            // this to always be an integer
            relevance: Math.floor(relevance),
            value: result,
            language: languageName,
            illegal: false,
            emitter: emitter,
            top: top
          };
        } catch (err) {
          if (err.message && err.message.includes('Illegal')) {
            return {
              illegal: true,
              illegalBy: {
                msg: err.message,
                context: codeToHighlight.slice(index - 100, index + 100),
                mode: err.mode
              },
              sofar: result,
              relevance: 0,
              value: escape$1(codeToHighlight),
              emitter: emitter
            };
          } else if (SAFE_MODE) {
            return {
              illegal: false,
              relevance: 0,
              value: escape$1(codeToHighlight),
              emitter: emitter,
              language: languageName,
              top: top,
              errorRaised: err
            };
          } else {
            throw err;
          }
        }
      }

      /**
       * returns a valid highlight result, without actually doing any actual work,
       * auto highlight starts with this and it's possible for small snippets that
       * auto-detection may not find a better match
       * @param {string} code
       * @returns {HighlightResult}
       */
      function justTextHighlightResult(code) {
        const result = {
          relevance: 0,
          emitter: new options.__emitter(options),
          value: escape$1(code),
          illegal: false,
          top: PLAINTEXT_LANGUAGE
        };
        result.emitter.addText(code);
        return result;
      }

      /**
      Highlighting with language detection. Accepts a string with the code to
      highlight. Returns an object with the following properties:

      - language (detected language)
      - relevance (int)
      - value (an HTML string with highlighting markup)
      - second_best (object with the same structure for second-best heuristically
        detected language, may be absent)

        @param {string} code
        @param {Array<string>} [languageSubset]
        @returns {AutoHighlightResult}
      */
      function highlightAuto(code, languageSubset) {
        languageSubset = languageSubset || options.languages || Object.keys(languages);
        const plaintext = justTextHighlightResult(code);

        const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>
          _highlight(name, code, false)
        );
        results.unshift(plaintext); // plaintext is always an option

        const sorted = results.sort((a, b) => {
          // sort base on relevance
          if (a.relevance !== b.relevance) return b.relevance - a.relevance;

          // always award the tie to the base language
          // ie if C++ and Arduino are tied, it's more likely to be C++
          if (a.language && b.language) {
            if (getLanguage(a.language).supersetOf === b.language) {
              return 1;
            } else if (getLanguage(b.language).supersetOf === a.language) {
              return -1;
            }
          }

          // otherwise say they are equal, which has the effect of sorting on
          // relevance while preserving the original ordering - which is how ties
          // have historically been settled, ie the language that comes first always
          // wins in the case of a tie
          return 0;
        });

        const [best, secondBest] = sorted;

        /** @type {AutoHighlightResult} */
        const result = best;
        result.second_best = secondBest;

        return result;
      }

      /**
      Post-processing of the highlighted markup:

      - replace TABs with something more useful
      - replace real line-breaks with '<br>' for non-pre containers

        @param {string} html
        @returns {string}
      */
      function fixMarkup(html) {
        if (!(options.tabReplace || options.useBR)) {
          return html;
        }

        return html.replace(fixMarkupRe, match => {
          if (match === '\n') {
            return options.useBR ? '<br>' : match;
          } else if (options.tabReplace) {
            return match.replace(/\t/g, options.tabReplace);
          }
          return match;
        });
      }

      /**
       * Builds new class name for block given the language name
       *
       * @param {HTMLElement} element
       * @param {string} [currentLang]
       * @param {string} [resultLang]
       */
      function updateClassName(element, currentLang, resultLang) {
        const language = currentLang ? aliases[currentLang] : resultLang;

        element.classList.add("hljs");
        if (language) element.classList.add(language);
      }

      /** @type {HLJSPlugin} */
      const brPlugin = {
        "before:highlightElement": ({ el }) => {
          if (options.useBR) {
            el.innerHTML = el.innerHTML.replace(/\n/g, '').replace(/<br[ /]*>/g, '\n');
          }
        },
        "after:highlightElement": ({ result }) => {
          if (options.useBR) {
            result.value = result.value.replace(/\n/g, "<br>");
          }
        }
      };

      const TAB_REPLACE_RE = /^(<[^>]+>|\t)+/gm;
      /** @type {HLJSPlugin} */
      const tabReplacePlugin = {
        "after:highlightElement": ({ result }) => {
          if (options.tabReplace) {
            result.value = result.value.replace(TAB_REPLACE_RE, (m) =>
              m.replace(/\t/g, options.tabReplace)
            );
          }
        }
      };

      /**
       * Applies highlighting to a DOM node containing code. Accepts a DOM node and
       * two optional parameters for fixMarkup.
       *
       * @param {HighlightedHTMLElement} element - the HTML element to highlight
      */
      function highlightElement(element) {
        /** @type HTMLElement */
        let node = null;
        const language = blockLanguage(element);

        if (shouldNotHighlight(language)) return;

        // support for v10 API
        fire("before:highlightElement",
          { el: element, language: language });

        node = element;
        const text = node.textContent;
        const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);

        // support for v10 API
        fire("after:highlightElement", { el: element, result, text });

        element.innerHTML = result.value;
        updateClassName(element, language, result.language);
        element.result = {
          language: result.language,
          // TODO: remove with version 11.0
          re: result.relevance,
          relavance: result.relevance
        };
        if (result.second_best) {
          element.second_best = {
            language: result.second_best.language,
            // TODO: remove with version 11.0
            re: result.second_best.relevance,
            relavance: result.second_best.relevance
          };
        }
      }

      /**
       * Updates highlight.js global options with the passed options
       *
       * @param {Partial<HLJSOptions>} userOptions
       */
      function configure(userOptions) {
        if (userOptions.useBR) {
          deprecated("10.3.0", "'useBR' will be removed entirely in v11.0");
          deprecated("10.3.0", "Please see https://github.com/highlightjs/highlight.js/issues/2559");
        }
        options = inherit$1(options, userOptions);
      }

      /**
       * Highlights to all <pre><code> blocks on a page
       *
       * @type {Function & {called?: boolean}}
       */
      // TODO: remove v12, deprecated
      const initHighlighting = () => {
        if (initHighlighting.called) return;
        initHighlighting.called = true;

        deprecated("10.6.0", "initHighlighting() is deprecated.  Use highlightAll() instead.");

        const blocks = document.querySelectorAll('pre code');
        blocks.forEach(highlightElement);
      };

      // Higlights all when DOMContentLoaded fires
      // TODO: remove v12, deprecated
      function initHighlightingOnLoad() {
        deprecated("10.6.0", "initHighlightingOnLoad() is deprecated.  Use highlightAll() instead.");
        wantsHighlight = true;
      }

      let wantsHighlight = false;

      /**
       * auto-highlights all pre>code elements on the page
       */
      function highlightAll() {
        // if we are called too early in the loading process
        if (document.readyState === "loading") {
          wantsHighlight = true;
          return;
        }

        const blocks = document.querySelectorAll('pre code');
        blocks.forEach(highlightElement);
      }

      function boot() {
        // if a highlight was requested before DOM was loaded, do now
        if (wantsHighlight) highlightAll();
      }

      // make sure we are in the browser environment
      if (typeof window !== 'undefined' && window.addEventListener) {
        window.addEventListener('DOMContentLoaded', boot, false);
      }

      /**
       * Register a language grammar module
       *
       * @param {string} languageName
       * @param {LanguageFn} languageDefinition
       */
      function registerLanguage(languageName, languageDefinition) {
        let lang = null;
        try {
          lang = languageDefinition(hljs);
        } catch (error$1) {
          error("Language definition for '{}' could not be registered.".replace("{}", languageName));
          // hard or soft error
          if (!SAFE_MODE) { throw error$1; } else { error(error$1); }
          // languages that have serious errors are replaced with essentially a
          // "plaintext" stand-in so that the code blocks will still get normal
          // css classes applied to them - and one bad language won't break the
          // entire highlighter
          lang = PLAINTEXT_LANGUAGE;
        }
        // give it a temporary name if it doesn't have one in the meta-data
        if (!lang.name) lang.name = languageName;
        languages[languageName] = lang;
        lang.rawDefinition = languageDefinition.bind(null, hljs);

        if (lang.aliases) {
          registerAliases(lang.aliases, { languageName });
        }
      }

      /**
       * Remove a language grammar module
       *
       * @param {string} languageName
       */
      function unregisterLanguage(languageName) {
        delete languages[languageName];
        for (const alias of Object.keys(aliases)) {
          if (aliases[alias] === languageName) {
            delete aliases[alias];
          }
        }
      }

      /**
       * @returns {string[]} List of language internal names
       */
      function listLanguages() {
        return Object.keys(languages);
      }

      /**
        intended usage: When one language truly requires another

        Unlike `getLanguage`, this will throw when the requested language
        is not available.

        @param {string} name - name of the language to fetch/require
        @returns {Language | never}
      */
      function requireLanguage(name) {
        deprecated("10.4.0", "requireLanguage will be removed entirely in v11.");
        deprecated("10.4.0", "Please see https://github.com/highlightjs/highlight.js/pull/2844");

        const lang = getLanguage(name);
        if (lang) { return lang; }

        const err = new Error('The \'{}\' language is required, but not loaded.'.replace('{}', name));
        throw err;
      }

      /**
       * @param {string} name - name of the language to retrieve
       * @returns {Language | undefined}
       */
      function getLanguage(name) {
        name = (name || '').toLowerCase();
        return languages[name] || languages[aliases[name]];
      }

      /**
       *
       * @param {string|string[]} aliasList - single alias or list of aliases
       * @param {{languageName: string}} opts
       */
      function registerAliases(aliasList, { languageName }) {
        if (typeof aliasList === 'string') {
          aliasList = [aliasList];
        }
        aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });
      }

      /**
       * Determines if a given language has auto-detection enabled
       * @param {string} name - name of the language
       */
      function autoDetection(name) {
        const lang = getLanguage(name);
        return lang && !lang.disableAutodetect;
      }

      /**
       * Upgrades the old highlightBlock plugins to the new
       * highlightElement API
       * @param {HLJSPlugin} plugin
       */
      function upgradePluginAPI(plugin) {
        // TODO: remove with v12
        if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
          plugin["before:highlightElement"] = (data) => {
            plugin["before:highlightBlock"](
              Object.assign({ block: data.el }, data)
            );
          };
        }
        if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
          plugin["after:highlightElement"] = (data) => {
            plugin["after:highlightBlock"](
              Object.assign({ block: data.el }, data)
            );
          };
        }
      }

      /**
       * @param {HLJSPlugin} plugin
       */
      function addPlugin(plugin) {
        upgradePluginAPI(plugin);
        plugins.push(plugin);
      }

      /**
       *
       * @param {PluginEvent} event
       * @param {any} args
       */
      function fire(event, args) {
        const cb = event;
        plugins.forEach(function(plugin) {
          if (plugin[cb]) {
            plugin[cb](args);
          }
        });
      }

      /**
      Note: fixMarkup is deprecated and will be removed entirely in v11

      @param {string} arg
      @returns {string}
      */
      function deprecateFixMarkup(arg) {
        deprecated("10.2.0", "fixMarkup will be removed entirely in v11.0");
        deprecated("10.2.0", "Please see https://github.com/highlightjs/highlight.js/issues/2534");

        return fixMarkup(arg);
      }

      /**
       *
       * @param {HighlightedHTMLElement} el
       */
      function deprecateHighlightBlock(el) {
        deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
        deprecated("10.7.0", "Please use highlightElement now.");

        return highlightElement(el);
      }

      /* Interface definition */
      Object.assign(hljs, {
        highlight,
        highlightAuto,
        highlightAll,
        fixMarkup: deprecateFixMarkup,
        highlightElement,
        // TODO: Remove with v12 API
        highlightBlock: deprecateHighlightBlock,
        configure,
        initHighlighting,
        initHighlightingOnLoad,
        registerLanguage,
        unregisterLanguage,
        listLanguages,
        getLanguage,
        registerAliases,
        requireLanguage,
        autoDetection,
        inherit: inherit$1,
        addPlugin,
        // plugins for frameworks
        vuePlugin: BuildVuePlugin(hljs).VuePlugin
      });

      hljs.debugMode = function() { SAFE_MODE = false; };
      hljs.safeMode = function() { SAFE_MODE = true; };
      hljs.versionString = version;

      for (const key in MODES$1) {
        // @ts-ignore
        if (typeof MODES$1[key] === "object") {
          // @ts-ignore
          deepFreezeEs6(MODES$1[key]);
        }
      }

      // merge all the modes/regexs into our main object
      Object.assign(hljs, MODES$1);

      // built-in plugins, likely to be moved out of core in the future
      hljs.addPlugin(brPlugin); // slated to be removed in v11
      hljs.addPlugin(mergeHTMLPlugin);
      hljs.addPlugin(tabReplacePlugin);
      return hljs;
    };

    // export an "instance" of the highlighter
    var highlight = HLJS({});

    var core = highlight;

    const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
    const KEYWORDS = [
      "as", // for exports
      "in",
      "of",
      "if",
      "for",
      "while",
      "finally",
      "var",
      "new",
      "function",
      "do",
      "return",
      "void",
      "else",
      "break",
      "catch",
      "instanceof",
      "with",
      "throw",
      "case",
      "default",
      "try",
      "switch",
      "continue",
      "typeof",
      "delete",
      "let",
      "yield",
      "const",
      "class",
      // JS handles these with a special rule
      // "get",
      // "set",
      "debugger",
      "async",
      "await",
      "static",
      "import",
      "from",
      "export",
      "extends"
    ];
    const LITERALS = [
      "true",
      "false",
      "null",
      "undefined",
      "NaN",
      "Infinity"
    ];

    const TYPES = [
      "Intl",
      "DataView",
      "Number",
      "Math",
      "Date",
      "String",
      "RegExp",
      "Object",
      "Function",
      "Boolean",
      "Error",
      "Symbol",
      "Set",
      "Map",
      "WeakSet",
      "WeakMap",
      "Proxy",
      "Reflect",
      "JSON",
      "Promise",
      "Float64Array",
      "Int16Array",
      "Int32Array",
      "Int8Array",
      "Uint16Array",
      "Uint32Array",
      "Float32Array",
      "Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "ArrayBuffer",
      "BigInt64Array",
      "BigUint64Array",
      "BigInt"
    ];

    const ERROR_TYPES = [
      "EvalError",
      "InternalError",
      "RangeError",
      "ReferenceError",
      "SyntaxError",
      "TypeError",
      "URIError"
    ];

    const BUILT_IN_GLOBALS = [
      "setInterval",
      "setTimeout",
      "clearInterval",
      "clearTimeout",

      "require",
      "exports",

      "eval",
      "isFinite",
      "isNaN",
      "parseFloat",
      "parseInt",
      "decodeURI",
      "decodeURIComponent",
      "encodeURI",
      "encodeURIComponent",
      "escape",
      "unescape"
    ];

    const BUILT_IN_VARIABLES = [
      "arguments",
      "this",
      "super",
      "console",
      "window",
      "document",
      "localStorage",
      "module",
      "global" // Node.js
    ];

    const BUILT_INS = [].concat(
      BUILT_IN_GLOBALS,
      BUILT_IN_VARIABLES,
      TYPES,
      ERROR_TYPES
    );

    /**
     * @param {string} value
     * @returns {RegExp}
     * */

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source$8(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function lookahead$6(re) {
      return concat$8('(?=', re, ')');
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat$8(...args) {
      const joined = args.map((x) => source$8(x)).join("");
      return joined;
    }

    /*
    Language: JavaScript
    Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
    Category: common, scripting
    Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
    */

    /** @type LanguageFn */
    function javascript(hljs) {
      /**
       * Takes a string like "<Booger" and checks to see
       * if we can find a matching "</Booger" later in the
       * content.
       * @param {RegExpMatchArray} match
       * @param {{after:number}} param1
       */
      const hasClosingTag = (match, { after }) => {
        const tag = "</" + match[0].slice(1);
        const pos = match.input.indexOf(tag, after);
        return pos !== -1;
      };

      const IDENT_RE$1 = IDENT_RE;
      const FRAGMENT = {
        begin: '<>',
        end: '</>'
      };
      const XML_TAG = {
        begin: /<[A-Za-z0-9\\._:-]+/,
        end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
        /**
         * @param {RegExpMatchArray} match
         * @param {CallbackResponse} response
         */
        isTrulyOpeningTag: (match, response) => {
          const afterMatchIndex = match[0].length + match.index;
          const nextChar = match.input[afterMatchIndex];
          // nested type?
          // HTML should not include another raw `<` inside a tag
          // But a type might: `<Array<Array<number>>`, etc.
          if (nextChar === "<") {
            response.ignoreMatch();
            return;
          }
          // <something>
          // This is now either a tag or a type.
          if (nextChar === ">") {
            // if we cannot find a matching closing tag, then we
            // will ignore it
            if (!hasClosingTag(match, { after: afterMatchIndex })) {
              response.ignoreMatch();
            }
          }
        }
      };
      const KEYWORDS$1 = {
        $pattern: IDENT_RE,
        keyword: KEYWORDS,
        literal: LITERALS,
        built_in: BUILT_INS
      };

      // https://tc39.es/ecma262/#sec-literals-numeric-literals
      const decimalDigits = '[0-9](_?[0-9])*';
      const frac = `\\.(${decimalDigits})`;
      // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
      const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
      const NUMBER = {
        className: 'number',
        variants: [
          // DecimalLiteral
          { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` +
            `[eE][+-]?(${decimalDigits})\\b` },
          { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },

          // DecimalBigIntegerLiteral
          { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },

          // NonDecimalIntegerLiteral
          { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
          { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
          { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },

          // LegacyOctalIntegerLiteral (does not include underscore separators)
          // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
          { begin: "\\b0[0-7]+n?\\b" },
        ],
        relevance: 0
      };

      const SUBST = {
        className: 'subst',
        begin: '\\$\\{',
        end: '\\}',
        keywords: KEYWORDS$1,
        contains: [] // defined later
      };
      const HTML_TEMPLATE = {
        begin: 'html`',
        end: '',
        starts: {
          end: '`',
          returnEnd: false,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST
          ],
          subLanguage: 'xml'
        }
      };
      const CSS_TEMPLATE = {
        begin: 'css`',
        end: '',
        starts: {
          end: '`',
          returnEnd: false,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST
          ],
          subLanguage: 'css'
        }
      };
      const TEMPLATE_STRING = {
        className: 'string',
        begin: '`',
        end: '`',
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ]
      };
      const JSDOC_COMMENT = hljs.COMMENT(
        /\/\*\*(?!\/)/,
        '\\*/',
        {
          relevance: 0,
          contains: [
            {
              className: 'doctag',
              begin: '@[A-Za-z]+',
              contains: [
                {
                  className: 'type',
                  begin: '\\{',
                  end: '\\}',
                  relevance: 0
                },
                {
                  className: 'variable',
                  begin: IDENT_RE$1 + '(?=\\s*(-)|$)',
                  endsParent: true,
                  relevance: 0
                },
                // eat spaces (not newlines) so we can find
                // types or variables
                {
                  begin: /(?=[^\n])\s/,
                  relevance: 0
                }
              ]
            }
          ]
        }
      );
      const COMMENT = {
        className: "comment",
        variants: [
          JSDOC_COMMENT,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.C_LINE_COMMENT_MODE
        ]
      };
      const SUBST_INTERNALS = [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        HTML_TEMPLATE,
        CSS_TEMPLATE,
        TEMPLATE_STRING,
        NUMBER,
        hljs.REGEXP_MODE
      ];
      SUBST.contains = SUBST_INTERNALS
        .concat({
          // we need to pair up {} inside our subst to prevent
          // it from ending too early by matching another }
          begin: /\{/,
          end: /\}/,
          keywords: KEYWORDS$1,
          contains: [
            "self"
          ].concat(SUBST_INTERNALS)
        });
      const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
      const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
        // eat recursive parens in sub expressions
        {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS$1,
          contains: ["self"].concat(SUBST_AND_COMMENTS)
        }
      ]);
      const PARAMS = {
        className: 'params',
        begin: /\(/,
        end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        keywords: KEYWORDS$1,
        contains: PARAMS_CONTAINS
      };

      return {
        name: 'Javascript',
        aliases: ['js', 'jsx', 'mjs', 'cjs'],
        keywords: KEYWORDS$1,
        // this will be extended by TypeScript
        exports: { PARAMS_CONTAINS },
        illegal: /#(?![$_A-z])/,
        contains: [
          hljs.SHEBANG({
            label: "shebang",
            binary: "node",
            relevance: 5
          }),
          {
            label: "use_strict",
            className: 'meta',
            relevance: 10,
            begin: /^\s*['"]use (strict|asm)['"]/
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          HTML_TEMPLATE,
          CSS_TEMPLATE,
          TEMPLATE_STRING,
          COMMENT,
          NUMBER,
          { // object attr container
            begin: concat$8(/[{,\n]\s*/,
              // we need to look ahead to make sure that we actually have an
              // attribute coming up so we don't steal a comma from a potential
              // "value" container
              //
              // NOTE: this might not work how you think.  We don't actually always
              // enter this mode and stay.  Instead it might merely match `,
              // <comments up next>` and then immediately end after the , because it
              // fails to find any actual attrs. But this still does the job because
              // it prevents the value contain rule from grabbing this instead and
              // prevening this rule from firing when we actually DO have keys.
              lookahead$6(concat$8(
                // we also need to allow for multiple possible comments inbetween
                // the first key:value pairing
                /(((\/\/.*$)|(\/\*(\*[^/]|[^*])*\*\/))\s*)*/,
                IDENT_RE$1 + '\\s*:'))),
            relevance: 0,
            contains: [
              {
                className: 'attr',
                begin: IDENT_RE$1 + lookahead$6('\\s*:'),
                relevance: 0
              }
            ]
          },
          { // "value" container
            begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
            keywords: 'return throw case',
            contains: [
              COMMENT,
              hljs.REGEXP_MODE,
              {
                className: 'function',
                // we have to count the parens to make sure we actually have the
                // correct bounding ( ) before the =>.  There could be any number of
                // sub-expressions inside also surrounded by parens.
                begin: '(\\(' +
                '[^()]*(\\(' +
                '[^()]*(\\(' +
                '[^()]*' +
                '\\)[^()]*)*' +
                '\\)[^()]*)*' +
                '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>',
                returnBegin: true,
                end: '\\s*=>',
                contains: [
                  {
                    className: 'params',
                    variants: [
                      {
                        begin: hljs.UNDERSCORE_IDENT_RE,
                        relevance: 0
                      },
                      {
                        className: null,
                        begin: /\(\s*\)/,
                        skip: true
                      },
                      {
                        begin: /\(/,
                        end: /\)/,
                        excludeBegin: true,
                        excludeEnd: true,
                        keywords: KEYWORDS$1,
                        contains: PARAMS_CONTAINS
                      }
                    ]
                  }
                ]
              },
              { // could be a comma delimited list of params to a function call
                begin: /,/, relevance: 0
              },
              {
                className: '',
                begin: /\s/,
                end: /\s*/,
                skip: true
              },
              { // JSX
                variants: [
                  { begin: FRAGMENT.begin, end: FRAGMENT.end },
                  {
                    begin: XML_TAG.begin,
                    // we carefully check the opening tag to see if it truly
                    // is a tag and not a false positive
                    'on:begin': XML_TAG.isTrulyOpeningTag,
                    end: XML_TAG.end
                  }
                ],
                subLanguage: 'xml',
                contains: [
                  {
                    begin: XML_TAG.begin,
                    end: XML_TAG.end,
                    skip: true,
                    contains: ['self']
                  }
                ]
              }
            ],
            relevance: 0
          },
          {
            className: 'function',
            beginKeywords: 'function',
            end: /[{;]/,
            excludeEnd: true,
            keywords: KEYWORDS$1,
            contains: [
              'self',
              hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1 }),
              PARAMS
            ],
            illegal: /%/
          },
          {
            // prevent this from getting swallowed up by function
            // since they appear "function like"
            beginKeywords: "while if switch catch for"
          },
          {
            className: 'function',
            // we have to count the parens to make sure we actually have the correct
            // bounding ( ).  There could be any number of sub-expressions inside
            // also surrounded by parens.
            begin: hljs.UNDERSCORE_IDENT_RE +
              '\\(' + // first parens
              '[^()]*(\\(' +
                '[^()]*(\\(' +
                  '[^()]*' +
                '\\)[^()]*)*' +
              '\\)[^()]*)*' +
              '\\)\\s*\\{', // end parens
            returnBegin:true,
            contains: [
              PARAMS,
              hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1 }),
            ]
          },
          // hack: prevents detection of keywords in some circumstances
          // .keyword()
          // $keyword = x
          {
            variants: [
              { begin: '\\.' + IDENT_RE$1 },
              { begin: '\\$' + IDENT_RE$1 }
            ],
            relevance: 0
          },
          { // ES6 class
            className: 'class',
            beginKeywords: 'class',
            end: /[{;=]/,
            excludeEnd: true,
            illegal: /[:"[\]]/,
            contains: [
              { beginKeywords: 'extends' },
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            begin: /\b(?=constructor)/,
            end: /[{;]/,
            excludeEnd: true,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1 }),
              'self',
              PARAMS
            ]
          },
          {
            begin: '(get|set)\\s+(?=' + IDENT_RE$1 + '\\()',
            end: /\{/,
            keywords: "get set",
            contains: [
              hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1 }),
              { begin: /\(\)/ }, // eat to avoid empty params
              PARAMS
            ]
          },
          {
            begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
          }
        ]
      };
    }

    var javascript_1 = javascript;

    /**
     * @param {string} value
     * @returns {RegExp}
     * */

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source$7(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat$7(...args) {
      const joined = args.map((x) => source$7(x)).join("");
      return joined;
    }

    /*
    Language: Bash
    Author: vah <vahtenberg@gmail.com>
    Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
    Website: https://www.gnu.org/software/bash/
    Category: common
    */

    /** @type LanguageFn */
    function bash(hljs) {
      const VAR = {};
      const BRACED_VAR = {
        begin: /\$\{/,
        end:/\}/,
        contains: [
          "self",
          {
            begin: /:-/,
            contains: [ VAR ]
          } // default values
        ]
      };
      Object.assign(VAR,{
        className: 'variable',
        variants: [
          {begin: concat$7(/\$[\w\d#@][\w\d_]*/,
            // negative look-ahead tries to avoid matching patterns that are not
            // Perl at all like $ident$, @ident@, etc.
            `(?![\\w\\d])(?![$])`) },
          BRACED_VAR
        ]
      });

      const SUBST = {
        className: 'subst',
        begin: /\$\(/, end: /\)/,
        contains: [hljs.BACKSLASH_ESCAPE]
      };
      const HERE_DOC = {
        begin: /<<-?\s*(?=\w+)/,
        starts: {
          contains: [
            hljs.END_SAME_AS_BEGIN({
              begin: /(\w+)/,
              end: /(\w+)/,
              className: 'string'
            })
          ]
        }
      };
      const QUOTE_STRING = {
        className: 'string',
        begin: /"/, end: /"/,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          VAR,
          SUBST
        ]
      };
      SUBST.contains.push(QUOTE_STRING);
      const ESCAPED_QUOTE = {
        className: '',
        begin: /\\"/

      };
      const APOS_STRING = {
        className: 'string',
        begin: /'/, end: /'/
      };
      const ARITHMETIC = {
        begin: /\$\(\(/,
        end: /\)\)/,
        contains: [
          { begin: /\d+#[0-9a-f]+/, className: "number" },
          hljs.NUMBER_MODE,
          VAR
        ]
      };
      const SH_LIKE_SHELLS = [
        "fish",
        "bash",
        "zsh",
        "sh",
        "csh",
        "ksh",
        "tcsh",
        "dash",
        "scsh",
      ];
      const KNOWN_SHEBANG = hljs.SHEBANG({
        binary: `(${SH_LIKE_SHELLS.join("|")})`,
        relevance: 10
      });
      const FUNCTION = {
        className: 'function',
        begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
        returnBegin: true,
        contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\w[\w\d_]*/})],
        relevance: 0
      };

      return {
        name: 'Bash',
        aliases: ['sh', 'zsh'],
        keywords: {
          $pattern: /\b[a-z._-]+\b/,
          keyword:
            'if then else elif fi for while in do done case esac function',
          literal:
            'true false',
          built_in:
            // Shell built-ins
            // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
            'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +
            'trap umask unset ' +
            // Bash built-ins
            'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +
            'read readarray source type typeset ulimit unalias ' +
            // Shell modifiers
            'set shopt ' +
            // Zsh built-ins
            'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +
            'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +
            'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +
            'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +
            'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +
            'zpty zregexparse zsocket zstyle ztcp'
        },
        contains: [
          KNOWN_SHEBANG, // to catch known shells and boost relevancy
          hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang
          FUNCTION,
          ARITHMETIC,
          hljs.HASH_COMMENT_MODE,
          HERE_DOC,
          QUOTE_STRING,
          ESCAPED_QUOTE,
          APOS_STRING,
          VAR
        ]
      };
    }

    var bash_1 = bash;

    /*
    Language: Vim Script
    Author: Jun Yang <yangjvn@126.com>
    Description: full keyword and built-in from http://vimdoc.sourceforge.net/htmldoc/
    Website: https://www.vim.org
    Category: scripting
    */

    function vim(hljs) {
      return {
        name: 'Vim Script',
        keywords: {
          $pattern: /[!#@\w]+/,
          keyword:
            // express version except: ! & * < = > !! # @ @@
            'N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope ' +
            'cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ' +
            'ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 ' +
            'profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor ' +
            'so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew ' +
            'tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ ' +
            // full version
            'Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload ' +
            'bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap ' +
            'cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor ' +
            'endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap ' +
            'imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview ' +
            'lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap ' +
            'nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ' +
            'ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding ' +
            'scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace ' +
            'startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious ' + 'trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew ' +
            'vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank',
          built_in: // built in func
            'synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv ' +
            'complete_check add getwinposx getqflist getwinposy screencol ' +
            'clearmatches empty extend getcmdpos mzeval garbagecollect setreg ' +
            'ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable ' +
            'shiftwidth max sinh isdirectory synID system inputrestore winline ' +
            'atan visualmode inputlist tabpagewinnr round getregtype mapcheck ' +
            'hasmapto histdel argidx findfile sha256 exists toupper getcmdline ' +
            'taglist string getmatches bufnr strftime winwidth bufexists ' +
            'strtrans tabpagebuflist setcmdpos remote_read printf setloclist ' +
            'getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval ' +
            'resolve libcallnr foldclosedend reverse filter has_key bufname ' +
            'str2float strlen setline getcharmod setbufvar index searchpos ' +
            'shellescape undofile foldclosed setqflist buflisted strchars str2nr ' +
            'virtcol floor remove undotree remote_expr winheight gettabwinvar ' +
            'reltime cursor tabpagenr finddir localtime acos getloclist search ' +
            'tanh matchend rename gettabvar strdisplaywidth type abs py3eval ' +
            'setwinvar tolower wildmenumode log10 spellsuggest bufloaded ' +
            'synconcealed nextnonblank server2client complete settabwinvar ' +
            'executable input wincol setmatches getftype hlID inputsave ' +
            'searchpair or screenrow line settabvar histadd deepcopy strpart ' +
            'remote_peek and eval getftime submatch screenchar winsaveview ' +
            'matchadd mkdir screenattr getfontname libcall reltimestr getfsize ' +
            'winnr invert pow getbufline byte2line soundfold repeat fnameescape ' +
            'tagfiles sin strwidth spellbadword trunc maparg log lispindent ' +
            'hostname setpos globpath remote_foreground getchar synIDattr ' +
            'fnamemodify cscope_connection stridx winbufnr indent min ' +
            'complete_add nr2char searchpairpos inputdialog values matchlist ' +
            'items hlexists strridx browsedir expand fmod pathshorten line2byte ' +
            'argc count getwinvar glob foldtextresult getreg foreground cosh ' +
            'matchdelete has char2nr simplify histget searchdecl iconv ' +
            'winrestcmd pumvisible writefile foldlevel haslocaldir keys cos ' +
            'matchstr foldtext histnr tan tempname getcwd byteidx getbufvar ' +
            'islocked escape eventhandler remote_send serverlist winrestview ' +
            'synstack pyeval prevnonblank readfile cindent filereadable changenr ' +
            'exp'
        },
        illegal: /;/,
        contains: [
          hljs.NUMBER_MODE,
          {
            className: 'string',
            begin: '\'',
            end: '\'',
            illegal: '\\n'
          },

          /*
          A double quote can start either a string or a line comment. Strings are
          ended before the end of a line by another double quote and can contain
          escaped double-quotes and post-escaped line breaks.

          Also, any double quote at the beginning of a line is a comment but we
          don't handle that properly at the moment: any double quote inside will
          turn them into a string. Handling it properly will require a smarter
          parser.
          */
          {
            className: 'string',
            begin: /"(\\"|\n\\|[^"\n])*"/
          },
          hljs.COMMENT('"', '$'),

          {
            className: 'variable',
            begin: /[bwtglsav]:[\w\d_]*/
          },
          {
            className: 'function',
            beginKeywords: 'function function!',
            end: '$',
            relevance: 0,
            contains: [
              hljs.TITLE_MODE,
              {
                className: 'params',
                begin: '\\(',
                end: '\\)'
              }
            ]
          },
          {
            className: 'symbol',
            begin: /<[\w-]+>/
          }
        ]
      };
    }

    var vim_1 = vim;

    /**
     * @param {string} value
     * @returns {RegExp}
     * */

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source$6(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function lookahead$5(re) {
      return concat$6('(?=', re, ')');
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function optional$1(re) {
      return concat$6('(', re, ')?');
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat$6(...args) {
      const joined = args.map((x) => source$6(x)).join("");
      return joined;
    }

    /*
    Language: C++
    Category: common, system
    Website: https://isocpp.org
    */

    /** @type LanguageFn */
    function cpp(hljs) {
      // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
      // not include such support nor can we be sure all the grammars depending
      // on it would desire this behavior
      const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {
        contains: [
          {
            begin: /\\\n/
          }
        ]
      });
      const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
      const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
      const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
      const FUNCTION_TYPE_RE = '(' +
        DECLTYPE_AUTO_RE + '|' +
        optional$1(NAMESPACE_RE) +
        '[a-zA-Z_]\\w*' + optional$1(TEMPLATE_ARGUMENT_RE) +
      ')';
      const CPP_PRIMITIVE_TYPES = {
        className: 'keyword',
        begin: '\\b[a-z\\d_]*_t\\b'
      };

      // https://en.cppreference.com/w/cpp/language/escape
      // \\ \x \xFF \u2837 \u00323747 \374
      const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
      const STRINGS = {
        className: 'string',
        variants: [
          {
            begin: '(u8?|U|L)?"',
            end: '"',
            illegal: '\\n',
            contains: [ hljs.BACKSLASH_ESCAPE ]
          },
          {
            begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + "|.)",
            end: '\'',
            illegal: '.'
          },
          hljs.END_SAME_AS_BEGIN({
            begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
            end: /\)([^()\\ ]{0,16})"/
          })
        ]
      };

      const NUMBERS = {
        className: 'number',
        variants: [
          {
            begin: '\\b(0b[01\']+)'
          },
          {
            begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'
          },
          {
            begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)'
          }
        ],
        relevance: 0
      };

      const PREPROCESSOR = {
        className: 'meta',
        begin: /#\s*[a-z]+\b/,
        end: /$/,
        keywords: {
          'meta-keyword':
            'if else elif endif define undef warning error line ' +
            'pragma _Pragma ifdef ifndef include'
        },
        contains: [
          {
            begin: /\\\n/,
            relevance: 0
          },
          hljs.inherit(STRINGS, {
            className: 'meta-string'
          }),
          {
            className: 'meta-string',
            begin: /<.*?>/
          },
          C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      };

      const TITLE_MODE = {
        className: 'title',
        begin: optional$1(NAMESPACE_RE) + hljs.IDENT_RE,
        relevance: 0
      };

      const FUNCTION_TITLE = optional$1(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';

      const COMMON_CPP_HINTS = [
        'asin',
        'atan2',
        'atan',
        'calloc',
        'ceil',
        'cosh',
        'cos',
        'exit',
        'exp',
        'fabs',
        'floor',
        'fmod',
        'fprintf',
        'fputs',
        'free',
        'frexp',
        'auto_ptr',
        'deque',
        'list',
        'queue',
        'stack',
        'vector',
        'map',
        'set',
        'pair',
        'bitset',
        'multiset',
        'multimap',
        'unordered_set',
        'fscanf',
        'future',
        'isalnum',
        'isalpha',
        'iscntrl',
        'isdigit',
        'isgraph',
        'islower',
        'isprint',
        'ispunct',
        'isspace',
        'isupper',
        'isxdigit',
        'tolower',
        'toupper',
        'labs',
        'ldexp',
        'log10',
        'log',
        'malloc',
        'realloc',
        'memchr',
        'memcmp',
        'memcpy',
        'memset',
        'modf',
        'pow',
        'printf',
        'putchar',
        'puts',
        'scanf',
        'sinh',
        'sin',
        'snprintf',
        'sprintf',
        'sqrt',
        'sscanf',
        'strcat',
        'strchr',
        'strcmp',
        'strcpy',
        'strcspn',
        'strlen',
        'strncat',
        'strncmp',
        'strncpy',
        'strpbrk',
        'strrchr',
        'strspn',
        'strstr',
        'tanh',
        'tan',
        'unordered_map',
        'unordered_multiset',
        'unordered_multimap',
        'priority_queue',
        'make_pair',
        'array',
        'shared_ptr',
        'abort',
        'terminate',
        'abs',
        'acos',
        'vfprintf',
        'vprintf',
        'vsprintf',
        'endl',
        'initializer_list',
        'unique_ptr',
        'complex',
        'imaginary',
        'std',
        'string',
        'wstring',
        'cin',
        'cout',
        'cerr',
        'clog',
        'stdin',
        'stdout',
        'stderr',
        'stringstream',
        'istringstream',
        'ostringstream'
      ];

      const CPP_KEYWORDS = {
        keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +
          'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +
          'unsigned long volatile static protected bool template mutable if public friend ' +
          'do goto auto void enum else break extern using asm case typeid wchar_t ' +
          'short reinterpret_cast|10 default double register explicit signed typename try this ' +
          'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +
          'concept co_await co_return co_yield requires ' +
          'noexcept static_assert thread_local restrict final override ' +
          'atomic_bool atomic_char atomic_schar ' +
          'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +
          'atomic_ullong new throw return ' +
          'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',
        built_in: '_Bool _Complex _Imaginary',
        _relevance_hints: COMMON_CPP_HINTS,
        literal: 'true false nullptr NULL'
      };

      const FUNCTION_DISPATCH = {
        className: "function.dispatch",
        relevance: 0,
        keywords: CPP_KEYWORDS,
        begin: concat$6(
          /\b/,
          /(?!decltype)/,
          /(?!if)/,
          /(?!for)/,
          /(?!while)/,
          hljs.IDENT_RE,
          lookahead$5(/\s*\(/))
      };

      const EXPRESSION_CONTAINS = [
        FUNCTION_DISPATCH,
        PREPROCESSOR,
        CPP_PRIMITIVE_TYPES,
        C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        NUMBERS,
        STRINGS
      ];


      const EXPRESSION_CONTEXT = {
        // This mode covers expression context where we can't expect a function
        // definition and shouldn't highlight anything that looks like one:
        // `return some()`, `else if()`, `(x*sum(1, 2))`
        variants: [
          {
            begin: /=/,
            end: /;/
          },
          {
            begin: /\(/,
            end: /\)/
          },
          {
            beginKeywords: 'new throw return else',
            end: /;/
          }
        ],
        keywords: CPP_KEYWORDS,
        contains: EXPRESSION_CONTAINS.concat([
          {
            begin: /\(/,
            end: /\)/,
            keywords: CPP_KEYWORDS,
            contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
            relevance: 0
          }
        ]),
        relevance: 0
      };

      const FUNCTION_DECLARATION = {
        className: 'function',
        begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
        returnBegin: true,
        end: /[{;=]/,
        excludeEnd: true,
        keywords: CPP_KEYWORDS,
        illegal: /[^\w\s\*&:<>.]/,
        contains: [
          { // to prevent it from being confused as the function title
            begin: DECLTYPE_AUTO_RE,
            keywords: CPP_KEYWORDS,
            relevance: 0
          },
          {
            begin: FUNCTION_TITLE,
            returnBegin: true,
            contains: [ TITLE_MODE ],
            relevance: 0
          },
          // needed because we do not have look-behind on the below rule
          // to prevent it from grabbing the final : in a :: pair
          {
            begin: /::/,
            relevance: 0
          },
          // initializers
          {
            begin: /:/,
            endsWithParent: true,
            contains: [
              STRINGS,
              NUMBERS
            ]
          },
          {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            keywords: CPP_KEYWORDS,
            relevance: 0,
            contains: [
              C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              STRINGS,
              NUMBERS,
              CPP_PRIMITIVE_TYPES,
              // Count matching parentheses.
              {
                begin: /\(/,
                end: /\)/,
                keywords: CPP_KEYWORDS,
                relevance: 0,
                contains: [
                  'self',
                  C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  STRINGS,
                  NUMBERS,
                  CPP_PRIMITIVE_TYPES
                ]
              }
            ]
          },
          CPP_PRIMITIVE_TYPES,
          C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          PREPROCESSOR
        ]
      };

      return {
        name: 'C++',
        aliases: [
          'cc',
          'c++',
          'h++',
          'hpp',
          'hh',
          'hxx',
          'cxx'
        ],
        keywords: CPP_KEYWORDS,
        illegal: '</',
        classNameAliases: {
          "function.dispatch": "built_in"
        },
        contains: [].concat(
          EXPRESSION_CONTEXT,
          FUNCTION_DECLARATION,
          FUNCTION_DISPATCH,
          EXPRESSION_CONTAINS,
          [
            PREPROCESSOR,
            { // containers: ie, `vector <int> rooms (9);`
              begin: '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<',
              end: '>',
              keywords: CPP_KEYWORDS,
              contains: [
                'self',
                CPP_PRIMITIVE_TYPES
              ]
            },
            {
              begin: hljs.IDENT_RE + '::',
              keywords: CPP_KEYWORDS
            },
            {
              className: 'class',
              beginKeywords: 'enum class struct union',
              end: /[{;:<>=]/,
              contains: [
                {
                  beginKeywords: "final class struct"
                },
                hljs.TITLE_MODE
              ]
            }
          ]),
        exports: {
          preprocessor: PREPROCESSOR,
          strings: STRINGS,
          keywords: CPP_KEYWORDS
        }
      };
    }

    var cpp_1 = cpp;

    /*
    Language: C#
    Author: Jason Diamond <jason@diamond.name>
    Contributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>
    Website: https://docs.microsoft.com/en-us/dotnet/csharp/
    Category: common
    */

    /** @type LanguageFn */
    function csharp(hljs) {
      const BUILT_IN_KEYWORDS = [
        'bool',
        'byte',
        'char',
        'decimal',
        'delegate',
        'double',
        'dynamic',
        'enum',
        'float',
        'int',
        'long',
        'nint',
        'nuint',
        'object',
        'sbyte',
        'short',
        'string',
        'ulong',
        'uint',
        'ushort'
      ];
      const FUNCTION_MODIFIERS = [
        'public',
        'private',
        'protected',
        'static',
        'internal',
        'protected',
        'abstract',
        'async',
        'extern',
        'override',
        'unsafe',
        'virtual',
        'new',
        'sealed',
        'partial'
      ];
      const LITERAL_KEYWORDS = [
        'default',
        'false',
        'null',
        'true'
      ];
      const NORMAL_KEYWORDS = [
        'abstract',
        'as',
        'base',
        'break',
        'case',
        'class',
        'const',
        'continue',
        'do',
        'else',
        'event',
        'explicit',
        'extern',
        'finally',
        'fixed',
        'for',
        'foreach',
        'goto',
        'if',
        'implicit',
        'in',
        'interface',
        'internal',
        'is',
        'lock',
        'namespace',
        'new',
        'operator',
        'out',
        'override',
        'params',
        'private',
        'protected',
        'public',
        'readonly',
        'record',
        'ref',
        'return',
        'sealed',
        'sizeof',
        'stackalloc',
        'static',
        'struct',
        'switch',
        'this',
        'throw',
        'try',
        'typeof',
        'unchecked',
        'unsafe',
        'using',
        'virtual',
        'void',
        'volatile',
        'while'
      ];
      const CONTEXTUAL_KEYWORDS = [
        'add',
        'alias',
        'and',
        'ascending',
        'async',
        'await',
        'by',
        'descending',
        'equals',
        'from',
        'get',
        'global',
        'group',
        'init',
        'into',
        'join',
        'let',
        'nameof',
        'not',
        'notnull',
        'on',
        'or',
        'orderby',
        'partial',
        'remove',
        'select',
        'set',
        'unmanaged',
        'value|0',
        'var',
        'when',
        'where',
        'with',
        'yield'
      ];

      const KEYWORDS = {
        keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),
        built_in: BUILT_IN_KEYWORDS,
        literal: LITERAL_KEYWORDS
      };
      const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {
        begin: '[a-zA-Z](\\.?\\w)*'
      });
      const NUMBERS = {
        className: 'number',
        variants: [
          {
            begin: '\\b(0b[01\']+)'
          },
          {
            begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)'
          },
          {
            begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)'
          }
        ],
        relevance: 0
      };
      const VERBATIM_STRING = {
        className: 'string',
        begin: '@"',
        end: '"',
        contains: [
          {
            begin: '""'
          }
        ]
      };
      const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {
        illegal: /\n/
      });
      const SUBST = {
        className: 'subst',
        begin: /\{/,
        end: /\}/,
        keywords: KEYWORDS
      };
      const SUBST_NO_LF = hljs.inherit(SUBST, {
        illegal: /\n/
      });
      const INTERPOLATED_STRING = {
        className: 'string',
        begin: /\$"/,
        end: '"',
        illegal: /\n/,
        contains: [
          {
            begin: /\{\{/
          },
          {
            begin: /\}\}/
          },
          hljs.BACKSLASH_ESCAPE,
          SUBST_NO_LF
        ]
      };
      const INTERPOLATED_VERBATIM_STRING = {
        className: 'string',
        begin: /\$@"/,
        end: '"',
        contains: [
          {
            begin: /\{\{/
          },
          {
            begin: /\}\}/
          },
          {
            begin: '""'
          },
          SUBST
        ]
      };
      const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
        illegal: /\n/,
        contains: [
          {
            begin: /\{\{/
          },
          {
            begin: /\}\}/
          },
          {
            begin: '""'
          },
          SUBST_NO_LF
        ]
      });
      SUBST.contains = [
        INTERPOLATED_VERBATIM_STRING,
        INTERPOLATED_STRING,
        VERBATIM_STRING,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        NUMBERS,
        hljs.C_BLOCK_COMMENT_MODE
      ];
      SUBST_NO_LF.contains = [
        INTERPOLATED_VERBATIM_STRING_NO_LF,
        INTERPOLATED_STRING,
        VERBATIM_STRING_NO_LF,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        NUMBERS,
        hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {
          illegal: /\n/
        })
      ];
      const STRING = {
        variants: [
          INTERPOLATED_VERBATIM_STRING,
          INTERPOLATED_STRING,
          VERBATIM_STRING,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      };

      const GENERIC_MODIFIER = {
        begin: "<",
        end: ">",
        contains: [
          {
            beginKeywords: "in out"
          },
          TITLE_MODE
        ]
      };
      const TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';
      const AT_IDENTIFIER = {
        // prevents expressions like `@class` from incorrect flagging
        // `class` as a keyword
        begin: "@" + hljs.IDENT_RE,
        relevance: 0
      };

      return {
        name: 'C#',
        aliases: [
          'cs',
          'c#'
        ],
        keywords: KEYWORDS,
        illegal: /::/,
        contains: [
          hljs.COMMENT(
            '///',
            '$',
            {
              returnBegin: true,
              contains: [
                {
                  className: 'doctag',
                  variants: [
                    {
                      begin: '///',
                      relevance: 0
                    },
                    {
                      begin: '<!--|-->'
                    },
                    {
                      begin: '</?',
                      end: '>'
                    }
                  ]
                }
              ]
            }
          ),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'meta',
            begin: '#',
            end: '$',
            keywords: {
              'meta-keyword': 'if else elif endif define undef warning error line region endregion pragma checksum'
            }
          },
          STRING,
          NUMBERS,
          {
            beginKeywords: 'class interface',
            relevance: 0,
            end: /[{;=]/,
            illegal: /[^\s:,]/,
            contains: [
              {
                beginKeywords: "where class"
              },
              TITLE_MODE,
              GENERIC_MODIFIER,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            beginKeywords: 'namespace',
            relevance: 0,
            end: /[{;=]/,
            illegal: /[^\s:]/,
            contains: [
              TITLE_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            beginKeywords: 'record',
            relevance: 0,
            end: /[{;=]/,
            illegal: /[^\s:]/,
            contains: [
              TITLE_MODE,
              GENERIC_MODIFIER,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            // [Attributes("")]
            className: 'meta',
            begin: '^\\s*\\[',
            excludeBegin: true,
            end: '\\]',
            excludeEnd: true,
            contains: [
              {
                className: 'meta-string',
                begin: /"/,
                end: /"/
              }
            ]
          },
          {
            // Expression keywords prevent 'keyword Name(...)' from being
            // recognized as a function definition
            beginKeywords: 'new return throw await else',
            relevance: 0
          },
          {
            className: 'function',
            begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*(<.+>\\s*)?\\(',
            returnBegin: true,
            end: /\s*[{;=]/,
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              // prevents these from being highlighted `title`
              {
                beginKeywords: FUNCTION_MODIFIERS.join(" "),
                relevance: 0
              },
              {
                begin: hljs.IDENT_RE + '\\s*(<.+>\\s*)?\\(',
                returnBegin: true,
                contains: [
                  hljs.TITLE_MODE,
                  GENERIC_MODIFIER
                ],
                relevance: 0
              },
              {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                excludeBegin: true,
                excludeEnd: true,
                keywords: KEYWORDS,
                relevance: 0,
                contains: [
                  STRING,
                  NUMBERS,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          AT_IDENTIFIER
        ]
      };
    }

    var csharp_1 = csharp;

    const MODES = (hljs) => {
      return {
        IMPORTANT: {
          className: 'meta',
          begin: '!important'
        },
        HEXCOLOR: {
          className: 'number',
          begin: '#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})'
        },
        ATTRIBUTE_SELECTOR_MODE: {
          className: 'selector-attr',
          begin: /\[/,
          end: /\]/,
          illegal: '$',
          contains: [
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE
          ]
        }
      };
    };

    const TAGS = [
      'a',
      'abbr',
      'address',
      'article',
      'aside',
      'audio',
      'b',
      'blockquote',
      'body',
      'button',
      'canvas',
      'caption',
      'cite',
      'code',
      'dd',
      'del',
      'details',
      'dfn',
      'div',
      'dl',
      'dt',
      'em',
      'fieldset',
      'figcaption',
      'figure',
      'footer',
      'form',
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'header',
      'hgroup',
      'html',
      'i',
      'iframe',
      'img',
      'input',
      'ins',
      'kbd',
      'label',
      'legend',
      'li',
      'main',
      'mark',
      'menu',
      'nav',
      'object',
      'ol',
      'p',
      'q',
      'quote',
      'samp',
      'section',
      'span',
      'strong',
      'summary',
      'sup',
      'table',
      'tbody',
      'td',
      'textarea',
      'tfoot',
      'th',
      'thead',
      'time',
      'tr',
      'ul',
      'var',
      'video'
    ];

    const MEDIA_FEATURES = [
      'any-hover',
      'any-pointer',
      'aspect-ratio',
      'color',
      'color-gamut',
      'color-index',
      'device-aspect-ratio',
      'device-height',
      'device-width',
      'display-mode',
      'forced-colors',
      'grid',
      'height',
      'hover',
      'inverted-colors',
      'monochrome',
      'orientation',
      'overflow-block',
      'overflow-inline',
      'pointer',
      'prefers-color-scheme',
      'prefers-contrast',
      'prefers-reduced-motion',
      'prefers-reduced-transparency',
      'resolution',
      'scan',
      'scripting',
      'update',
      'width',
      // TODO: find a better solution?
      'min-width',
      'max-width',
      'min-height',
      'max-height'
    ];

    // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
    const PSEUDO_CLASSES = [
      'active',
      'any-link',
      'blank',
      'checked',
      'current',
      'default',
      'defined',
      'dir', // dir()
      'disabled',
      'drop',
      'empty',
      'enabled',
      'first',
      'first-child',
      'first-of-type',
      'fullscreen',
      'future',
      'focus',
      'focus-visible',
      'focus-within',
      'has', // has()
      'host', // host or host()
      'host-context', // host-context()
      'hover',
      'indeterminate',
      'in-range',
      'invalid',
      'is', // is()
      'lang', // lang()
      'last-child',
      'last-of-type',
      'left',
      'link',
      'local-link',
      'not', // not()
      'nth-child', // nth-child()
      'nth-col', // nth-col()
      'nth-last-child', // nth-last-child()
      'nth-last-col', // nth-last-col()
      'nth-last-of-type', //nth-last-of-type()
      'nth-of-type', //nth-of-type()
      'only-child',
      'only-of-type',
      'optional',
      'out-of-range',
      'past',
      'placeholder-shown',
      'read-only',
      'read-write',
      'required',
      'right',
      'root',
      'scope',
      'target',
      'target-within',
      'user-invalid',
      'valid',
      'visited',
      'where' // where()
    ];

    // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
    const PSEUDO_ELEMENTS = [
      'after',
      'backdrop',
      'before',
      'cue',
      'cue-region',
      'first-letter',
      'first-line',
      'grammar-error',
      'marker',
      'part',
      'placeholder',
      'selection',
      'slotted',
      'spelling-error'
    ];

    const ATTRIBUTES$1 = [
      'align-content',
      'align-items',
      'align-self',
      'animation',
      'animation-delay',
      'animation-direction',
      'animation-duration',
      'animation-fill-mode',
      'animation-iteration-count',
      'animation-name',
      'animation-play-state',
      'animation-timing-function',
      'auto',
      'backface-visibility',
      'background',
      'background-attachment',
      'background-clip',
      'background-color',
      'background-image',
      'background-origin',
      'background-position',
      'background-repeat',
      'background-size',
      'border',
      'border-bottom',
      'border-bottom-color',
      'border-bottom-left-radius',
      'border-bottom-right-radius',
      'border-bottom-style',
      'border-bottom-width',
      'border-collapse',
      'border-color',
      'border-image',
      'border-image-outset',
      'border-image-repeat',
      'border-image-slice',
      'border-image-source',
      'border-image-width',
      'border-left',
      'border-left-color',
      'border-left-style',
      'border-left-width',
      'border-radius',
      'border-right',
      'border-right-color',
      'border-right-style',
      'border-right-width',
      'border-spacing',
      'border-style',
      'border-top',
      'border-top-color',
      'border-top-left-radius',
      'border-top-right-radius',
      'border-top-style',
      'border-top-width',
      'border-width',
      'bottom',
      'box-decoration-break',
      'box-shadow',
      'box-sizing',
      'break-after',
      'break-before',
      'break-inside',
      'caption-side',
      'clear',
      'clip',
      'clip-path',
      'color',
      'column-count',
      'column-fill',
      'column-gap',
      'column-rule',
      'column-rule-color',
      'column-rule-style',
      'column-rule-width',
      'column-span',
      'column-width',
      'columns',
      'content',
      'counter-increment',
      'counter-reset',
      'cursor',
      'direction',
      'display',
      'empty-cells',
      'filter',
      'flex',
      'flex-basis',
      'flex-direction',
      'flex-flow',
      'flex-grow',
      'flex-shrink',
      'flex-wrap',
      'float',
      'font',
      'font-display',
      'font-family',
      'font-feature-settings',
      'font-kerning',
      'font-language-override',
      'font-size',
      'font-size-adjust',
      'font-smoothing',
      'font-stretch',
      'font-style',
      'font-variant',
      'font-variant-ligatures',
      'font-variation-settings',
      'font-weight',
      'height',
      'hyphens',
      'icon',
      'image-orientation',
      'image-rendering',
      'image-resolution',
      'ime-mode',
      'inherit',
      'initial',
      'justify-content',
      'left',
      'letter-spacing',
      'line-height',
      'list-style',
      'list-style-image',
      'list-style-position',
      'list-style-type',
      'margin',
      'margin-bottom',
      'margin-left',
      'margin-right',
      'margin-top',
      'marks',
      'mask',
      'max-height',
      'max-width',
      'min-height',
      'min-width',
      'nav-down',
      'nav-index',
      'nav-left',
      'nav-right',
      'nav-up',
      'none',
      'normal',
      'object-fit',
      'object-position',
      'opacity',
      'order',
      'orphans',
      'outline',
      'outline-color',
      'outline-offset',
      'outline-style',
      'outline-width',
      'overflow',
      'overflow-wrap',
      'overflow-x',
      'overflow-y',
      'padding',
      'padding-bottom',
      'padding-left',
      'padding-right',
      'padding-top',
      'page-break-after',
      'page-break-before',
      'page-break-inside',
      'perspective',
      'perspective-origin',
      'pointer-events',
      'position',
      'quotes',
      'resize',
      'right',
      'src', // @font-face
      'tab-size',
      'table-layout',
      'text-align',
      'text-align-last',
      'text-decoration',
      'text-decoration-color',
      'text-decoration-line',
      'text-decoration-style',
      'text-indent',
      'text-overflow',
      'text-rendering',
      'text-shadow',
      'text-transform',
      'text-underline-position',
      'top',
      'transform',
      'transform-origin',
      'transform-style',
      'transition',
      'transition-delay',
      'transition-duration',
      'transition-property',
      'transition-timing-function',
      'unicode-bidi',
      'vertical-align',
      'visibility',
      'white-space',
      'widows',
      'width',
      'word-break',
      'word-spacing',
      'word-wrap',
      'z-index'
      // reverse makes sure longer attributes `font-weight` are matched fully
      // instead of getting false positives on say `font`
    ].reverse();

    /**
     * @param {string} value
     * @returns {RegExp}
     * */

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source$5(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function lookahead$4(re) {
      return concat$5('(?=', re, ')');
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat$5(...args) {
      const joined = args.map((x) => source$5(x)).join("");
      return joined;
    }

    /*
    Language: CSS
    Category: common, css
    Website: https://developer.mozilla.org/en-US/docs/Web/CSS
    */

    /** @type LanguageFn */
    function css$1(hljs) {
      const modes = MODES(hljs);
      const FUNCTION_DISPATCH = {
        className: "built_in",
        begin: /[\w-]+(?=\()/
      };
      const VENDOR_PREFIX = {
        begin: /-(webkit|moz|ms|o)-(?=[a-z])/
      };
      const AT_MODIFIERS = "and or not only";
      const AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/; // @-webkit-keyframes
      const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
      const STRINGS = [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ];

      return {
        name: 'CSS',
        case_insensitive: true,
        illegal: /[=|'\$]/,
        keywords: {
          keyframePosition: "from to"
        },
        classNameAliases: {
          // for visual continuity with `tag {}` and because we
          // don't have a great class for this?
          keyframePosition: "selector-tag"
        },
        contains: [
          hljs.C_BLOCK_COMMENT_MODE,
          VENDOR_PREFIX,
          // to recognize keyframe 40% etc which are outside the scope of our
          // attribute value mode
          hljs.CSS_NUMBER_MODE,
          {
            className: 'selector-id',
            begin: /#[A-Za-z0-9_-]+/,
            relevance: 0
          },
          {
            className: 'selector-class',
            begin: '\\.' + IDENT_RE,
            relevance: 0
          },
          modes.ATTRIBUTE_SELECTOR_MODE,
          {
            className: 'selector-pseudo',
            variants: [
              {
                begin: ':(' + PSEUDO_CLASSES.join('|') + ')'
              },
              {
                begin: '::(' + PSEUDO_ELEMENTS.join('|') + ')'
              }
            ]
          },
          // we may actually need this (12/2020)
          // { // pseudo-selector params
          //   begin: /\(/,
          //   end: /\)/,
          //   contains: [ hljs.CSS_NUMBER_MODE ]
          // },
          {
            className: 'attribute',
            begin: '\\b(' + ATTRIBUTES$1.join('|') + ')\\b'
          },
          // attribute values
          {
            begin: ':',
            end: '[;}]',
            contains: [
              modes.HEXCOLOR,
              modes.IMPORTANT,
              hljs.CSS_NUMBER_MODE,
              ...STRINGS,
              // needed to highlight these as strings and to avoid issues with
              // illegal characters that might be inside urls that would tigger the
              // languages illegal stack
              {
                begin: /(url|data-uri)\(/,
                end: /\)/,
                relevance: 0, // from keywords
                keywords: {
                  built_in: "url data-uri"
                },
                contains: [
                  {
                    className: "string",
                    // any character other than `)` as in `url()` will be the start
                    // of a string, which ends with `)` (from the parent mode)
                    begin: /[^)]/,
                    endsWithParent: true,
                    excludeEnd: true
                  }
                ]
              },
              FUNCTION_DISPATCH
            ]
          },
          {
            begin: lookahead$4(/@/),
            end: '[{;]',
            relevance: 0,
            illegal: /:/, // break on Less variables @var: ...
            contains: [
              {
                className: 'keyword',
                begin: AT_PROPERTY_RE
              },
              {
                begin: /\s/,
                endsWithParent: true,
                excludeEnd: true,
                relevance: 0,
                keywords: {
                  $pattern: /[a-z-]+/,
                  keyword: AT_MODIFIERS,
                  attribute: MEDIA_FEATURES.join(" ")
                },
                contains: [
                  {
                    begin: /[a-z-]+(?=:)/,
                    className: "attribute"
                  },
                  ...STRINGS,
                  hljs.CSS_NUMBER_MODE
                ]
              }
            ]
          },
          {
            className: 'selector-tag',
            begin: '\\b(' + TAGS.join('|') + ')\\b'
          }
        ]
      };
    }

    var css_1 = css$1;

    /*
    Language: Go
    Author: Stephan Kountso aka StepLg <steplg@gmail.com>
    Contributors: Evgeny Stepanischev <imbolk@gmail.com>
    Description: Google go language (golang). For info about language
    Website: http://golang.org/
    Category: common, system
    */

    function go(hljs) {
      const GO_KEYWORDS = {
        keyword:
          'break default func interface select case map struct chan else goto package switch ' +
          'const fallthrough if range type continue for import return var go defer ' +
          'bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 ' +
          'uint16 uint32 uint64 int uint uintptr rune',
        literal:
           'true false iota nil',
        built_in:
          'append cap close complex copy imag len make new panic print println real recover delete'
      };
      return {
        name: 'Go',
        aliases: ['golang'],
        keywords: GO_KEYWORDS,
        illegal: '</',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'string',
            variants: [
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              {
                begin: '`',
                end: '`'
              }
            ]
          },
          {
            className: 'number',
            variants: [
              {
                begin: hljs.C_NUMBER_RE + '[i]',
                relevance: 1
              },
              hljs.C_NUMBER_MODE
            ]
          },
          {
            begin: /:=/ // relevance booster
          },
          {
            className: 'function',
            beginKeywords: 'func',
            end: '\\s*(\\{|$)',
            excludeEnd: true,
            contains: [
              hljs.TITLE_MODE,
              {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                keywords: GO_KEYWORDS,
                illegal: /["']/
              }
            ]
          }
        ]
      };
    }

    var go_1 = go;

    // https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10
    var decimalDigits = '[0-9](_*[0-9])*';
    var frac = `\\.(${decimalDigits})`;
    var hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';
    var NUMERIC = {
      className: 'number',
      variants: [
        // DecimalFloatingPointLiteral
        // including ExponentPart
        { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` +
          `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
        // excluding ExponentPart
        { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
        { begin: `(${frac})[fFdD]?\\b` },
        { begin: `\\b(${decimalDigits})[fFdD]\\b` },

        // HexadecimalFloatingPointLiteral
        { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` +
          `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },

        // DecimalIntegerLiteral
        { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },

        // HexIntegerLiteral
        { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },

        // OctalIntegerLiteral
        { begin: '\\b0(_*[0-7])*[lL]?\\b' },

        // BinaryIntegerLiteral
        { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
      ],
      relevance: 0
    };

    /*
    Language: Java
    Author: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>
    Category: common, enterprise
    Website: https://www.java.com/
    */

    function java(hljs) {
      var JAVA_IDENT_RE = '[\u00C0-\u02B8a-zA-Z_$][\u00C0-\u02B8a-zA-Z_$0-9]*';
      var GENERIC_IDENT_RE = JAVA_IDENT_RE + '(<' + JAVA_IDENT_RE + '(\\s*,\\s*' + JAVA_IDENT_RE + ')*>)?';
      var KEYWORDS = 'false synchronized int abstract float private char boolean var static null if const ' +
        'for true while long strictfp finally protected import native final void ' +
        'enum else break transient catch instanceof byte super volatile case assert short ' +
        'package default double public try this switch continue throws protected public private ' +
        'module requires exports do';

      var ANNOTATION = {
        className: 'meta',
        begin: '@' + JAVA_IDENT_RE,
        contains: [
          {
            begin: /\(/,
            end: /\)/,
            contains: ["self"] // allow nested () inside our annotation
          },
        ]
      };
      const NUMBER = NUMERIC;

      return {
        name: 'Java',
        aliases: ['jsp'],
        keywords: KEYWORDS,
        illegal: /<\/|#/,
        contains: [
          hljs.COMMENT(
            '/\\*\\*',
            '\\*/',
            {
              relevance: 0,
              contains: [
                {
                  // eat up @'s in emails to prevent them to be recognized as doctags
                  begin: /\w+@/, relevance: 0
                },
                {
                  className: 'doctag',
                  begin: '@[A-Za-z]+'
                }
              ]
            }
          ),
          // relevance boost
          {
            begin: /import java\.[a-z]+\./,
            keywords: "import",
            relevance: 2
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'class',
            beginKeywords: 'class interface enum', end: /[{;=]/, excludeEnd: true,
            // TODO: can this be removed somehow?
            // an extra boost because Java is more popular than other languages with
            // this same syntax feature (this is just to preserve our tests passing
            // for now)
            relevance: 1,
            keywords: 'class interface enum',
            illegal: /[:"\[\]]/,
            contains: [
              { beginKeywords: 'extends implements' },
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            // Expression keywords prevent 'keyword Name(...)' from being
            // recognized as a function definition
            beginKeywords: 'new throw return else',
            relevance: 0
          },
          {
            className: 'class',
            begin: 'record\\s+' + hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
            returnBegin: true,
            excludeEnd: true,
            end: /[{;=]/,
            keywords: KEYWORDS,
            contains: [
              { beginKeywords: "record" },
              {
                begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
                returnBegin: true,
                relevance: 0,
                contains: [hljs.UNDERSCORE_TITLE_MODE]
              },
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                keywords: KEYWORDS,
                relevance: 0,
                contains: [
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            className: 'function',
            begin: '(' + GENERIC_IDENT_RE + '\\s+)+' + hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true, end: /[{;=]/,
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              {
                begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
                relevance: 0,
                contains: [hljs.UNDERSCORE_TITLE_MODE]
              },
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                keywords: KEYWORDS,
                relevance: 0,
                contains: [
                  ANNOTATION,
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE,
                  NUMBER,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          NUMBER,
          ANNOTATION
        ]
      };
    }

    var java_1 = java;

    /*
    Language: JSON
    Description: JSON (JavaScript Object Notation) is a lightweight data-interchange format.
    Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Website: http://www.json.org
    Category: common, protocols
    */

    function json(hljs) {
      const LITERALS = {
        literal: 'true false null'
      };
      const ALLOWED_COMMENTS = [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ];
      const TYPES = [
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE
      ];
      const VALUE_CONTAINER = {
        end: ',',
        endsWithParent: true,
        excludeEnd: true,
        contains: TYPES,
        keywords: LITERALS
      };
      const OBJECT = {
        begin: /\{/,
        end: /\}/,
        contains: [
          {
            className: 'attr',
            begin: /"/,
            end: /"/,
            contains: [hljs.BACKSLASH_ESCAPE],
            illegal: '\\n'
          },
          hljs.inherit(VALUE_CONTAINER, {
            begin: /:/
          })
        ].concat(ALLOWED_COMMENTS),
        illegal: '\\S'
      };
      const ARRAY = {
        begin: '\\[',
        end: '\\]',
        contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
        illegal: '\\S'
      };
      TYPES.push(OBJECT, ARRAY);
      ALLOWED_COMMENTS.forEach(function(rule) {
        TYPES.push(rule);
      });
      return {
        name: 'JSON',
        contains: TYPES,
        keywords: LITERALS,
        illegal: '\\S'
      };
    }

    var json_1 = json;

    /*
    Language: Objective-C
    Author: Valerii Hiora <valerii.hiora@gmail.com>
    Contributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>
    Website: https://developer.apple.com/documentation/objectivec
    Category: common
    */

    function objectivec(hljs) {
      const API_CLASS = {
        className: 'built_in',
        begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+'
      };
      const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;
      const OBJC_KEYWORDS = {
        $pattern: IDENTIFIER_RE,
        keyword:
          'int float while char export sizeof typedef const struct for union ' +
          'unsigned long volatile static bool mutable if do return goto void ' +
          'enum else break extern asm case short default double register explicit ' +
          'signed typename this switch continue wchar_t inline readonly assign ' +
          'readwrite self @synchronized id typeof ' +
          'nonatomic super unichar IBOutlet IBAction strong weak copy ' +
          'in out inout bycopy byref oneway __strong __weak __block __autoreleasing ' +
          '@private @protected @public @try @property @end @throw @catch @finally ' +
          '@autoreleasepool @synthesize @dynamic @selector @optional @required ' +
          '@encode @package @import @defs @compatibility_alias ' +
          '__bridge __bridge_transfer __bridge_retained __bridge_retain ' +
          '__covariant __contravariant __kindof ' +
          '_Nonnull _Nullable _Null_unspecified ' +
          '__FUNCTION__ __PRETTY_FUNCTION__ __attribute__ ' +
          'getter setter retain unsafe_unretained ' +
          'nonnull nullable null_unspecified null_resettable class instancetype ' +
          'NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER ' +
          'NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED ' +
          'NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE ' +
          'NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END ' +
          'NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW ' +
          'NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN',
        literal:
          'false true FALSE TRUE nil YES NO NULL',
        built_in:
          'BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once'
      };
      const CLASS_KEYWORDS = {
        $pattern: IDENTIFIER_RE,
        keyword: '@interface @class @protocol @implementation'
      };
      return {
        name: 'Objective-C',
        aliases: [
          'mm',
          'objc',
          'obj-c',
          'obj-c++',
          'objective-c++'
        ],
        keywords: OBJC_KEYWORDS,
        illegal: '</',
        contains: [
          API_CLASS,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.C_NUMBER_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          {
            className: 'string',
            variants: [
              {
                begin: '@"',
                end: '"',
                illegal: '\\n',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              }
            ]
          },
          {
            className: 'meta',
            begin: /#\s*[a-z]+\b/,
            end: /$/,
            keywords: {
              'meta-keyword':
                'if else elif endif define undef warning error line ' +
                'pragma ifdef ifndef include'
            },
            contains: [
              {
                begin: /\\\n/,
                relevance: 0
              },
              hljs.inherit(hljs.QUOTE_STRING_MODE, {
                className: 'meta-string'
              }),
              {
                className: 'meta-string',
                begin: /<.*?>/,
                end: /$/,
                illegal: '\\n'
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            className: 'class',
            begin: '(' + CLASS_KEYWORDS.keyword.split(' ').join('|') + ')\\b',
            end: /(\{|$)/,
            excludeEnd: true,
            keywords: CLASS_KEYWORDS,
            contains: [ hljs.UNDERSCORE_TITLE_MODE ]
          },
          {
            begin: '\\.' + hljs.UNDERSCORE_IDENT_RE,
            relevance: 0
          }
        ]
      };
    }

    var objectivec_1 = objectivec;

    /*
    Language: PHP
    Author: Victor Karamzin <Victor.Karamzin@enterra-inc.com>
    Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>
    Website: https://www.php.net
    Category: common
    */

    /**
     * @param {HLJSApi} hljs
     * @returns {LanguageDetail}
     * */
    function php(hljs) {
      const VARIABLE = {
        className: 'variable',
        begin: '\\$+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*' +
          // negative look-ahead tries to avoid matching patterns that are not
          // Perl at all like $ident$, @ident@, etc.
          `(?![A-Za-z0-9])(?![$])`
      };
      const PREPROCESSOR = {
        className: 'meta',
        variants: [
          { begin: /<\?php/, relevance: 10 }, // boost for obvious PHP
          { begin: /<\?[=]?/ },
          { begin: /\?>/ } // end php tag
        ]
      };
      const SUBST = {
        className: 'subst',
        variants: [
          { begin: /\$\w+/ },
          { begin: /\{\$/, end: /\}/ }
        ]
      };
      const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, {
        illegal: null,
      });
      const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {
        illegal: null,
        contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
      });
      const HEREDOC = hljs.END_SAME_AS_BEGIN({
        begin: /<<<[ \t]*(\w+)\n/,
        end: /[ \t]*(\w+)\b/,
        contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
      });
      const STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE, PREPROCESSOR],
        variants: [
          hljs.inherit(SINGLE_QUOTED, {
            begin: "b'", end: "'",
          }),
          hljs.inherit(DOUBLE_QUOTED, {
            begin: 'b"', end: '"',
          }),
          DOUBLE_QUOTED,
          SINGLE_QUOTED,
          HEREDOC
        ]
      };
      const NUMBER = {
        className: 'number',
        variants: [
          { begin: `\\b0b[01]+(?:_[01]+)*\\b` }, // Binary w/ underscore support
          { begin: `\\b0o[0-7]+(?:_[0-7]+)*\\b` }, // Octals w/ underscore support
          { begin: `\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b` }, // Hex w/ underscore support
          // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
          { begin: `(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:e[+-]?\\d+)?` }
        ],
        relevance: 0
      };
      const KEYWORDS = {
        keyword:
        // Magic constants:
        // <https://www.php.net/manual/en/language.constants.predefined.php>
        '__CLASS__ __DIR__ __FILE__ __FUNCTION__ __LINE__ __METHOD__ __NAMESPACE__ __TRAIT__ ' +
        // Function that look like language construct or language construct that look like function:
        // List of keywords that may not require parenthesis
        'die echo exit include include_once print require require_once ' +
        // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
        // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
        // Other keywords:
        // <https://www.php.net/manual/en/reserved.php>
        // <https://www.php.net/manual/en/language.types.type-juggling.php>
        'array abstract and as binary bool boolean break callable case catch class clone const continue declare ' +
        'default do double else elseif empty enddeclare endfor endforeach endif endswitch endwhile enum eval extends ' +
        'final finally float for foreach from global goto if implements instanceof insteadof int integer interface ' +
        'isset iterable list match|0 mixed new object or private protected public real return string switch throw trait ' +
        'try unset use var void while xor yield',
        literal: 'false null true',
        built_in:
        // Standard PHP library:
        // <https://www.php.net/manual/en/book.spl.php>
        'Error|0 ' + // error is too common a name esp since PHP is case in-sensitive
        'AppendIterator ArgumentCountError ArithmeticError ArrayIterator ArrayObject AssertionError BadFunctionCallException BadMethodCallException CachingIterator CallbackFilterIterator CompileError Countable DirectoryIterator DivisionByZeroError DomainException EmptyIterator ErrorException Exception FilesystemIterator FilterIterator GlobIterator InfiniteIterator InvalidArgumentException IteratorIterator LengthException LimitIterator LogicException MultipleIterator NoRewindIterator OutOfBoundsException OutOfRangeException OuterIterator OverflowException ParentIterator ParseError RangeException RecursiveArrayIterator RecursiveCachingIterator RecursiveCallbackFilterIterator RecursiveDirectoryIterator RecursiveFilterIterator RecursiveIterator RecursiveIteratorIterator RecursiveRegexIterator RecursiveTreeIterator RegexIterator RuntimeException SeekableIterator SplDoublyLinkedList SplFileInfo SplFileObject SplFixedArray SplHeap SplMaxHeap SplMinHeap SplObjectStorage SplObserver SplObserver SplPriorityQueue SplQueue SplStack SplSubject SplSubject SplTempFileObject TypeError UnderflowException UnexpectedValueException UnhandledMatchError ' +
        // Reserved interfaces:
        // <https://www.php.net/manual/en/reserved.interfaces.php>
        'ArrayAccess Closure Generator Iterator IteratorAggregate Serializable Stringable Throwable Traversable WeakReference WeakMap ' +
        // Reserved classes:
        // <https://www.php.net/manual/en/reserved.classes.php>
        'Directory __PHP_Incomplete_Class parent php_user_filter self static stdClass'
      };
      return {
        aliases: ['php3', 'php4', 'php5', 'php6', 'php7', 'php8'],
        case_insensitive: true,
        keywords: KEYWORDS,
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.COMMENT('//', '$', {contains: [PREPROCESSOR]}),
          hljs.COMMENT(
            '/\\*',
            '\\*/',
            {
              contains: [
                {
                  className: 'doctag',
                  begin: '@[A-Za-z]+'
                }
              ]
            }
          ),
          hljs.COMMENT(
            '__halt_compiler.+?;',
            false,
            {
              endsWithParent: true,
              keywords: '__halt_compiler'
            }
          ),
          PREPROCESSOR,
          {
            className: 'keyword', begin: /\$this\b/
          },
          VARIABLE,
          {
            // swallow composed identifiers to avoid parsing them as keywords
            begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
          },
          {
            className: 'function',
            relevance: 0,
            beginKeywords: 'fn function', end: /[;{]/, excludeEnd: true,
            illegal: '[$%\\[]',
            contains: [
              {
                beginKeywords: 'use',
              },
              hljs.UNDERSCORE_TITLE_MODE,
              {
                begin: '=>', // No markup, just a relevance booster
                endsParent: true
              },
              {
                className: 'params',
                begin: '\\(', end: '\\)',
                excludeBegin: true,
                excludeEnd: true,
                keywords: KEYWORDS,
                contains: [
                  'self',
                  VARIABLE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  STRING,
                  NUMBER
                ]
              }
            ]
          },
          {
            className: 'class',
            variants: [
              { beginKeywords: "enum", illegal: /[($"]/ },
              { beginKeywords: "class interface trait", illegal: /[:($"]/ }
            ],
            relevance: 0,
            end: /\{/,
            excludeEnd: true,
            contains: [
              {beginKeywords: 'extends implements'},
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            beginKeywords: 'namespace',
            relevance: 0,
            end: ';',
            illegal: /[.']/,
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          {
            beginKeywords: 'use',
            relevance: 0,
            end: ';',
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          STRING,
          NUMBER
        ]
      };
    }

    var php_1 = php;

    /**
     * @param {string} value
     * @returns {RegExp}
     * */

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source$4(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function lookahead$3(re) {
      return concat$4('(?=', re, ')');
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat$4(...args) {
      const joined = args.map((x) => source$4(x)).join("");
      return joined;
    }

    /*
    Language: Python
    Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
    Website: https://www.python.org
    Category: common
    */

    function python(hljs) {
      const RESERVED_WORDS = [
        'and',
        'as',
        'assert',
        'async',
        'await',
        'break',
        'class',
        'continue',
        'def',
        'del',
        'elif',
        'else',
        'except',
        'finally',
        'for',
        'from',
        'global',
        'if',
        'import',
        'in',
        'is',
        'lambda',
        'nonlocal|10',
        'not',
        'or',
        'pass',
        'raise',
        'return',
        'try',
        'while',
        'with',
        'yield'
      ];

      const BUILT_INS = [
        '__import__',
        'abs',
        'all',
        'any',
        'ascii',
        'bin',
        'bool',
        'breakpoint',
        'bytearray',
        'bytes',
        'callable',
        'chr',
        'classmethod',
        'compile',
        'complex',
        'delattr',
        'dict',
        'dir',
        'divmod',
        'enumerate',
        'eval',
        'exec',
        'filter',
        'float',
        'format',
        'frozenset',
        'getattr',
        'globals',
        'hasattr',
        'hash',
        'help',
        'hex',
        'id',
        'input',
        'int',
        'isinstance',
        'issubclass',
        'iter',
        'len',
        'list',
        'locals',
        'map',
        'max',
        'memoryview',
        'min',
        'next',
        'object',
        'oct',
        'open',
        'ord',
        'pow',
        'print',
        'property',
        'range',
        'repr',
        'reversed',
        'round',
        'set',
        'setattr',
        'slice',
        'sorted',
        'staticmethod',
        'str',
        'sum',
        'super',
        'tuple',
        'type',
        'vars',
        'zip'
      ];

      const LITERALS = [
        '__debug__',
        'Ellipsis',
        'False',
        'None',
        'NotImplemented',
        'True'
      ];

      // https://docs.python.org/3/library/typing.html
      // TODO: Could these be supplemented by a CamelCase matcher in certain
      // contexts, leaving these remaining only for relevance hinting?
      const TYPES = [
        "Any",
        "Callable",
        "Coroutine",
        "Dict",
        "List",
        "Literal",
        "Generic",
        "Optional",
        "Sequence",
        "Set",
        "Tuple",
        "Type",
        "Union"
      ];

      const KEYWORDS = {
        $pattern: /[A-Za-z]\w+|__\w+__/,
        keyword: RESERVED_WORDS,
        built_in: BUILT_INS,
        literal: LITERALS,
        type: TYPES
      };

      const PROMPT = {
        className: 'meta',
        begin: /^(>>>|\.\.\.) /
      };

      const SUBST = {
        className: 'subst',
        begin: /\{/,
        end: /\}/,
        keywords: KEYWORDS,
        illegal: /#/
      };

      const LITERAL_BRACKET = {
        begin: /\{\{/,
        relevance: 0
      };

      const STRING = {
        className: 'string',
        contains: [ hljs.BACKSLASH_ESCAPE ],
        variants: [
          {
            begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
            end: /'''/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              PROMPT
            ],
            relevance: 10
          },
          {
            begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
            end: /"""/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              PROMPT
            ],
            relevance: 10
          },
          {
            begin: /([fF][rR]|[rR][fF]|[fF])'''/,
            end: /'''/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              PROMPT,
              LITERAL_BRACKET,
              SUBST
            ]
          },
          {
            begin: /([fF][rR]|[rR][fF]|[fF])"""/,
            end: /"""/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              PROMPT,
              LITERAL_BRACKET,
              SUBST
            ]
          },
          {
            begin: /([uU]|[rR])'/,
            end: /'/,
            relevance: 10
          },
          {
            begin: /([uU]|[rR])"/,
            end: /"/,
            relevance: 10
          },
          {
            begin: /([bB]|[bB][rR]|[rR][bB])'/,
            end: /'/
          },
          {
            begin: /([bB]|[bB][rR]|[rR][bB])"/,
            end: /"/
          },
          {
            begin: /([fF][rR]|[rR][fF]|[fF])'/,
            end: /'/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              LITERAL_BRACKET,
              SUBST
            ]
          },
          {
            begin: /([fF][rR]|[rR][fF]|[fF])"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              LITERAL_BRACKET,
              SUBST
            ]
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      };

      // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals
      const digitpart = '[0-9](_?[0-9])*';
      const pointfloat = `(\\b(${digitpart}))?\\.(${digitpart})|\\b(${digitpart})\\.`;
      const NUMBER = {
        className: 'number',
        relevance: 0,
        variants: [
          // exponentfloat, pointfloat
          // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
          // optionally imaginary
          // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
          // Note: no leading \b because floats can start with a decimal point
          // and we don't want to mishandle e.g. `fn(.5)`,
          // no trailing \b for pointfloat because it can end with a decimal point
          // and we don't want to mishandle e.g. `0..hex()`; this should be safe
          // because both MUST contain a decimal point and so cannot be confused with
          // the interior part of an identifier
          {
            begin: `(\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\b`
          },
          {
            begin: `(${pointfloat})[jJ]?`
          },

          // decinteger, bininteger, octinteger, hexinteger
          // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
          // optionally "long" in Python 2
          // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
          // decinteger is optionally imaginary
          // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
          {
            begin: '\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\b'
          },
          {
            begin: '\\b0[bB](_?[01])+[lL]?\\b'
          },
          {
            begin: '\\b0[oO](_?[0-7])+[lL]?\\b'
          },
          {
            begin: '\\b0[xX](_?[0-9a-fA-F])+[lL]?\\b'
          },

          // imagnumber (digitpart-based)
          // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
          {
            begin: `\\b(${digitpart})[jJ]\\b`
          }
        ]
      };
      const COMMENT_TYPE = {
        className: "comment",
        begin: lookahead$3(/# type:/),
        end: /$/,
        keywords: KEYWORDS,
        contains: [
          { // prevent keywords from coloring `type`
            begin: /# type:/
          },
          // comment within a datatype comment includes no keywords
          {
            begin: /#/,
            end: /\b\B/,
            endsWithParent: true
          }
        ]
      };
      const PARAMS = {
        className: 'params',
        variants: [
          // Exclude params in functions without params
          {
            className: "",
            begin: /\(\s*\)/,
            skip: true
          },
          {
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              'self',
              PROMPT,
              NUMBER,
              STRING,
              hljs.HASH_COMMENT_MODE
            ]
          }
        ]
      };
      SUBST.contains = [
        STRING,
        NUMBER,
        PROMPT
      ];

      return {
        name: 'Python',
        aliases: [
          'py',
          'gyp',
          'ipython'
        ],
        keywords: KEYWORDS,
        illegal: /(<\/|->|\?)|=>/,
        contains: [
          PROMPT,
          NUMBER,
          {
            // very common convention
            begin: /\bself\b/
          },
          {
            // eat "if" prior to string so that it won't accidentally be
            // labeled as an f-string
            beginKeywords: "if",
            relevance: 0
          },
          STRING,
          COMMENT_TYPE,
          hljs.HASH_COMMENT_MODE,
          {
            variants: [
              {
                className: 'function',
                beginKeywords: 'def'
              },
              {
                className: 'class',
                beginKeywords: 'class'
              }
            ],
            end: /:/,
            illegal: /[${=;\n,]/,
            contains: [
              hljs.UNDERSCORE_TITLE_MODE,
              PARAMS,
              {
                begin: /->/,
                endsWithParent: true,
                keywords: KEYWORDS
              }
            ]
          },
          {
            className: 'meta',
            begin: /^[\t ]*@/,
            end: /(?=#)|$/,
            contains: [
              NUMBER,
              PARAMS,
              STRING
            ]
          }
        ]
      };
    }

    var python_1 = python;

    /**
     * @param {string} value
     * @returns {RegExp}
     * */

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source$3(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function lookahead$2(re) {
      return concat$3('(?=', re, ')');
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat$3(...args) {
      const joined = args.map((x) => source$3(x)).join("");
      return joined;
    }

    /*
    Language: Ruby
    Description: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.
    Website: https://www.ruby-lang.org/
    Author: Anton Kovalyov <anton@kovalyov.net>
    Contributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>
    Category: common
    */

    function ruby(hljs) {
      const RUBY_METHOD_RE = '([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)';
      const RUBY_KEYWORDS = {
        keyword:
          'and then defined module in return redo if BEGIN retry end for self when ' +
          'next until do begin unless END rescue else break undef not super class case ' +
          'require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor ' +
          '__FILE__',
        built_in: 'proc lambda',
        literal:
          'true false nil'
      };
      const YARDOCTAG = {
        className: 'doctag',
        begin: '@[A-Za-z]+'
      };
      const IRB_OBJECT = {
        begin: '#<',
        end: '>'
      };
      const COMMENT_MODES = [
        hljs.COMMENT(
          '#',
          '$',
          {
            contains: [ YARDOCTAG ]
          }
        ),
        hljs.COMMENT(
          '^=begin',
          '^=end',
          {
            contains: [ YARDOCTAG ],
            relevance: 10
          }
        ),
        hljs.COMMENT('^__END__', '\\n$')
      ];
      const SUBST = {
        className: 'subst',
        begin: /#\{/,
        end: /\}/,
        keywords: RUBY_KEYWORDS
      };
      const STRING = {
        className: 'string',
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        variants: [
          {
            begin: /'/,
            end: /'/
          },
          {
            begin: /"/,
            end: /"/
          },
          {
            begin: /`/,
            end: /`/
          },
          {
            begin: /%[qQwWx]?\(/,
            end: /\)/
          },
          {
            begin: /%[qQwWx]?\[/,
            end: /\]/
          },
          {
            begin: /%[qQwWx]?\{/,
            end: /\}/
          },
          {
            begin: /%[qQwWx]?</,
            end: />/
          },
          {
            begin: /%[qQwWx]?\//,
            end: /\//
          },
          {
            begin: /%[qQwWx]?%/,
            end: /%/
          },
          {
            begin: /%[qQwWx]?-/,
            end: /-/
          },
          {
            begin: /%[qQwWx]?\|/,
            end: /\|/
          },
          // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
          // where ? is the last character of a preceding identifier, as in: `func?4`
          {
            begin: /\B\?(\\\d{1,3})/
          },
          {
            begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/
          },
          {
            begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/
          },
          {
            begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/
          },
          {
            begin: /\B\?\\(c|C-)[\x20-\x7e]/
          },
          {
            begin: /\B\?\\?\S/
          },
          { // heredocs
            begin: /<<[-~]?'?(\w+)\n(?:[^\n]*\n)*?\s*\1\b/,
            returnBegin: true,
            contains: [
              {
                begin: /<<[-~]?'?/
              },
              hljs.END_SAME_AS_BEGIN({
                begin: /(\w+)/,
                end: /(\w+)/,
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  SUBST
                ]
              })
            ]
          }
        ]
      };

      // Ruby syntax is underdocumented, but this grammar seems to be accurate
      // as of version 2.7.2 (confirmed with (irb and `Ripper.sexp(...)`)
      // https://docs.ruby-lang.org/en/2.7.0/doc/syntax/literals_rdoc.html#label-Numbers
      const decimal = '[1-9](_?[0-9])*|0';
      const digits = '[0-9](_?[0-9])*';
      const NUMBER = {
        className: 'number',
        relevance: 0,
        variants: [
          // decimal integer/float, optionally exponential or rational, optionally imaginary
          {
            begin: `\\b(${decimal})(\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\b`
          },

          // explicit decimal/binary/octal/hexadecimal integer,
          // optionally rational and/or imaginary
          {
            begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b"
          },
          {
            begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b"
          },
          {
            begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b"
          },
          {
            begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b"
          },

          // 0-prefixed implicit octal integer, optionally rational and/or imaginary
          {
            begin: "\\b0(_?[0-7])+r?i?\\b"
          }
        ]
      };

      const PARAMS = {
        className: 'params',
        begin: '\\(',
        end: '\\)',
        endsParent: true,
        keywords: RUBY_KEYWORDS
      };

      const RUBY_DEFAULT_CONTAINS = [
        STRING,
        {
          className: 'class',
          beginKeywords: 'class module',
          end: '$|;',
          illegal: /=/,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {
              begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|!)?'
            }),
            {
              begin: '<\\s*',
              contains: [
                {
                  begin: '(' + hljs.IDENT_RE + '::)?' + hljs.IDENT_RE,
                  // we already get points for <, we don't need poitns
                  // for the name also
                  relevance: 0
                }
              ]
            }
          ].concat(COMMENT_MODES)
        },
        {
          className: 'function',
          // def method_name(
          // def method_name;
          // def method_name (end of line)
          begin: concat$3(/def\s+/, lookahead$2(RUBY_METHOD_RE + "\\s*(\\(|;|$)")),
          relevance: 0, // relevance comes from kewords
          keywords: "def",
          end: '$|;',
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {
              begin: RUBY_METHOD_RE
            }),
            PARAMS
          ].concat(COMMENT_MODES)
        },
        {
          // swallow namespace qualifiers before symbols
          begin: hljs.IDENT_RE + '::'
        },
        {
          className: 'symbol',
          begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\?)?:',
          relevance: 0
        },
        {
          className: 'symbol',
          begin: ':(?!\\s)',
          contains: [
            STRING,
            {
              begin: RUBY_METHOD_RE
            }
          ],
          relevance: 0
        },
        NUMBER,
        {
          // negative-look forward attemps to prevent false matches like:
          // @ident@ or $ident$ that might indicate this is not ruby at all
          className: "variable",
          begin: '(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`
        },
        {
          className: 'params',
          begin: /\|/,
          end: /\|/,
          relevance: 0, // this could be a lot of things (in other languages) other than params
          keywords: RUBY_KEYWORDS
        },
        { // regexp container
          begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\s*',
          keywords: 'unless',
          contains: [
            {
              className: 'regexp',
              contains: [
                hljs.BACKSLASH_ESCAPE,
                SUBST
              ],
              illegal: /\n/,
              variants: [
                {
                  begin: '/',
                  end: '/[a-z]*'
                },
                {
                  begin: /%r\{/,
                  end: /\}[a-z]*/
                },
                {
                  begin: '%r\\(',
                  end: '\\)[a-z]*'
                },
                {
                  begin: '%r!',
                  end: '![a-z]*'
                },
                {
                  begin: '%r\\[',
                  end: '\\][a-z]*'
                }
              ]
            }
          ].concat(IRB_OBJECT, COMMENT_MODES),
          relevance: 0
        }
      ].concat(IRB_OBJECT, COMMENT_MODES);

      SUBST.contains = RUBY_DEFAULT_CONTAINS;
      PARAMS.contains = RUBY_DEFAULT_CONTAINS;

      // >>
      // ?>
      const SIMPLE_PROMPT = "[>?]>";
      // irb(main):001:0>
      const DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+>";
      const RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>";

      const IRB_DEFAULT = [
        {
          begin: /^\s*=>/,
          starts: {
            end: '$',
            contains: RUBY_DEFAULT_CONTAINS
          }
        },
        {
          className: 'meta',
          begin: '^(' + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + '|' + RVM_PROMPT + ')(?=[ ])',
          starts: {
            end: '$',
            contains: RUBY_DEFAULT_CONTAINS
          }
        }
      ];

      COMMENT_MODES.unshift(IRB_OBJECT);

      return {
        name: 'Ruby',
        aliases: [
          'rb',
          'gemspec',
          'podspec',
          'thor',
          'irb'
        ],
        keywords: RUBY_KEYWORDS,
        illegal: /\/\*/,
        contains: [
          hljs.SHEBANG({
            binary: "ruby"
          })
        ]
          .concat(IRB_DEFAULT)
          .concat(COMMENT_MODES)
          .concat(RUBY_DEFAULT_CONTAINS)
      };
    }

    var ruby_1 = ruby;

    /**
     * @param {string} value
     * @returns {RegExp}
     * */

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source$2(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat$2(...args) {
      const joined = args.map((x) => source$2(x)).join("");
      return joined;
    }

    /**
     * Any of the passed expresssions may match
     *
     * Creates a huge this | this | that | that match
     * @param {(RegExp | string)[] } args
     * @returns {string}
     */
    function either$2(...args) {
      const joined = '(' + args.map((x) => source$2(x)).join("|") + ")";
      return joined;
    }

    /*
     Language: SQL
     Website: https://en.wikipedia.org/wiki/SQL
     Category: common, database
     */

    function sql(hljs) {
      const COMMENT_MODE = hljs.COMMENT('--', '$');
      const STRING = {
        className: 'string',
        variants: [
          {
            begin: /'/,
            end: /'/,
            contains: [
              {begin: /''/ }
            ]
          }
        ]
      };
      const QUOTED_IDENTIFIER = {
        begin: /"/,
        end: /"/,
        contains: [ { begin: /""/ } ]
      };

      const LITERALS = [
        "true",
        "false",
        // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
        // "null",
        "unknown"
      ];

      const MULTI_WORD_TYPES = [
        "double precision",
        "large object",
        "with timezone",
        "without timezone"
      ];

      const TYPES = [
        'bigint',
        'binary',
        'blob',
        'boolean',
        'char',
        'character',
        'clob',
        'date',
        'dec',
        'decfloat',
        'decimal',
        'float',
        'int',
        'integer',
        'interval',
        'nchar',
        'nclob',
        'national',
        'numeric',
        'real',
        'row',
        'smallint',
        'time',
        'timestamp',
        'varchar',
        'varying', // modifier (character varying)
        'varbinary'
      ];

      const NON_RESERVED_WORDS = [
        "add",
        "asc",
        "collation",
        "desc",
        "final",
        "first",
        "last",
        "view"
      ];

      // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word
      const RESERVED_WORDS = [
        "abs",
        "acos",
        "all",
        "allocate",
        "alter",
        "and",
        "any",
        "are",
        "array",
        "array_agg",
        "array_max_cardinality",
        "as",
        "asensitive",
        "asin",
        "asymmetric",
        "at",
        "atan",
        "atomic",
        "authorization",
        "avg",
        "begin",
        "begin_frame",
        "begin_partition",
        "between",
        "bigint",
        "binary",
        "blob",
        "boolean",
        "both",
        "by",
        "call",
        "called",
        "cardinality",
        "cascaded",
        "case",
        "cast",
        "ceil",
        "ceiling",
        "char",
        "char_length",
        "character",
        "character_length",
        "check",
        "classifier",
        "clob",
        "close",
        "coalesce",
        "collate",
        "collect",
        "column",
        "commit",
        "condition",
        "connect",
        "constraint",
        "contains",
        "convert",
        "copy",
        "corr",
        "corresponding",
        "cos",
        "cosh",
        "count",
        "covar_pop",
        "covar_samp",
        "create",
        "cross",
        "cube",
        "cume_dist",
        "current",
        "current_catalog",
        "current_date",
        "current_default_transform_group",
        "current_path",
        "current_role",
        "current_row",
        "current_schema",
        "current_time",
        "current_timestamp",
        "current_path",
        "current_role",
        "current_transform_group_for_type",
        "current_user",
        "cursor",
        "cycle",
        "date",
        "day",
        "deallocate",
        "dec",
        "decimal",
        "decfloat",
        "declare",
        "default",
        "define",
        "delete",
        "dense_rank",
        "deref",
        "describe",
        "deterministic",
        "disconnect",
        "distinct",
        "double",
        "drop",
        "dynamic",
        "each",
        "element",
        "else",
        "empty",
        "end",
        "end_frame",
        "end_partition",
        "end-exec",
        "equals",
        "escape",
        "every",
        "except",
        "exec",
        "execute",
        "exists",
        "exp",
        "external",
        "extract",
        "false",
        "fetch",
        "filter",
        "first_value",
        "float",
        "floor",
        "for",
        "foreign",
        "frame_row",
        "free",
        "from",
        "full",
        "function",
        "fusion",
        "get",
        "global",
        "grant",
        "group",
        "grouping",
        "groups",
        "having",
        "hold",
        "hour",
        "identity",
        "in",
        "indicator",
        "initial",
        "inner",
        "inout",
        "insensitive",
        "insert",
        "int",
        "integer",
        "intersect",
        "intersection",
        "interval",
        "into",
        "is",
        "join",
        "json_array",
        "json_arrayagg",
        "json_exists",
        "json_object",
        "json_objectagg",
        "json_query",
        "json_table",
        "json_table_primitive",
        "json_value",
        "lag",
        "language",
        "large",
        "last_value",
        "lateral",
        "lead",
        "leading",
        "left",
        "like",
        "like_regex",
        "listagg",
        "ln",
        "local",
        "localtime",
        "localtimestamp",
        "log",
        "log10",
        "lower",
        "match",
        "match_number",
        "match_recognize",
        "matches",
        "max",
        "member",
        "merge",
        "method",
        "min",
        "minute",
        "mod",
        "modifies",
        "module",
        "month",
        "multiset",
        "national",
        "natural",
        "nchar",
        "nclob",
        "new",
        "no",
        "none",
        "normalize",
        "not",
        "nth_value",
        "ntile",
        "null",
        "nullif",
        "numeric",
        "octet_length",
        "occurrences_regex",
        "of",
        "offset",
        "old",
        "omit",
        "on",
        "one",
        "only",
        "open",
        "or",
        "order",
        "out",
        "outer",
        "over",
        "overlaps",
        "overlay",
        "parameter",
        "partition",
        "pattern",
        "per",
        "percent",
        "percent_rank",
        "percentile_cont",
        "percentile_disc",
        "period",
        "portion",
        "position",
        "position_regex",
        "power",
        "precedes",
        "precision",
        "prepare",
        "primary",
        "procedure",
        "ptf",
        "range",
        "rank",
        "reads",
        "real",
        "recursive",
        "ref",
        "references",
        "referencing",
        "regr_avgx",
        "regr_avgy",
        "regr_count",
        "regr_intercept",
        "regr_r2",
        "regr_slope",
        "regr_sxx",
        "regr_sxy",
        "regr_syy",
        "release",
        "result",
        "return",
        "returns",
        "revoke",
        "right",
        "rollback",
        "rollup",
        "row",
        "row_number",
        "rows",
        "running",
        "savepoint",
        "scope",
        "scroll",
        "search",
        "second",
        "seek",
        "select",
        "sensitive",
        "session_user",
        "set",
        "show",
        "similar",
        "sin",
        "sinh",
        "skip",
        "smallint",
        "some",
        "specific",
        "specifictype",
        "sql",
        "sqlexception",
        "sqlstate",
        "sqlwarning",
        "sqrt",
        "start",
        "static",
        "stddev_pop",
        "stddev_samp",
        "submultiset",
        "subset",
        "substring",
        "substring_regex",
        "succeeds",
        "sum",
        "symmetric",
        "system",
        "system_time",
        "system_user",
        "table",
        "tablesample",
        "tan",
        "tanh",
        "then",
        "time",
        "timestamp",
        "timezone_hour",
        "timezone_minute",
        "to",
        "trailing",
        "translate",
        "translate_regex",
        "translation",
        "treat",
        "trigger",
        "trim",
        "trim_array",
        "true",
        "truncate",
        "uescape",
        "union",
        "unique",
        "unknown",
        "unnest",
        "update   ",
        "upper",
        "user",
        "using",
        "value",
        "values",
        "value_of",
        "var_pop",
        "var_samp",
        "varbinary",
        "varchar",
        "varying",
        "versioning",
        "when",
        "whenever",
        "where",
        "width_bucket",
        "window",
        "with",
        "within",
        "without",
        "year",
      ];

      // these are reserved words we have identified to be functions
      // and should only be highlighted in a dispatch-like context
      // ie, array_agg(...), etc.
      const RESERVED_FUNCTIONS = [
        "abs",
        "acos",
        "array_agg",
        "asin",
        "atan",
        "avg",
        "cast",
        "ceil",
        "ceiling",
        "coalesce",
        "corr",
        "cos",
        "cosh",
        "count",
        "covar_pop",
        "covar_samp",
        "cume_dist",
        "dense_rank",
        "deref",
        "element",
        "exp",
        "extract",
        "first_value",
        "floor",
        "json_array",
        "json_arrayagg",
        "json_exists",
        "json_object",
        "json_objectagg",
        "json_query",
        "json_table",
        "json_table_primitive",
        "json_value",
        "lag",
        "last_value",
        "lead",
        "listagg",
        "ln",
        "log",
        "log10",
        "lower",
        "max",
        "min",
        "mod",
        "nth_value",
        "ntile",
        "nullif",
        "percent_rank",
        "percentile_cont",
        "percentile_disc",
        "position",
        "position_regex",
        "power",
        "rank",
        "regr_avgx",
        "regr_avgy",
        "regr_count",
        "regr_intercept",
        "regr_r2",
        "regr_slope",
        "regr_sxx",
        "regr_sxy",
        "regr_syy",
        "row_number",
        "sin",
        "sinh",
        "sqrt",
        "stddev_pop",
        "stddev_samp",
        "substring",
        "substring_regex",
        "sum",
        "tan",
        "tanh",
        "translate",
        "translate_regex",
        "treat",
        "trim",
        "trim_array",
        "unnest",
        "upper",
        "value_of",
        "var_pop",
        "var_samp",
        "width_bucket",
      ];

      // these functions can
      const POSSIBLE_WITHOUT_PARENS = [
        "current_catalog",
        "current_date",
        "current_default_transform_group",
        "current_path",
        "current_role",
        "current_schema",
        "current_transform_group_for_type",
        "current_user",
        "session_user",
        "system_time",
        "system_user",
        "current_time",
        "localtime",
        "current_timestamp",
        "localtimestamp"
      ];

      // those exist to boost relevance making these very
      // "SQL like" keyword combos worth +1 extra relevance
      const COMBOS = [
        "create table",
        "insert into",
        "primary key",
        "foreign key",
        "not null",
        "alter table",
        "add constraint",
        "grouping sets",
        "on overflow",
        "character set",
        "respect nulls",
        "ignore nulls",
        "nulls first",
        "nulls last",
        "depth first",
        "breadth first"
      ];

      const FUNCTIONS = RESERVED_FUNCTIONS;

      const KEYWORDS = [...RESERVED_WORDS, ...NON_RESERVED_WORDS].filter((keyword) => {
        return !RESERVED_FUNCTIONS.includes(keyword);
      });

      const VARIABLE = {
        className: "variable",
        begin: /@[a-z0-9]+/,
      };

      const OPERATOR = {
        className: "operator",
        begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
        relevance: 0,
      };

      const FUNCTION_CALL = {
        begin: concat$2(/\b/, either$2(...FUNCTIONS), /\s*\(/),
        keywords: {
          built_in: FUNCTIONS
        }
      };

      // keywords with less than 3 letters are reduced in relevancy
      function reduceRelevancy(list, {exceptions, when} = {}) {
        const qualifyFn = when;
        exceptions = exceptions || [];
        return list.map((item) => {
          if (item.match(/\|\d+$/) || exceptions.includes(item)) {
            return item;
          } else if (qualifyFn(item)) {
            return `${item}|0`;
          } else {
            return item;
          }
        });
      }

      return {
        name: 'SQL',
        case_insensitive: true,
        // does not include {} or HTML tags `</`
        illegal: /[{}]|<\//,
        keywords: {
          $pattern: /\b[\w\.]+/,
          keyword:
            reduceRelevancy(KEYWORDS, { when: (x) => x.length < 3 }),
          literal: LITERALS,
          type: TYPES,
          built_in: POSSIBLE_WITHOUT_PARENS
        },
        contains: [
          {
            begin: either$2(...COMBOS),
            keywords: {
              $pattern: /[\w\.]+/,
              keyword: KEYWORDS.concat(COMBOS),
              literal: LITERALS,
              type: TYPES
            },
          },
          {
            className: "type",
            begin: either$2(...MULTI_WORD_TYPES)
          },
          FUNCTION_CALL,
          VARIABLE,
          STRING,
          QUOTED_IDENTIFIER,
          hljs.C_NUMBER_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          COMMENT_MODE,
          OPERATOR
        ]
      };
    }

    var sql_1 = sql;

    /**
     * @param {string} value
     * @returns {RegExp}
     * */

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source$1(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function lookahead$1(re) {
      return concat$1('(?=', re, ')');
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function optional(re) {
      return concat$1('(', re, ')?');
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat$1(...args) {
      const joined = args.map((x) => source$1(x)).join("");
      return joined;
    }

    /**
     * Any of the passed expresssions may match
     *
     * Creates a huge this | this | that | that match
     * @param {(RegExp | string)[] } args
     * @returns {string}
     */
    function either$1(...args) {
      const joined = '(' + args.map((x) => source$1(x)).join("|") + ")";
      return joined;
    }

    /*
    Language: HTML, XML
    Website: https://www.w3.org/XML/
    Category: common
    Audit: 2020
    */

    /** @type LanguageFn */
    function xml(hljs) {
      // Element names can contain letters, digits, hyphens, underscores, and periods
      const TAG_NAME_RE = concat$1(/[A-Z_]/, optional(/[A-Z0-9_.-]*:/), /[A-Z0-9_.-]*/);
      const XML_IDENT_RE = /[A-Za-z0-9._:-]+/;
      const XML_ENTITIES = {
        className: 'symbol',
        begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
      };
      const XML_META_KEYWORDS = {
        begin: /\s/,
        contains: [
          {
            className: 'meta-keyword',
            begin: /#?[a-z_][a-z1-9_-]+/,
            illegal: /\n/
          }
        ]
      };
      const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {
        begin: /\(/,
        end: /\)/
      });
      const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {
        className: 'meta-string'
      });
      const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {
        className: 'meta-string'
      });
      const TAG_INTERNALS = {
        endsWithParent: true,
        illegal: /</,
        relevance: 0,
        contains: [
          {
            className: 'attr',
            begin: XML_IDENT_RE,
            relevance: 0
          },
          {
            begin: /=\s*/,
            relevance: 0,
            contains: [
              {
                className: 'string',
                endsParent: true,
                variants: [
                  {
                    begin: /"/,
                    end: /"/,
                    contains: [ XML_ENTITIES ]
                  },
                  {
                    begin: /'/,
                    end: /'/,
                    contains: [ XML_ENTITIES ]
                  },
                  {
                    begin: /[^\s"'=<>`]+/
                  }
                ]
              }
            ]
          }
        ]
      };
      return {
        name: 'HTML, XML',
        aliases: [
          'html',
          'xhtml',
          'rss',
          'atom',
          'xjb',
          'xsd',
          'xsl',
          'plist',
          'wsf',
          'svg'
        ],
        case_insensitive: true,
        contains: [
          {
            className: 'meta',
            begin: /<![a-z]/,
            end: />/,
            relevance: 10,
            contains: [
              XML_META_KEYWORDS,
              QUOTE_META_STRING_MODE,
              APOS_META_STRING_MODE,
              XML_META_PAR_KEYWORDS,
              {
                begin: /\[/,
                end: /\]/,
                contains: [
                  {
                    className: 'meta',
                    begin: /<![a-z]/,
                    end: />/,
                    contains: [
                      XML_META_KEYWORDS,
                      XML_META_PAR_KEYWORDS,
                      QUOTE_META_STRING_MODE,
                      APOS_META_STRING_MODE
                    ]
                  }
                ]
              }
            ]
          },
          hljs.COMMENT(
            /<!--/,
            /-->/,
            {
              relevance: 10
            }
          ),
          {
            begin: /<!\[CDATA\[/,
            end: /\]\]>/,
            relevance: 10
          },
          XML_ENTITIES,
          {
            className: 'meta',
            begin: /<\?xml/,
            end: /\?>/,
            relevance: 10
          },
          {
            className: 'tag',
            /*
            The lookahead pattern (?=...) ensures that 'begin' only matches
            '<style' as a single word, followed by a whitespace or an
            ending braket. The '$' is needed for the lexeme to be recognized
            by hljs.subMode() that tests lexemes outside the stream.
            */
            begin: /<style(?=\s|>)/,
            end: />/,
            keywords: {
              name: 'style'
            },
            contains: [ TAG_INTERNALS ],
            starts: {
              end: /<\/style>/,
              returnEnd: true,
              subLanguage: [
                'css',
                'xml'
              ]
            }
          },
          {
            className: 'tag',
            // See the comment in the <style tag about the lookahead pattern
            begin: /<script(?=\s|>)/,
            end: />/,
            keywords: {
              name: 'script'
            },
            contains: [ TAG_INTERNALS ],
            starts: {
              end: /<\/script>/,
              returnEnd: true,
              subLanguage: [
                'javascript',
                'handlebars',
                'xml'
              ]
            }
          },
          // we need this for now for jSX
          {
            className: 'tag',
            begin: /<>|<\/>/
          },
          // open tag
          {
            className: 'tag',
            begin: concat$1(
              /</,
              lookahead$1(concat$1(
                TAG_NAME_RE,
                // <tag/>
                // <tag>
                // <tag ...
                either$1(/\/>/, />/, /\s/)
              ))
            ),
            end: /\/?>/,
            contains: [
              {
                className: 'name',
                begin: TAG_NAME_RE,
                relevance: 0,
                starts: TAG_INTERNALS
              }
            ]
          },
          // close tag
          {
            className: 'tag',
            begin: concat$1(
              /<\//,
              lookahead$1(concat$1(
                TAG_NAME_RE, />/
              ))
            ),
            contains: [
              {
                className: 'name',
                begin: TAG_NAME_RE,
                relevance: 0
              },
              {
                begin: />/,
                relevance: 0,
                endsParent: true
              }
            ]
          }
        ]
      };
    }

    var xml_1 = xml;

    /*
    Language: Scala
    Category: functional
    Author: Jan Berkel <jan.berkel@gmail.com>
    Contributors: Erik Osheim <d_m@plastic-idolatry.com>
    Website: https://www.scala-lang.org
    */

    function scala(hljs) {
      const ANNOTATION = {
        className: 'meta',
        begin: '@[A-Za-z]+'
      };

      // used in strings for escaping/interpolation/substitution
      const SUBST = {
        className: 'subst',
        variants: [
          {
            begin: '\\$[A-Za-z0-9_]+'
          },
          {
            begin: /\$\{/,
            end: /\}/
          }
        ]
      };

      const STRING = {
        className: 'string',
        variants: [
          {
            begin: '"""',
            end: '"""'
          },
          {
            begin: '"',
            end: '"',
            illegal: '\\n',
            contains: [ hljs.BACKSLASH_ESCAPE ]
          },
          {
            begin: '[a-z]+"',
            end: '"',
            illegal: '\\n',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          },
          {
            className: 'string',
            begin: '[a-z]+"""',
            end: '"""',
            contains: [ SUBST ],
            relevance: 10
          }
        ]

      };

      const SYMBOL = {
        className: 'symbol',
        begin: '\'\\w[\\w\\d_]*(?!\')'
      };

      const TYPE = {
        className: 'type',
        begin: '\\b[A-Z][A-Za-z0-9_]*',
        relevance: 0
      };

      const NAME = {
        className: 'title',
        begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
        relevance: 0
      };

      const CLASS = {
        className: 'class',
        beginKeywords: 'class object trait type',
        end: /[:={\[\n;]/,
        excludeEnd: true,
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            beginKeywords: 'extends with',
            relevance: 10
          },
          {
            begin: /\[/,
            end: /\]/,
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0,
            contains: [ TYPE ]
          },
          {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0,
            contains: [ TYPE ]
          },
          NAME
        ]
      };

      const METHOD = {
        className: 'function',
        beginKeywords: 'def',
        end: /[:={\[(\n;]/,
        excludeEnd: true,
        contains: [ NAME ]
      };

      return {
        name: 'Scala',
        keywords: {
          literal: 'true false null',
          keyword: 'type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit'
        },
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          STRING,
          SYMBOL,
          TYPE,
          METHOD,
          CLASS,
          hljs.C_NUMBER_MODE,
          ANNOTATION
        ]
      };
    }

    var scala_1 = scala;

    /*
    Language: Matlab
    Author: Denis Bardadym <bardadymchik@gmail.com>
    Contributors: Eugene Nizhibitsky <nizhibitsky@ya.ru>, Egor Rogov <e.rogov@postgrespro.ru>
    Website: https://www.mathworks.com/products/matlab.html
    Category: scientific
    */

    /*
      Formal syntax is not published, helpful link:
      https://github.com/kornilova-l/matlab-IntelliJ-plugin/blob/master/src/main/grammar/Matlab.bnf
    */
    function matlab(hljs) {

      var TRANSPOSE_RE = '(\'|\\.\')+';
      var TRANSPOSE = {
        relevance: 0,
        contains: [
          { begin: TRANSPOSE_RE }
        ]
      };

      return {
        name: 'Matlab',
        keywords: {
          keyword:
            'arguments break case catch classdef continue else elseif end enumeration events for function ' +
            'global if methods otherwise parfor persistent properties return spmd switch try while',
          built_in:
            'sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan ' +
            'atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot ' +
            'cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog ' +
            'realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal ' +
            'cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli ' +
            'besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma ' +
            'gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms ' +
            'nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones ' +
            'eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ' +
            'ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril ' +
            'triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute ' +
            'shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan ' +
            'isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal ' +
            'rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table ' +
            'readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun ' +
            'legend intersect ismember procrustes hold num2cell '
        },
        illegal: '(//|"|#|/\\*|\\s+/\\w+)',
        contains: [
          {
            className: 'function',
            beginKeywords: 'function', end: '$',
            contains: [
              hljs.UNDERSCORE_TITLE_MODE,
              {
                className: 'params',
                variants: [
                  {begin: '\\(', end: '\\)'},
                  {begin: '\\[', end: '\\]'}
                ]
              }
            ]
          },
          {
            className: 'built_in',
            begin: /true|false/,
            relevance: 0,
            starts: TRANSPOSE
          },
          {
            begin: '[a-zA-Z][a-zA-Z_0-9]*' + TRANSPOSE_RE,
            relevance: 0
          },
          {
            className: 'number',
            begin: hljs.C_NUMBER_RE,
            relevance: 0,
            starts: TRANSPOSE
          },
          {
            className: 'string',
            begin: '\'', end: '\'',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              {begin: '\'\''}]
          },
          {
            begin: /\]|\}|\)/,
            relevance: 0,
            starts: TRANSPOSE
          },
          {
            className: 'string',
            begin: '"', end: '"',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              {begin: '""'}
            ],
            starts: TRANSPOSE
          },
          hljs.COMMENT('^\\s*%\\{\\s*$', '^\\s*%\\}\\s*$'),
          hljs.COMMENT('%', '$')
        ]
      };
    }

    var matlab_1 = matlab;

    /**
     * @param {string} value
     * @returns {RegExp}
     * */

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source(re) {
      if (!re) return null;
      if (typeof re === "string") return re;

      return re.source;
    }

    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function lookahead(re) {
      return concat('(?=', re, ')');
    }

    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat(...args) {
      const joined = args.map((x) => source(x)).join("");
      return joined;
    }

    /**
     * Any of the passed expresssions may match
     *
     * Creates a huge this | this | that | that match
     * @param {(RegExp | string)[] } args
     * @returns {string}
     */
    function either(...args) {
      const joined = '(' + args.map((x) => source(x)).join("|") + ")";
      return joined;
    }

    const keywordWrapper = keyword => concat(
      /\b/,
      keyword,
      /\w$/.test(keyword) ? /\b/ : /\B/
    );

    // Keywords that require a leading dot.
    const dotKeywords = [
      'Protocol', // contextual
      'Type' // contextual
    ].map(keywordWrapper);

    // Keywords that may have a leading dot.
    const optionalDotKeywords = [
      'init',
      'self'
    ].map(keywordWrapper);

    // should register as keyword, not type
    const keywordTypes = [
      'Any',
      'Self'
    ];

    // Regular keywords and literals.
    const keywords = [
      // strings below will be fed into the regular `keywords` engine while regex
      // will result in additional modes being created to scan for those keywords to
      // avoid conflicts with other rules
      'associatedtype',
      'async',
      'await',
      /as\?/, // operator
      /as!/, // operator
      'as', // operator
      'break',
      'case',
      'catch',
      'class',
      'continue',
      'convenience', // contextual
      'default',
      'defer',
      'deinit',
      'didSet', // contextual
      'do',
      'dynamic', // contextual
      'else',
      'enum',
      'extension',
      'fallthrough',
      /fileprivate\(set\)/,
      'fileprivate',
      'final', // contextual
      'for',
      'func',
      'get', // contextual
      'guard',
      'if',
      'import',
      'indirect', // contextual
      'infix', // contextual
      /init\?/,
      /init!/,
      'inout',
      /internal\(set\)/,
      'internal',
      'in',
      'is', // operator
      'lazy', // contextual
      'let',
      'mutating', // contextual
      'nonmutating', // contextual
      /open\(set\)/, // contextual
      'open', // contextual
      'operator',
      'optional', // contextual
      'override', // contextual
      'postfix', // contextual
      'precedencegroup',
      'prefix', // contextual
      /private\(set\)/,
      'private',
      'protocol',
      /public\(set\)/,
      'public',
      'repeat',
      'required', // contextual
      'rethrows',
      'return',
      'set', // contextual
      'some', // contextual
      'static',
      'struct',
      'subscript',
      'super',
      'switch',
      'throws',
      'throw',
      /try\?/, // operator
      /try!/, // operator
      'try', // operator
      'typealias',
      /unowned\(safe\)/, // contextual
      /unowned\(unsafe\)/, // contextual
      'unowned', // contextual
      'var',
      'weak', // contextual
      'where',
      'while',
      'willSet' // contextual
    ];

    // NOTE: Contextual keywords are reserved only in specific contexts.
    // Ideally, these should be matched using modes to avoid false positives.

    // Literals.
    const literals = [
      'false',
      'nil',
      'true'
    ];

    // Keywords used in precedence groups.
    const precedencegroupKeywords = [
      'assignment',
      'associativity',
      'higherThan',
      'left',
      'lowerThan',
      'none',
      'right'
    ];

    // Keywords that start with a number sign (#).
    // #available is handled separately.
    const numberSignKeywords = [
      '#colorLiteral',
      '#column',
      '#dsohandle',
      '#else',
      '#elseif',
      '#endif',
      '#error',
      '#file',
      '#fileID',
      '#fileLiteral',
      '#filePath',
      '#function',
      '#if',
      '#imageLiteral',
      '#keyPath',
      '#line',
      '#selector',
      '#sourceLocation',
      '#warn_unqualified_access',
      '#warning'
    ];

    // Global functions in the Standard Library.
    const builtIns = [
      'abs',
      'all',
      'any',
      'assert',
      'assertionFailure',
      'debugPrint',
      'dump',
      'fatalError',
      'getVaList',
      'isKnownUniquelyReferenced',
      'max',
      'min',
      'numericCast',
      'pointwiseMax',
      'pointwiseMin',
      'precondition',
      'preconditionFailure',
      'print',
      'readLine',
      'repeatElement',
      'sequence',
      'stride',
      'swap',
      'swift_unboxFromSwiftValueWithType',
      'transcode',
      'type',
      'unsafeBitCast',
      'unsafeDowncast',
      'withExtendedLifetime',
      'withUnsafeMutablePointer',
      'withUnsafePointer',
      'withVaList',
      'withoutActuallyEscaping',
      'zip'
    ];

    // Valid first characters for operators.
    const operatorHead = either(
      /[/=\-+!*%<>&|^~?]/,
      /[\u00A1-\u00A7]/,
      /[\u00A9\u00AB]/,
      /[\u00AC\u00AE]/,
      /[\u00B0\u00B1]/,
      /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
      /[\u2016-\u2017]/,
      /[\u2020-\u2027]/,
      /[\u2030-\u203E]/,
      /[\u2041-\u2053]/,
      /[\u2055-\u205E]/,
      /[\u2190-\u23FF]/,
      /[\u2500-\u2775]/,
      /[\u2794-\u2BFF]/,
      /[\u2E00-\u2E7F]/,
      /[\u3001-\u3003]/,
      /[\u3008-\u3020]/,
      /[\u3030]/
    );

    // Valid characters for operators.
    const operatorCharacter = either(
      operatorHead,
      /[\u0300-\u036F]/,
      /[\u1DC0-\u1DFF]/,
      /[\u20D0-\u20FF]/,
      /[\uFE00-\uFE0F]/,
      /[\uFE20-\uFE2F]/
      // TODO: The following characters are also allowed, but the regex isn't supported yet.
      // /[\u{E0100}-\u{E01EF}]/u
    );

    // Valid operator.
    const operator = concat(operatorHead, operatorCharacter, '*');

    // Valid first characters for identifiers.
    const identifierHead = either(
      /[a-zA-Z_]/,
      /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
      /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
      /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
      /[\u1E00-\u1FFF]/,
      /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
      /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
      /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
      /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
      /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
      /[\uFE47-\uFEFE\uFF00-\uFFFD]/ // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
      // The following characters are also allowed, but the regexes aren't supported yet.
      // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
      // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
      // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
      // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
    );

    // Valid characters for identifiers.
    const identifierCharacter = either(
      identifierHead,
      /\d/,
      /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
    );

    // Valid identifier.
    const identifier = concat(identifierHead, identifierCharacter, '*');

    // Valid type identifier.
    const typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');

    // Built-in attributes, which are highlighted as keywords.
    // @available is handled separately.
    const keywordAttributes = [
      'autoclosure',
      concat(/convention\(/, either('swift', 'block', 'c'), /\)/),
      'discardableResult',
      'dynamicCallable',
      'dynamicMemberLookup',
      'escaping',
      'frozen',
      'GKInspectable',
      'IBAction',
      'IBDesignable',
      'IBInspectable',
      'IBOutlet',
      'IBSegueAction',
      'inlinable',
      'main',
      'nonobjc',
      'NSApplicationMain',
      'NSCopying',
      'NSManaged',
      concat(/objc\(/, identifier, /\)/),
      'objc',
      'objcMembers',
      'propertyWrapper',
      'requires_stored_property_inits',
      'testable',
      'UIApplicationMain',
      'unknown',
      'usableFromInline'
    ];

    // Contextual keywords used in @available and #available.
    const availabilityKeywords = [
      'iOS',
      'iOSApplicationExtension',
      'macOS',
      'macOSApplicationExtension',
      'macCatalyst',
      'macCatalystApplicationExtension',
      'watchOS',
      'watchOSApplicationExtension',
      'tvOS',
      'tvOSApplicationExtension',
      'swift'
    ];

    /*
    Language: Swift
    Description: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.
    Author: Steven Van Impe <steven.vanimpe@icloud.com>
    Contributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>
    Website: https://swift.org
    Category: common, system
    */

    /** @type LanguageFn */
    function swift(hljs) {
      const WHITESPACE = {
        match: /\s+/,
        relevance: 0
      };
      // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411
      const BLOCK_COMMENT = hljs.COMMENT(
        '/\\*',
        '\\*/',
        {
          contains: [ 'self' ]
        }
      );
      const COMMENTS = [
        hljs.C_LINE_COMMENT_MODE,
        BLOCK_COMMENT
      ];

      // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413
      // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html
      const DOT_KEYWORD = {
        className: 'keyword',
        begin: concat(/\./, lookahead(either(...dotKeywords, ...optionalDotKeywords))),
        end: either(...dotKeywords, ...optionalDotKeywords),
        excludeBegin: true
      };
      const KEYWORD_GUARD = {
        // Consume .keyword to prevent highlighting properties and methods as keywords.
        match: concat(/\./, either(...keywords)),
        relevance: 0
      };
      const PLAIN_KEYWORDS = keywords
        .filter(kw => typeof kw === 'string')
        .concat([ "_|0" ]); // seems common, so 0 relevance
      const REGEX_KEYWORDS = keywords
        .filter(kw => typeof kw !== 'string') // find regex
        .concat(keywordTypes)
        .map(keywordWrapper);
      const KEYWORD = {
        variants: [
          {
            className: 'keyword',
            match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)
          }
        ]
      };
      // find all the regular keywords
      const KEYWORDS = {
        $pattern: either(
          /\b\w+/, // regular keywords
          /#\w+/ // number keywords
        ),
        keyword: PLAIN_KEYWORDS
          .concat(numberSignKeywords),
        literal: literals
      };
      const KEYWORD_MODES = [
        DOT_KEYWORD,
        KEYWORD_GUARD,
        KEYWORD
      ];

      // https://github.com/apple/swift/tree/main/stdlib/public/core
      const BUILT_IN_GUARD = {
        // Consume .built_in to prevent highlighting properties and methods.
        match: concat(/\./, either(...builtIns)),
        relevance: 0
      };
      const BUILT_IN = {
        className: 'built_in',
        match: concat(/\b/, either(...builtIns), /(?=\()/)
      };
      const BUILT_INS = [
        BUILT_IN_GUARD,
        BUILT_IN
      ];

      // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418
      const OPERATOR_GUARD = {
        // Prevent -> from being highlighting as an operator.
        match: /->/,
        relevance: 0
      };
      const OPERATOR = {
        className: 'operator',
        relevance: 0,
        variants: [
          {
            match: operator
          },
          {
            // dot-operator: only operators that start with a dot are allowed to use dots as
            // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
            // characters that may also include dots.
            match: `\\.(\\.|${operatorCharacter})+`
          }
        ]
      };
      const OPERATORS = [
        OPERATOR_GUARD,
        OPERATOR
      ];

      // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal
      // TODO: Update for leading `-` after lookbehind is supported everywhere
      const decimalDigits = '([0-9]_*)+';
      const hexDigits = '([0-9a-fA-F]_*)+';
      const NUMBER = {
        className: 'number',
        relevance: 0,
        variants: [
          // decimal floating-point-literal (subsumes decimal-literal)
          {
            match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b`
          },
          // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
          {
            match: `\\b0x(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b`
          },
          // octal-literal
          {
            match: /\b0o([0-7]_*)+\b/
          },
          // binary-literal
          {
            match: /\b0b([01]_*)+\b/
          }
        ]
      };

      // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal
      const ESCAPED_CHARACTER = (rawDelimiter = "") => ({
        className: 'subst',
        variants: [
          {
            match: concat(/\\/, rawDelimiter, /[0\\tnr"']/)
          },
          {
            match: concat(/\\/, rawDelimiter, /u\{[0-9a-fA-F]{1,8}\}/)
          }
        ]
      });
      const ESCAPED_NEWLINE = (rawDelimiter = "") => ({
        className: 'subst',
        match: concat(/\\/, rawDelimiter, /[\t ]*(?:[\r\n]|\r\n)/)
      });
      const INTERPOLATION = (rawDelimiter = "") => ({
        className: 'subst',
        label: "interpol",
        begin: concat(/\\/, rawDelimiter, /\(/),
        end: /\)/
      });
      const MULTILINE_STRING = (rawDelimiter = "") => ({
        begin: concat(rawDelimiter, /"""/),
        end: concat(/"""/, rawDelimiter),
        contains: [
          ESCAPED_CHARACTER(rawDelimiter),
          ESCAPED_NEWLINE(rawDelimiter),
          INTERPOLATION(rawDelimiter)
        ]
      });
      const SINGLE_LINE_STRING = (rawDelimiter = "") => ({
        begin: concat(rawDelimiter, /"/),
        end: concat(/"/, rawDelimiter),
        contains: [
          ESCAPED_CHARACTER(rawDelimiter),
          INTERPOLATION(rawDelimiter)
        ]
      });
      const STRING = {
        className: 'string',
        variants: [
          MULTILINE_STRING(),
          MULTILINE_STRING("#"),
          MULTILINE_STRING("##"),
          MULTILINE_STRING("###"),
          SINGLE_LINE_STRING(),
          SINGLE_LINE_STRING("#"),
          SINGLE_LINE_STRING("##"),
          SINGLE_LINE_STRING("###")
        ]
      };

      // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412
      const QUOTED_IDENTIFIER = {
        match: concat(/`/, identifier, /`/)
      };
      const IMPLICIT_PARAMETER = {
        className: 'variable',
        match: /\$\d+/
      };
      const PROPERTY_WRAPPER_PROJECTION = {
        className: 'variable',
        match: `\\$${identifierCharacter}+`
      };
      const IDENTIFIERS = [
        QUOTED_IDENTIFIER,
        IMPLICIT_PARAMETER,
        PROPERTY_WRAPPER_PROJECTION
      ];

      // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html
      const AVAILABLE_ATTRIBUTE = {
        match: /(@|#)available/,
        className: "keyword",
        starts: {
          contains: [
            {
              begin: /\(/,
              end: /\)/,
              keywords: availabilityKeywords,
              contains: [
                ...OPERATORS,
                NUMBER,
                STRING
              ]
            }
          ]
        }
      };
      const KEYWORD_ATTRIBUTE = {
        className: 'keyword',
        match: concat(/@/, either(...keywordAttributes))
      };
      const USER_DEFINED_ATTRIBUTE = {
        className: 'meta',
        match: concat(/@/, identifier)
      };
      const ATTRIBUTES = [
        AVAILABLE_ATTRIBUTE,
        KEYWORD_ATTRIBUTE,
        USER_DEFINED_ATTRIBUTE
      ];

      // https://docs.swift.org/swift-book/ReferenceManual/Types.html
      const TYPE = {
        match: lookahead(/\b[A-Z]/),
        relevance: 0,
        contains: [
          { // Common Apple frameworks, for relevance boost
            className: 'type',
            match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')
          },
          { // Type identifier
            className: 'type',
            match: typeIdentifier,
            relevance: 0
          },
          { // Optional type
            match: /[?!]+/,
            relevance: 0
          },
          { // Variadic parameter
            match: /\.\.\./,
            relevance: 0
          },
          { // Protocol composition
            match: concat(/\s+&\s+/, lookahead(typeIdentifier)),
            relevance: 0
          }
        ]
      };
      const GENERIC_ARGUMENTS = {
        begin: /</,
        end: />/,
        keywords: KEYWORDS,
        contains: [
          ...COMMENTS,
          ...KEYWORD_MODES,
          ...ATTRIBUTES,
          OPERATOR_GUARD,
          TYPE
        ]
      };
      TYPE.contains.push(GENERIC_ARGUMENTS);

      // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552
      // Prevents element names from being highlighted as keywords.
      const TUPLE_ELEMENT_NAME = {
        match: concat(identifier, /\s*:/),
        keywords: "_|0",
        relevance: 0
      };
      // Matches tuples as well as the parameter list of a function type.
      const TUPLE = {
        begin: /\(/,
        end: /\)/,
        relevance: 0,
        keywords: KEYWORDS,
        contains: [
          'self',
          TUPLE_ELEMENT_NAME,
          ...COMMENTS,
          ...KEYWORD_MODES,
          ...BUILT_INS,
          ...OPERATORS,
          NUMBER,
          STRING,
          ...IDENTIFIERS,
          ...ATTRIBUTES,
          TYPE
        ]
      };

      // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362
      // Matches both the keyword func and the function title.
      // Grouping these lets us differentiate between the operator function <
      // and the start of the generic parameter clause (also <).
      const FUNC_PLUS_TITLE = {
        beginKeywords: 'func',
        contains: [
          {
            className: 'title',
            match: either(QUOTED_IDENTIFIER.match, identifier, operator),
            // Required to make sure the opening < of the generic parameter clause
            // isn't parsed as a second title.
            endsParent: true,
            relevance: 0
          },
          WHITESPACE
        ]
      };
      const GENERIC_PARAMETERS = {
        begin: /</,
        end: />/,
        contains: [
          ...COMMENTS,
          TYPE
        ]
      };
      const FUNCTION_PARAMETER_NAME = {
        begin: either(
          lookahead(concat(identifier, /\s*:/)),
          lookahead(concat(identifier, /\s+/, identifier, /\s*:/))
        ),
        end: /:/,
        relevance: 0,
        contains: [
          {
            className: 'keyword',
            match: /\b_\b/
          },
          {
            className: 'params',
            match: identifier
          }
        ]
      };
      const FUNCTION_PARAMETERS = {
        begin: /\(/,
        end: /\)/,
        keywords: KEYWORDS,
        contains: [
          FUNCTION_PARAMETER_NAME,
          ...COMMENTS,
          ...KEYWORD_MODES,
          ...OPERATORS,
          NUMBER,
          STRING,
          ...ATTRIBUTES,
          TYPE,
          TUPLE
        ],
        endsParent: true,
        illegal: /["']/
      };
      const FUNCTION = {
        className: 'function',
        match: lookahead(/\bfunc\b/),
        contains: [
          FUNC_PLUS_TITLE,
          GENERIC_PARAMETERS,
          FUNCTION_PARAMETERS,
          WHITESPACE
        ],
        illegal: [
          /\[/,
          /%/
        ]
      };

      // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375
      // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379
      const INIT_SUBSCRIPT = {
        className: 'function',
        match: /\b(subscript|init[?!]?)\s*(?=[<(])/,
        keywords: {
          keyword: "subscript init init? init!",
          $pattern: /\w+[?!]?/
        },
        contains: [
          GENERIC_PARAMETERS,
          FUNCTION_PARAMETERS,
          WHITESPACE
        ],
        illegal: /\[|%/
      };
      // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380
      const OPERATOR_DECLARATION = {
        beginKeywords: 'operator',
        end: hljs.MATCH_NOTHING_RE,
        contains: [
          {
            className: 'title',
            match: operator,
            endsParent: true,
            relevance: 0
          }
        ]
      };

      // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550
      const PRECEDENCEGROUP = {
        beginKeywords: 'precedencegroup',
        end: hljs.MATCH_NOTHING_RE,
        contains: [
          {
            className: 'title',
            match: typeIdentifier,
            relevance: 0
          },
          {
            begin: /{/,
            end: /}/,
            relevance: 0,
            endsParent: true,
            keywords: [
              ...precedencegroupKeywords,
              ...literals
            ],
            contains: [ TYPE ]
          }
        ]
      };

      // Add supported submodes to string interpolation.
      for (const variant of STRING.variants) {
        const interpolation = variant.contains.find(mode => mode.label === "interpol");
        // TODO: Interpolation can contain any expression, so there's room for improvement here.
        interpolation.keywords = KEYWORDS;
        const submodes = [
          ...KEYWORD_MODES,
          ...BUILT_INS,
          ...OPERATORS,
          NUMBER,
          STRING,
          ...IDENTIFIERS
        ];
        interpolation.contains = [
          ...submodes,
          {
            begin: /\(/,
            end: /\)/,
            contains: [
              'self',
              ...submodes
            ]
          }
        ];
      }

      return {
        name: 'Swift',
        keywords: KEYWORDS,
        contains: [
          ...COMMENTS,
          FUNCTION,
          INIT_SUBSCRIPT,
          {
            className: 'class',
            beginKeywords: 'struct protocol class extension enum',
            end: '\\{',
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {
                begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
              }),
              ...KEYWORD_MODES
            ]
          },
          OPERATOR_DECLARATION,
          PRECEDENCEGROUP,
          {
            beginKeywords: 'import',
            end: /$/,
            contains: [ ...COMMENTS ],
            relevance: 0
          },
          ...KEYWORD_MODES,
          ...BUILT_INS,
          ...OPERATORS,
          NUMBER,
          STRING,
          ...IDENTIFIERS,
          ...ATTRIBUTES,
          TYPE,
          TUPLE
        ]
      };
    }

    var swift_1 = swift;

    /*
    Language: Dart
    Requires: markdown.js
    Author: Maxim Dikun <dikmax@gmail.com>
    Description: Dart a modern, object-oriented language developed by Google. For more information see https://www.dartlang.org/
    Website: https://dart.dev
    Category: scripting
    */

    /** @type LanguageFn */
    function dart(hljs) {
      const SUBST = {
        className: 'subst',
        variants: [{
          begin: '\\$[A-Za-z0-9_]+'
        }]
      };

      const BRACED_SUBST = {
        className: 'subst',
        variants: [{
          begin: /\$\{/,
          end: /\}/
        }],
        keywords: 'true false null this is new super'
      };

      const STRING = {
        className: 'string',
        variants: [
          {
            begin: 'r\'\'\'',
            end: '\'\'\''
          },
          {
            begin: 'r"""',
            end: '"""'
          },
          {
            begin: 'r\'',
            end: '\'',
            illegal: '\\n'
          },
          {
            begin: 'r"',
            end: '"',
            illegal: '\\n'
          },
          {
            begin: '\'\'\'',
            end: '\'\'\'',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST,
              BRACED_SUBST
            ]
          },
          {
            begin: '"""',
            end: '"""',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST,
              BRACED_SUBST
            ]
          },
          {
            begin: '\'',
            end: '\'',
            illegal: '\\n',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST,
              BRACED_SUBST
            ]
          },
          {
            begin: '"',
            end: '"',
            illegal: '\\n',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST,
              BRACED_SUBST
            ]
          }
        ]
      };
      BRACED_SUBST.contains = [
        hljs.C_NUMBER_MODE,
        STRING
      ];

      const BUILT_IN_TYPES = [
        // dart:core
        'Comparable',
        'DateTime',
        'Duration',
        'Function',
        'Iterable',
        'Iterator',
        'List',
        'Map',
        'Match',
        'Object',
        'Pattern',
        'RegExp',
        'Set',
        'Stopwatch',
        'String',
        'StringBuffer',
        'StringSink',
        'Symbol',
        'Type',
        'Uri',
        'bool',
        'double',
        'int',
        'num',
        // dart:html
        'Element',
        'ElementList'
      ];
      const NULLABLE_BUILT_IN_TYPES = BUILT_IN_TYPES.map((e) => `${e}?`);

      const KEYWORDS = {
        keyword: 'abstract as assert async await break case catch class const continue covariant default deferred do ' +
          'dynamic else enum export extends extension external factory false final finally for Function get hide if ' +
          'implements import in inferface is late library mixin new null on operator part required rethrow return set ' +
          'show static super switch sync this throw true try typedef var void while with yield',
        built_in:
          BUILT_IN_TYPES
            .concat(NULLABLE_BUILT_IN_TYPES)
            .concat([
              // dart:core
              'Never',
              'Null',
              'dynamic',
              'print',
              // dart:html
              'document',
              'querySelector',
              'querySelectorAll',
              'window'
            ]),
        $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
      };

      return {
        name: 'Dart',
        keywords: KEYWORDS,
        contains: [
          STRING,
          hljs.COMMENT(
            /\/\*\*(?!\/)/,
            /\*\//,
            {
              subLanguage: 'markdown',
              relevance: 0
            }
          ),
          hljs.COMMENT(
            /\/{3,} ?/,
            /$/, {
              contains: [{
                subLanguage: 'markdown',
                begin: '.',
                end: '$',
                relevance: 0
              }]
            }
          ),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'class',
            beginKeywords: 'class interface',
            end: /\{/,
            excludeEnd: true,
            contains: [
              {
                beginKeywords: 'extends implements'
              },
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          hljs.C_NUMBER_MODE,
          {
            className: 'meta',
            begin: '@[A-Za-z]+'
          },
          {
            begin: '=>' // No markup, just a relevance booster
          }
        ]
      };
    }

    var dart_1 = dart;

    // 自定义代码高亮的语言和css

    const highlightInit = () => {
      core.registerLanguage('javascript', javascript_1);
      core.registerLanguage('java', java_1);
      core.registerLanguage('cpp', cpp_1);
      core.registerLanguage('csharp', csharp_1);
      core.registerLanguage('php', php_1);
      core.registerLanguage('python', python_1);
      core.registerLanguage('sql', sql_1);
      core.registerLanguage('json', json_1);
      core.registerLanguage('bash', bash_1);
      core.registerLanguage('shell', vim_1);
      core.registerLanguage('css', css_1);
      core.registerLanguage('go', go_1);
      core.registerLanguage('objectivec', objectivec_1);
      core.registerLanguage('ruby', ruby_1);
      core.registerLanguage('xml', xml_1);
      core.registerLanguage('scala', scala_1);
      // highlight.registerLanguage('R', r);
      core.registerLanguage('matlab', matlab_1);
      core.registerLanguage('swift', swift_1);
      core.registerLanguage('dart', dart_1);

      core.configure({
        // optionally configure hljs
        languages: [
          'javascript',
          'java',
          'csharp',
          'cpp',
          'php',
          'python',
          'sql',
          'json',
          'bash',
          'shell',
          'css',
          'go',
          'objectivec',
          'ruby',
          'xml',
          'scala',
          'thrift',
          // 'r',
          'matlab',
          'swift',
          'dart',
        ],
        useBR: false,
      });
      window.hljs = core;
      return core;
    };

    function css (domNode, rules) {
      if (typeof rules === 'object') {
        for (let prop in rules) {
          domNode.style[prop] = rules[prop];
        }
      }
    }

    /**
     * getRelativeRect
     * @param  {Object} targetRect  rect data for target element
     * @param  {Element} container  container element
     * @return {Object}             an object with rect data
     */
    function getRelativeRect (targetRect, container) {
      let containerRect = container.getBoundingClientRect();

      return {
        x: targetRect.x - containerRect.x - container.scrollLeft,
        y: targetRect.y - containerRect.y - container.scrollTop,
        x1: targetRect.x - containerRect.x - container.scrollLeft + targetRect.width,
        y1: targetRect.y - containerRect.y - container.scrollTop + targetRect.height,
        width: targetRect.width,
        height: targetRect.height
      }
    }

    /**
     * _omit
     * @param  {Object} obj         target Object
     * @param  {Array} uselessKeys  keys of removed properties
     * @return {Object}             new Object without useless properties
     */
    function _omit (obj, uselessKeys) {
      return obj && Object.keys(obj).reduce((acc, key) => {
        return uselessKeys.includes(key) ?
          acc :
          Object.assign({}, acc, { [key]: obj[key] })
      }, {})
    }

    /**
     * getEventComposedPath
     *  compatibility fixed for Event.path/Event.composedPath
     *  Event.path is only for chrome/opera
     *  Event.composedPath is for Safari, FF
     *  Neither for Micro Edge
     * @param {Event} evt
     * @return {Array} an array of event.path
     */
    function getEventComposedPath (evt) {
      let path;
      // chrome, opera, safari, firefox
      path = evt.path || (evt.composedPath && evt.composedPath());

      // other: edge
      if (path == undefined && evt.target) {
        path = [];
        let target = evt.target;
        path.push(target);

        while (target && target.parentNode) {
          target = target.parentNode;
          path.push(target);
        }
      }

      return path
    }

    function convertToHex (rgb) {
      var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
      // if rgb
      if (/^(rgb|RGB)/.test(rgb)) {
        var color = rgb.toString().match(/\d+/g);
        var hex = "#";

        for (var i = 0; i < 3; i++) {
            hex += ("0" + Number(color[i]).toString(16)).slice(-2);
        }
        return hex;
      } else if (reg.test(rgb)) {
        var aNum = rgb.replace(/#/,"").split("");
        if (aNum.length === 6) {
            return rgb;
        } else if(aNum.length === 3) {
            var numHex = "#";
            for (var i=0; i<aNum.length; i+=1) {
                numHex += (aNum[i] + aNum[i]);
            }
            return numHex;
        }
      }

      return rgb;
    }

    const COL_TOOL_HEIGHT = 10;
    const COL_TOOL_CELL_HEIGHT = 10;
    const CELL_MIN_WIDTH = 50;
    const PRIMARY_COLOR$1 = '#35A7ED';

    class TableColumnTool {
      constructor (table, quill, options) {
        if (!table) return null
        this.table = table;
        this.quill = quill;
        this.options = options;
        this.domNode = null;

        this.initColTool();
      }

      initColTool () {
        const parent = this.quill.root.parentNode;
        this.table.getBoundingClientRect();
        const containerRect = parent.getBoundingClientRect();
        const tableViewRect = this.table.parentNode.getBoundingClientRect();

        this.domNode = document.createElement('div');
        this.domNode.classList.add('qlbt-col-tool');
        this.updateToolCells();
        parent.appendChild(this.domNode);
        css(this.domNode, {
          width: `${tableViewRect.width}px`,
          height: `${COL_TOOL_HEIGHT}px`,
          left: `${tableViewRect.left - containerRect.left + parent.scrollLeft}px`,
          top: `${tableViewRect.top - containerRect.top + parent.scrollTop - COL_TOOL_HEIGHT - 5}px`
        });
      }

      createToolCell () {
        const toolCell = document.createElement('div');
        toolCell.classList.add('qlbt-col-tool-cell');
        const resizeHolder = document.createElement('div');
        resizeHolder.classList.add('qlbt-col-tool-cell-holder');
        css(toolCell, {
          'height': `${COL_TOOL_CELL_HEIGHT}px`
        });
        toolCell.appendChild(resizeHolder);
        return toolCell
      }

      updateToolCells () {
        const tableContainer = Quill.find(this.table);
        const CellsInFirstRow = tableContainer.children.tail.children.head.children;
        const tableCols = tableContainer.colGroup().children;
        const cellsNumber = computeCellsNumber(CellsInFirstRow);
        let existCells = Array.from(this.domNode.querySelectorAll('.qlbt-col-tool-cell'));

        for (let index = 0; index < Math.max(cellsNumber, existCells.length); index++) {
          let col = tableCols.at(index);
          let colWidth = col && parseInt(col.formats()[col.statics.blotName].width, 10);
          // if cell already exist
          let toolCell = null;
          if (!existCells[index]) {
            toolCell = this.createToolCell();
            this.domNode.appendChild(toolCell);
            this.addColCellHolderHandler(toolCell);
            // set tool cell min-width
            css(toolCell, {
              'min-width': `${colWidth}px`
            });
          } else if (existCells[index] && index >= cellsNumber) {
            existCells[index].remove();
          } else {
            toolCell = existCells[index];
            // set tool cell min-width
            css(toolCell, {
              'min-width': `${colWidth}px`
            });
          }
        }
      }

      destroy () {
        this.domNode.remove();
        return null
      }

      addColCellHolderHandler(cell) {
        const tableContainer = Quill.find(this.table);
        const $holder = cell.querySelector(".qlbt-col-tool-cell-holder");
        let dragging = false;
        let x0 = 0;
        let x = 0;
        let delta = 0;
        let width0 = 0;
        // helpLine relation varrible
        let tableRect = {};
        let cellRect = {};
        let $helpLine = null;

        const handleDrag = e => {
          e.preventDefault();

          if (dragging) {
            x = e.clientX;

            if (width0 + x - x0 >= CELL_MIN_WIDTH) {
              delta = x - x0;
            } else {
              delta = CELL_MIN_WIDTH - width0;
            }

            css($helpLine, {
              'left': `${cellRect.left + cellRect.width - 1 + delta}px`
            });
          }
        };

        const handleMouseup = e => {
          e.preventDefault();
          const existCells = Array.from(this.domNode.querySelectorAll('.qlbt-col-tool-cell'));
          const colIndex = existCells.indexOf(cell);
          const colBlot = tableContainer.colGroup().children.at(colIndex);

          if (dragging) {
            colBlot.format('width', width0 + delta);
            css(cell, { 'min-width': `${width0 + delta}px` });

            x0 = 0;
            x = 0;
            delta = 0;
            width0 = 0;
            dragging = false;
            $holder.classList.remove('dragging');
          }

          document.removeEventListener('mousemove', handleDrag, false);
          document.removeEventListener('mouseup', handleMouseup, false);
          tableRect = {};
          cellRect = {};
          $helpLine.remove();
          $helpLine = null;
          tableContainer.updateTableWidth();

          const tableSelection = this.quill.getModule('better-table').tableSelection;
          tableSelection && tableSelection.clearSelection();
        };

        const handleMousedown = e => {
          document.addEventListener('mousemove', handleDrag, false);
          document.addEventListener('mouseup', handleMouseup, false);

          tableRect = this.table.getBoundingClientRect();
          cellRect = cell.getBoundingClientRect();
          $helpLine = document.createElement('div');
          css($helpLine, {
            position: 'fixed',
            top: `${cellRect.top}px`,
            left: `${cellRect.left + cellRect.width - 1}px`,
            zIndex: '100',
            height: `${tableRect.height + COL_TOOL_HEIGHT + 4}px`,
            width: '1px',
            backgroundColor: PRIMARY_COLOR$1
          });

          document.body.appendChild($helpLine);
          dragging = true;
          x0 = e.clientX;
          width0 = cellRect.width;
          $holder.classList.add('dragging');
        };
        $holder.addEventListener('mousedown', handleMousedown, false);
      }

      colToolCells () {
        return Array.from(this.domNode.querySelectorAll('.qlbt-col-tool-cell'))
      }
    }

    function computeCellsNumber (CellsInFirstRow) {
      return CellsInFirstRow.reduce((sum, cell) => {
        const cellColspan = cell.formats().colspan;
        sum = sum + parseInt(cellColspan, 10);
        return sum
      }, 0)
    }

    const Block$1 = Quill.import("blots/block");

    class Header extends Block$1 {
      static create (value) {
        if (typeof value === 'string') {
          value = { value };
        }

        const node = super.create(value.value);

        CELL_IDENTITY_KEYS.forEach(key => {
          if (value[key]) node.setAttribute(`data-${key}`, value[key]);
        });

        CELL_ATTRIBUTES.forEach(key => {
          if (value[key]) node.setAttribute(`data-${key}`, value[key]);
        });

        return node
      }

      static formats(domNode) {
        const formats = {};
        formats.value = this.tagName.indexOf(domNode.tagName) + 1;

        return CELL_ATTRIBUTES.concat(CELL_IDENTITY_KEYS).reduce((formats, attribute) => {
          if (domNode.hasAttribute(`data-${attribute}`)) {
            formats[attribute] = domNode.getAttribute(`data-${attribute}`) || undefined;
          }
          return formats
        }, formats)
      }

      format (name, value) {
        const { row, cell, rowspan, colspan } = Header.formats(this.domNode);
        if (name === Header.blotName) {
          if (value) {
            super.format(name, {
              value,
              row, cell, rowspan, colspan
            });
          } else {
            if (row) {
              this.replaceWith(TableCellLine.blotName, {
                row,
                cell,
                rowspan,
                colspan
              });
            } else {
              super.format(name, value);
            }
          }
        } else {
          super.format(name, value);
        }
      }

      optimize(context) {
        const { row, rowspan, colspan } = Header.formats(this.domNode);

        if (
          row &&
          !(this.parent instanceof TableCell)
        ) {
          this.wrap(TableCell.blotName, {
            row,
            colspan,
            rowspan
          });
        }

        // ShadowBlot optimize
        this.enforceAllowedChildren();
        if (this.uiNode != null && this.uiNode !== this.domNode.firstChild) {
          this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);
        }
        if (this.children.length === 0) {
          if (this.statics.defaultChild != null) {
            const child = this.scroll.create(this.statics.defaultChild.blotName);
            this.appendChild(child);
            // TODO double check if necessary
            // child.optimize(context);
          } else {
            this.remove();
          }
        }
        // Block optimize
        this.cache = {};
      }
    }
    Header.blotName = 'header';
    Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];

    const Break = Quill.import('blots/break');
    const Block = Quill.import('blots/block');
    const Container = Quill.import('blots/container');

    const COL_ATTRIBUTES = ['width'];
    const COL_DEFAULT = {
      width: 120,
    };
    const CELL_IDENTITY_KEYS = ['row', 'cell'];
    const CELL_ATTRIBUTES = ['rowspan', 'colspan'];
    const CELL_DEFAULT = {
      rowspan: 1,
      colspan: 1,
    };
    const ERROR_LIMIT$2 = 5;

    class TableCellLine extends Block {
      static create(value) {
        const node = super.create(value);

        CELL_IDENTITY_KEYS.forEach((key) => {
          let identityMaker = key === 'row' ? rowId : cellId;
          node.setAttribute(`data-${key}`, value[key] || identityMaker());
        });

        CELL_ATTRIBUTES.forEach((attrName) => {
          node.setAttribute(`data-${attrName}`, value[attrName] || CELL_DEFAULT[attrName]);
        });

        if (value['cell-bg']) {
          node.setAttribute('data-cell-bg', value['cell-bg']);
        }

        return node;
      }

      static formats(domNode) {
        const formats = {};

        return CELL_ATTRIBUTES.concat(CELL_IDENTITY_KEYS)
          .concat(['cell-bg'])
          .reduce((formats, attribute) => {
            if (domNode.hasAttribute(`data-${attribute}`)) {
              formats[attribute] = domNode.getAttribute(`data-${attribute}`) || undefined;
            }
            return formats;
          }, formats);
      }

      format(name, value) {
        if (CELL_ATTRIBUTES.concat(CELL_IDENTITY_KEYS).indexOf(name) > -1) {
          if (value) {
            this.domNode.setAttribute(`data-${name}`, value);
          } else {
            this.domNode.removeAttribute(`data-${name}`);
          }
        } else if (name === 'cell-bg') {
          if (value) {
            this.domNode.setAttribute('data-cell-bg', value);
          } else {
            this.domNode.removeAttribute('data-cell-bg');
          }
        } else if (name === 'header') {
          if (!value) return;
          const { row, cell, rowspan, colspan } = TableCellLine.formats(this.domNode);
          super.format(name, {
            value,
            row,
            cell,
            rowspan,
            colspan,
          });
        } else {
          super.format(name, value);
        }
      }

      optimize(context) {
        // cover shadowBlot's wrap call, pass params parentBlot initialize
        // needed
        const rowId = this.domNode.getAttribute('data-row');
        const rowspan = this.domNode.getAttribute('data-rowspan');
        const colspan = this.domNode.getAttribute('data-colspan');
        const cellBg = this.domNode.getAttribute('data-cell-bg');
        if (
          this.statics.requiredContainer &&
          !(this.parent instanceof this.statics.requiredContainer)
        ) {
          this.wrap(this.statics.requiredContainer.blotName, {
            row: rowId,
            colspan,
            rowspan,
            'cell-bg': cellBg,
          });
        }
        super.optimize(context);
      }

      tableCell() {
        return this.parent;
      }
    }
    TableCellLine.blotName = 'table-cell-line';
    TableCellLine.className = 'qlbt-cell-line';
    TableCellLine.tagName = 'P';

    class TableCell extends Container {
      checkMerge() {
        // table中允许List之后，输入有序列表报错 this.children.head.formats没有
        if (
          super.checkMerge() &&
          this.next.children.head != null &&
          this.children.head.formats &&
          this.children.tail.formats &&
          this.next.children.head.formats &&
          this.next.children.tail.formats
        ) {
          const thisHead = this.children.head.formats()[this.children.head.statics.blotName];
          const thisTail = this.children.tail.formats()[this.children.tail.statics.blotName];
          const nextHead = this.next.children.head.formats()[this.next.children.head.statics.blotName];
          const nextTail = this.next.children.tail.formats()[this.next.children.tail.statics.blotName];
          // table中允许List之后，输入有序列表报错，添加非空校验
          if (thisHead && thisTail && nextHead && nextTail) {
            return (
              thisHead.cell === thisTail.cell &&
              thisHead.cell === nextHead.cell &&
              thisHead.cell === nextTail.cell
            );
          }
        }
        return false;
      }

      static create(value) {
        const node = super.create(value);
        node.setAttribute('data-row', value.row);

        CELL_ATTRIBUTES.forEach((attrName) => {
          if (value[attrName]) {
            node.setAttribute(attrName, value[attrName]);
          }
        });

        if (value['cell-bg']) {
          node.setAttribute('data-cell-bg', value['cell-bg']);
          node.style.backgroundColor = value['cell-bg'];
        }

        return node;
      }

      static formats(domNode) {
        const formats = {};

        if (domNode.hasAttribute('data-row')) {
          formats['row'] = domNode.getAttribute('data-row');
        }

        if (domNode.hasAttribute('data-cell-bg')) {
          formats['cell-bg'] = domNode.getAttribute('data-cell-bg');
        }

        return CELL_ATTRIBUTES.reduce((formats, attribute) => {
          if (domNode.hasAttribute(attribute)) {
            formats[attribute] = domNode.getAttribute(attribute);
          }

          return formats;
        }, formats);
      }

      cellOffset() {
        if (this.parent) {
          return this.parent.children.indexOf(this);
        }
        return -1;
      }

      formats() {
        const formats = {};

        if (this.domNode.hasAttribute('data-row')) {
          formats['row'] = this.domNode.getAttribute('data-row');
        }

        if (this.domNode.hasAttribute('data-cell-bg')) {
          formats['cell-bg'] = this.domNode.getAttribute('data-cell-bg');
        }

        return CELL_ATTRIBUTES.reduce((formats, attribute) => {
          if (this.domNode.hasAttribute(attribute)) {
            formats[attribute] = this.domNode.getAttribute(attribute);
          }

          return formats;
        }, formats);
      }

      toggleAttribute(name, value) {
        if (value) {
          this.domNode.setAttribute(name, value);
        } else {
          this.domNode.removeAttribute(name);
        }
      }

      formatChildren(name, value) {
        this.children.forEach((child) => {
          child.format(name, value);
        });
      }

      format(name, value) {
        if (CELL_ATTRIBUTES.indexOf(name) > -1) {
          this.toggleAttribute(name, value);
          this.formatChildren(name, value);
        } else if (['row'].indexOf(name) > -1) {
          this.toggleAttribute(`data-${name}`, value);
          this.formatChildren(name, value);
        } else if (name === 'cell-bg') {
          this.toggleAttribute('data-cell-bg', value);
          this.formatChildren(name, value);

          if (value) {
            this.domNode.style.backgroundColor = value;
          } else {
            this.domNode.style.backgroundColor = 'initial';
          }
        } else {
          super.format(name, value);
        }
      }

      optimize(context) {
        const rowId = this.domNode.getAttribute('data-row');

        if (
          this.statics.requiredContainer &&
          !(this.parent instanceof this.statics.requiredContainer)
        ) {
          this.wrap(this.statics.requiredContainer.blotName, {
            row: rowId,
          });
        }
        super.optimize(context);
      }

      row() {
        return this.parent;
      }

      rowOffset() {
        if (this.row()) {
          return this.row().rowOffset();
        }
        return -1;
      }

      table() {
        return this.row() && this.row().table();
      }
    }
    TableCell.blotName = 'table';
    TableCell.tagName = 'TD';

    class TableRow extends Container {
      checkMerge() {
        if (super.checkMerge() && this.next.children.head != null) {
          const thisHead = this.children.head.formats();
          const thisTail = this.children.tail.formats();
          const nextHead = this.next.children.head.formats();
          const nextTail = this.next.children.tail.formats();

          return (
            thisHead.row === thisTail.row &&
            thisHead.row === nextHead.row &&
            thisHead.row === nextTail.row
          );
        }
        return false;
      }

      static create(value) {
        const node = super.create(value);
        node.setAttribute('data-row', value.row);
        return node;
      }

      formats() {
        return ['row'].reduce((formats, attrName) => {
          if (this.domNode.hasAttribute(`data-${attrName}`)) {
            formats[attrName] = this.domNode.getAttribute(`data-${attrName}`);
          }
          return formats;
        }, {});
      }

      optimize(context) {
        // optimize function of ShadowBlot
        if (
          this.statics.requiredContainer &&
          !(this.parent instanceof this.statics.requiredContainer)
        ) {
          this.wrap(this.statics.requiredContainer.blotName);
        }

        // optimize function of ParentBlot
        // note: modified this optimize function because
        // TableRow should not be removed when the length of its children was 0
        this.enforceAllowedChildren();
        if (this.uiNode != null && this.uiNode !== this.domNode.firstChild) {
          this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);
        }

        // optimize function of ContainerBlot
        if (this.children.length > 0 && this.next != null && this.checkMerge()) {
          this.next.moveChildren(this);
          this.next.remove();
        }
      }

      rowOffset() {
        if (this.parent) {
          return this.parent.children.indexOf(this);
        }
        return -1;
      }

      table() {
        return this.parent && this.parent.parent;
      }
    }
    TableRow.blotName = 'table-row';
    TableRow.tagName = 'TR';

    class TableBody extends Container {}
    TableBody.blotName = 'table-body';
    TableBody.tagName = 'TBODY';

    class TableCol extends Block {
      static create(value) {
        let node = super.create(value);
        COL_ATTRIBUTES.forEach((attrName) => {
          node.setAttribute(`${attrName}`, value[attrName] || COL_DEFAULT[attrName]);
        });
        return node;
      }

      static formats(domNode) {
        return COL_ATTRIBUTES.reduce((formats, attribute) => {
          if (domNode.hasAttribute(`${attribute}`)) {
            formats[attribute] = domNode.getAttribute(`${attribute}`) || undefined;
          }
          return formats;
        }, {});
      }

      format(name, value) {
        if (COL_ATTRIBUTES.indexOf(name) > -1) {
          this.domNode.setAttribute(`${name}`, value || COL_DEFAULT[name]);
        } else {
          super.format(name, value);
        }
      }

      html() {
        return this.domNode.outerHTML;
      }
    }
    TableCol.blotName = 'table-col';
    TableCol.tagName = 'col';

    class TableColGroup extends Container {}
    TableColGroup.blotName = 'table-col-group';
    TableColGroup.tagName = 'colgroup';

    class TableContainer extends Container {
      static create() {
        let node = super.create();
        return node;
      }

      constructor(scroll, domNode) {
        super(scroll, domNode);
        this.updateTableWidth();
      }

      updateTableWidth() {
        setTimeout(() => {
          const colGroup = this.colGroup();
          if (!colGroup) return;
          const tableWidth = colGroup.children.reduce((sumWidth, col) => {
            sumWidth = sumWidth + parseInt(col.formats()[TableCol.blotName].width, 10);
            return sumWidth;
          }, 0);
          this.domNode.style.width = `${tableWidth}px`;
        }, 0);
      }

      cells(column) {
        return this.rows().map((row) => row.children.at(column));
      }

      colGroup() {
        return this.children.head;
      }

      deleteColumns(compareRect, delIndexes = [], editorWrapper) {
        const [body] = this.descendants(TableBody);
        if (body == null || body.children.head == null) return;

        const tableCells = this.descendants(TableCell);
        const removedCells = [];
        const modifiedCells = [];

        tableCells.forEach((cell) => {
          const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper);

          if (cellRect.x + ERROR_LIMIT$2 > compareRect.x && cellRect.x1 - ERROR_LIMIT$2 < compareRect.x1) {
            removedCells.push(cell);
          } else if (
            cellRect.x < compareRect.x + ERROR_LIMIT$2 &&
            cellRect.x1 > compareRect.x1 - ERROR_LIMIT$2
          ) {
            modifiedCells.push(cell);
          }
        });

        if (removedCells.length === tableCells.length) {
          this.tableDestroy();
          return true;
        }

        // remove the matches column tool cell
        delIndexes.forEach((delIndex) => {
          this.colGroup().children.at(delIndexes[0]).remove();
        });

        removedCells.forEach((cell) => {
          cell.remove();
        });

        modifiedCells.forEach((cell) => {
          const cellColspan = parseInt(cell.formats().colspan, 10);
          parseInt(cell.formats().width, 10);
          cell.format('colspan', cellColspan - delIndexes.length);
        });

        this.updateTableWidth();
      }

      deleteRow(compareRect, editorWrapper) {
        const [body] = this.descendants(TableBody);
        if (body == null || body.children.head == null) return;

        const tableCells = this.descendants(TableCell);
        const tableRows = this.descendants(TableRow);
        const removedCells = []; // cells to be removed
        const modifiedCells = []; // cells to be modified
        const fallCells = []; // cells to fall into next row

        // compute rows to remove
        // bugfix: #21 There will be a empty tr left if delete the last row of a table
        const removedRows = tableRows.filter((row) => {
          const rowRect = getRelativeRect(row.domNode.getBoundingClientRect(), editorWrapper);

          return rowRect.y > compareRect.y - ERROR_LIMIT$2 && rowRect.y1 < compareRect.y1 + ERROR_LIMIT$2;
        });

        tableCells.forEach((cell) => {
          const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper);

          if (cellRect.y > compareRect.y - ERROR_LIMIT$2 && cellRect.y1 < compareRect.y1 + ERROR_LIMIT$2) {
            removedCells.push(cell);
          } else if (
            cellRect.y < compareRect.y + ERROR_LIMIT$2 &&
            cellRect.y1 > compareRect.y1 - ERROR_LIMIT$2
          ) {
            modifiedCells.push(cell);

            if (Math.abs(cellRect.y - compareRect.y) < ERROR_LIMIT$2) {
              fallCells.push(cell);
            }
          }
        });

        if (removedCells.length === tableCells.length) {
          this.tableDestroy();
          return;
        }

        // compute length of removed rows
        const removedRowsLength = this.rows().reduce((sum, row) => {
          let rowRect = getRelativeRect(row.domNode.getBoundingClientRect(), editorWrapper);

          if (rowRect.y > compareRect.y - ERROR_LIMIT$2 && rowRect.y1 < compareRect.y1 + ERROR_LIMIT$2) {
            sum += 1;
          }
          return sum;
        }, 0);

        // it must excute before the table layout changed with other operation
        fallCells.forEach((cell) => {
          const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper);
          const nextRow = cell.parent.next;
          const cellsInNextRow = nextRow.children;

          const refCell = cellsInNextRow.reduce((ref, compareCell) => {
            const compareRect = getRelativeRect(
              compareCell.domNode.getBoundingClientRect(),
              editorWrapper,
            );
            if (Math.abs(cellRect.x1 - compareRect.x) < ERROR_LIMIT$2) {
              ref = compareCell;
            }
            return ref;
          }, null);

          nextRow.insertBefore(cell, refCell);
          cell.format('row', nextRow.formats().row);
        });

        removedCells.forEach((cell) => {
          cell.remove();
        });

        modifiedCells.forEach((cell) => {
          const cellRowspan = parseInt(cell.formats().rowspan, 10);
          cell.format('rowspan', cellRowspan - removedRowsLength);
        });

        // remove selected rows
        removedRows.forEach((row) => row.remove());
      }

      tableDestroy() {
        const quill = Quill.find(this.scroll.domNode.parentNode);
        const tableModule = quill.getModule('better-table');
        this.remove();
        tableModule.hideTableTools();
        quill.update(Quill.sources.USER);
      }

      insertCell(tableRow, ref) {
        const id = cellId();
        const rId = tableRow.formats().row;
        const tableCell = this.scroll.create(
          TableCell.blotName,
          Object.assign({}, CELL_DEFAULT, {
            row: rId,
          }),
        );
        const cellLine = this.scroll.create(TableCellLine.blotName, {
          row: rId,
          cell: id,
        });
        tableCell.appendChild(cellLine);

        if (ref) {
          tableRow.insertBefore(tableCell, ref);
        } else {
          tableRow.appendChild(tableCell);
        }
      }

      insertColumn(compareRect, colIndex, isRight = true, editorWrapper) {
        const [body] = this.descendants(TableBody);
        const [tableColGroup] = this.descendants(TableColGroup);
        const tableCols = this.descendants(TableCol);
        let addAsideCells = [];
        let modifiedCells = [];
        let affectedCells = [];

        if (body == null || body.children.head == null) return;
        const tableCells = this.descendants(TableCell);
        tableCells.forEach((cell) => {
          const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper);

          if (isRight) {
            if (Math.abs(cellRect.x1 - compareRect.x1) < ERROR_LIMIT$2) {
              // the right of selected boundary equal to the right of table cell,
              // add a new table cell right aside this table cell
              addAsideCells.push(cell);
            } else if (
              compareRect.x1 - cellRect.x > ERROR_LIMIT$2 &&
              compareRect.x1 - cellRect.x1 < -ERROR_LIMIT$2
            ) {
              // the right of selected boundary is inside this table cell
              // colspan of this table cell will increase 1
              modifiedCells.push(cell);
            }
          } else {
            if (Math.abs(cellRect.x - compareRect.x) < ERROR_LIMIT$2) {
              // left of selected boundary equal to left of table cell,
              // add a new table cell left aside this table cell
              addAsideCells.push(cell);
            } else if (
              compareRect.x - cellRect.x > ERROR_LIMIT$2 &&
              compareRect.x - cellRect.x1 < -ERROR_LIMIT$2
            ) {
              // the left of selected boundary is inside this table cell
              // colspan of this table cell will increase 1
              modifiedCells.push(cell);
            }
          }
        });

        addAsideCells.forEach((cell) => {
          const ref = isRight ? cell.next : cell;
          const id = cellId();
          const tableRow = cell.parent;
          const rId = tableRow.formats().row;
          const cellFormats = cell.formats();
          const tableCell = this.scroll.create(
            TableCell.blotName,
            Object.assign({}, CELL_DEFAULT, {
              row: rId,
              rowspan: cellFormats.rowspan,
            }),
          );
          const cellLine = this.scroll.create(TableCellLine.blotName, {
            row: rId,
            cell: id,
            rowspan: cellFormats.rowspan,
          });
          tableCell.appendChild(cellLine);

          if (ref) {
            tableRow.insertBefore(tableCell, ref);
          } else {
            tableRow.appendChild(tableCell);
          }
          affectedCells.push(tableCell);
        });

        // insert new tableCol
        const tableCol = this.scroll.create(TableCol.blotName, true);
        let colRef = isRight ? tableCols[colIndex].next : tableCols[colIndex];
        if (colRef) {
          tableColGroup.insertBefore(tableCol, colRef);
        } else {
          tableColGroup.appendChild(tableCol);
        }

        modifiedCells.forEach((cell) => {
          const cellColspan = cell.formats().colspan;
          cell.format('colspan', parseInt(cellColspan, 10) + 1);
          affectedCells.push(cell);
        });

        affectedCells.sort((cellA, cellB) => {
          let y1 = cellA.domNode.getBoundingClientRect().y;
          let y2 = cellB.domNode.getBoundingClientRect().y;
          return y1 - y2;
        });

        this.updateTableWidth();
        return affectedCells;
      }

      insertRow(compareRect, isDown, editorWrapper) {
        const [body] = this.descendants(TableBody);
        if (body == null || body.children.head == null) return;

        const tableCells = this.descendants(TableCell);
        const rId = rowId();
        const newRow = this.scroll.create(TableRow.blotName, {
          row: rId,
        });
        let addBelowCells = [];
        let modifiedCells = [];
        let affectedCells = [];

        tableCells.forEach((cell) => {
          const cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper);

          if (isDown) {
            if (Math.abs(cellRect.y1 - compareRect.y1) < ERROR_LIMIT$2) {
              addBelowCells.push(cell);
            } else if (
              compareRect.y1 - cellRect.y > ERROR_LIMIT$2 &&
              compareRect.y1 - cellRect.y1 < -ERROR_LIMIT$2
            ) {
              modifiedCells.push(cell);
            }
          } else {
            if (Math.abs(cellRect.y - compareRect.y) < ERROR_LIMIT$2) {
              addBelowCells.push(cell);
            } else if (
              compareRect.y - cellRect.y > ERROR_LIMIT$2 &&
              compareRect.y - cellRect.y1 < -ERROR_LIMIT$2
            ) {
              modifiedCells.push(cell);
            }
          }
        });

        // ordered table cells with rect.x, fix error for inserting
        // new table cell in complicated table with wrong order.
        const sortFunc = (cellA, cellB) => {
          let x1 = cellA.domNode.getBoundingClientRect().x;
          let x2 = cellB.domNode.getBoundingClientRect().x;
          return x1 - x2;
        };
        addBelowCells.sort(sortFunc);

        addBelowCells.forEach((cell) => {
          const cId = cellId();
          const cellFormats = cell.formats();

          const tableCell = this.scroll.create(
            TableCell.blotName,
            Object.assign({}, CELL_DEFAULT, { row: rId, colspan: cellFormats.colspan }),
          );
          const cellLine = this.scroll.create(TableCellLine.blotName, {
            row: rId,
            cell: cId,
            colspan: cellFormats.colspan,
          });
          const empty = this.scroll.create(Break.blotName);
          cellLine.appendChild(empty);
          tableCell.appendChild(cellLine);
          newRow.appendChild(tableCell);
          affectedCells.push(tableCell);
        });

        modifiedCells.forEach((cell) => {
          const cellRowspan = parseInt(cell.formats().rowspan, 10);
          cell.format('rowspan', cellRowspan + 1);
          affectedCells.push(cell);
        });

        const refRow = this.rows().find((row) => {
          let rowRect = getRelativeRect(row.domNode.getBoundingClientRect(), editorWrapper);
          if (isDown) {
            return Math.abs(rowRect.y - compareRect.y - compareRect.height) < ERROR_LIMIT$2;
          } else {
            return Math.abs(rowRect.y - compareRect.y) < ERROR_LIMIT$2;
          }
        });
        body.insertBefore(newRow, refRow);

        // reordering affectedCells
        affectedCells.sort(sortFunc);
        return affectedCells;
      }

      mergeCells(compareRect, mergingCells, rowspan, colspan, editorWrapper) {
        const mergedCell = mergingCells.reduce((result, tableCell, index) => {
          if (index !== 0) {
            result && tableCell.moveChildren(result);
            tableCell.remove();
          } else {
            tableCell.format('colspan', colspan);
            tableCell.format('rowspan', rowspan);
            result = tableCell;
          }

          return result;
        }, null);

        let rowId = mergedCell.domNode.getAttribute('data-row');
        let cellId = mergedCell.children.head.domNode.getAttribute('data-cell');
        mergedCell.children.forEach((cellLine) => {
          cellLine.format('cell', cellId);
          cellLine.format('row', rowId);
          cellLine.format('colspan', colspan);
          cellLine.format('rowspan', rowspan);
        });

        return mergedCell;
      }

      unmergeCells(unmergingCells, editorWrapper) {
        let cellFormats = {};
        let cellRowspan = 1;
        let cellColspan = 1;

        unmergingCells.forEach((tableCell) => {
          cellFormats = tableCell.formats();
          cellRowspan = cellFormats.rowspan;
          cellColspan = cellFormats.colspan;

          if (cellColspan > 1) {
            let ref = tableCell.next;
            let row = tableCell.row();
            tableCell.format('colspan', 1);
            for (let i = cellColspan; i > 1; i--) {
              this.insertCell(row, ref);
            }
          }

          if (cellRowspan > 1) {
            let i = cellRowspan;
            let nextRow = tableCell.row().next;
            while (i > 1) {
              let refInNextRow = nextRow.children.reduce((result, cell) => {
                let compareRect = getRelativeRect(
                  tableCell.domNode.getBoundingClientRect(),
                  editorWrapper,
                );
                let cellRect = getRelativeRect(cell.domNode.getBoundingClientRect(), editorWrapper);
                if (Math.abs(compareRect.x1 - cellRect.x) < ERROR_LIMIT$2) {
                  result = cell;
                }
                return result;
              }, null);

              for (let i = cellColspan; i > 0; i--) {
                this.insertCell(nextRow, refInNextRow);
              }

              i -= 1;
              nextRow = nextRow.next;
            }

            tableCell.format('rowspan', 1);
          }
        });
      }

      rows() {
        const body = this.children.tail;
        if (body == null) return [];
        return body.children.map((row) => row);
      }
    }
    TableContainer.blotName = 'table-container';
    TableContainer.className = 'quill-better-table';
    TableContainer.tagName = 'TABLE';

    class TableViewWrapper extends Container {
      constructor(scroll, domNode) {
        super(scroll, domNode);
        const quill = Quill.find(scroll.domNode.parentNode);
        domNode.addEventListener(
          'scroll',
          (e) => {
            const tableModule = quill.getModule('better-table');
            if (tableModule.columnTool) {
              tableModule.columnTool.domNode.scrollLeft = e.target.scrollLeft;
            }

            if (tableModule.tableSelection && tableModule.tableSelection.selectedTds.length > 0) {
              tableModule.tableSelection.repositionHelpLines();
            }
          },
          false,
        );
      }

      table() {
        return this.children.head;
      }
    }
    TableViewWrapper.blotName = 'table-view';
    TableViewWrapper.className = 'quill-better-table-wrapper';
    TableViewWrapper.tagName = 'DIV';

    TableViewWrapper.allowedChildren = [TableContainer];
    TableContainer.requiredContainer = TableViewWrapper;

    TableContainer.allowedChildren = [TableBody, TableColGroup];
    TableBody.requiredContainer = TableContainer;

    TableBody.allowedChildren = [TableRow];
    TableRow.requiredContainer = TableBody;

    TableRow.allowedChildren = [TableCell];
    TableCell.requiredContainer = TableRow;

    // https://github.com/soccerloway/quill-better-table/issues/68
    // 支持table中输入List
    // const List = Quill.import('formats/list');
    // TableCell.allowedChildren = [TableCellLine, Header, List.requiredContainer, Block];
    TableCell.allowedChildren = [TableCellLine, Header];
    TableCellLine.requiredContainer = TableCell;

    TableColGroup.allowedChildren = [TableCol];
    TableColGroup.requiredContainer = TableContainer;

    TableCol.requiredContainer = TableColGroup;

    function rowId() {
      const id = Math.random().toString(36).slice(2, 6);
      return `row-${id}`;
    }

    function cellId() {
      const id = Math.random().toString(36).slice(2, 6);
      return `cell-${id}`;
    }

    const PRIMARY_COLOR = '#6918b4';
    const LINE_POSITIONS = ['left', 'right', 'top', 'bottom'];
    const ERROR_LIMIT$1 = 2;

    class TableSelection {
      constructor (table, quill, options) {
        if (!table) return null
        this.table = table;
        this.quill = quill;
        this.options = options;
        this.boundary = {};   // params for selected square
        this.selectedTds = [];  // array for selected table-cells
        this.dragging = false;
        this.selectingHandler = this.mouseDownHandler.bind(this);
        this.clearSelectionHandler  = this.clearSelection.bind(this);

        this.helpLinesInitial();
        this.quill.root.addEventListener('mousedown',
          this.selectingHandler,
          false);

        this.quill.on('text-change', this.clearSelectionHandler );
      }

      helpLinesInitial () {
        let parent = this.quill.root.parentNode;
        LINE_POSITIONS.forEach(direction => {
          this[direction] = document.createElement('div');
          this[direction].classList.add('qlbt-selection-line');
          this[direction].classList.add('qlbt-selection-line-' + direction);
          css(this[direction], {
            position: 'absolute',
            display: 'none',
            'background-color': PRIMARY_COLOR
          });
          parent.appendChild(this[direction]);
        });
      }

      mouseDownHandler (e) {
        if (e.button !== 0 || !e.target.closest(".quill-better-table")) return
        this.quill.root.addEventListener('mousemove', mouseMoveHandler, false);
        this.quill.root.addEventListener('mouseup', mouseUpHandler, false);

        const self = this;
        const startTd = e.target.closest('td[data-row]');
        const startTdRect = getRelativeRect(
          startTd.getBoundingClientRect(),
          this.quill.root.parentNode
        );
        this.dragging = true;
        this.boundary = computeBoundaryFromRects(startTdRect, startTdRect);
        this.correctBoundary();
        this.selectedTds = this.computeSelectedTds();
        this.repositionHelpLines();

        function mouseMoveHandler (e) {
          if (e.button !== 0 || !e.target.closest(".quill-better-table")) return
          const endTd = e.target.closest('td[data-row]');
          const endTdRect = getRelativeRect(
            endTd.getBoundingClientRect(),
            self.quill.root.parentNode
          );
          self.boundary = computeBoundaryFromRects(startTdRect, endTdRect);
          self.correctBoundary();
          self.selectedTds = self.computeSelectedTds();
          self.repositionHelpLines();

          // avoid select text in multiple table-cell
          if (startTd !== endTd) {
            self.quill.blur();
          }
        }

        function mouseUpHandler (e) {
          self.quill.root.removeEventListener('mousemove', mouseMoveHandler, false);
          self.quill.root.removeEventListener('mouseup', mouseUpHandler, false);
          self.dragging = false;
        }
      }

      correctBoundary () {
        const tableContainer = Quill.find(this.table);
        const tableCells = tableContainer.descendants(TableCell);

        tableCells.forEach(tableCell => {
          let { x, y, width, height } = getRelativeRect(
            tableCell.domNode.getBoundingClientRect(),
            this.quill.root.parentNode
          );
          let isCellIntersected = (
              (x + ERROR_LIMIT$1 >= this.boundary.x && x + ERROR_LIMIT$1 <= this.boundary.x1) ||
              (x - ERROR_LIMIT$1 + width >= this.boundary.x && x - ERROR_LIMIT$1 + width <= this.boundary.x1)
            ) && (
              (y + ERROR_LIMIT$1 >= this.boundary.y && y + ERROR_LIMIT$1 <= this.boundary.y1) ||
              (y - ERROR_LIMIT$1 + height >= this.boundary.y && y - ERROR_LIMIT$1 + height <= this.boundary.y1)
            );
          if (isCellIntersected) {
            this.boundary = computeBoundaryFromRects(this.boundary, { x, y, width, height });
          }
        });
      }

      computeSelectedTds () {
        const tableContainer = Quill.find(this.table);
        const tableCells = tableContainer.descendants(TableCell);

        return tableCells.reduce((selectedCells, tableCell) => {
          let { x, y, width, height } = getRelativeRect(
            tableCell.domNode.getBoundingClientRect(),
            this.quill.root.parentNode
          );
          let isCellIncluded = (
              x + ERROR_LIMIT$1 >= this.boundary.x &&
              x - ERROR_LIMIT$1 + width <= this.boundary.x1
            ) && (
              y + ERROR_LIMIT$1 >= this.boundary.y &&
              y - ERROR_LIMIT$1 + height <= this.boundary.y1
            );

          if (isCellIncluded) {
            selectedCells.push(tableCell);
          }

          return selectedCells
        }, [])
      }

      repositionHelpLines () {
        const tableViewScrollLeft = this.table.parentNode.scrollLeft;
        css(this.left, {
          display: 'block',
          left: `${this.boundary.x - tableViewScrollLeft - 1}px`,
          top: `${this.boundary.y}px`,
          height: `${this.boundary.height + 1}px`,
          width: '1px'
        });

        css(this.right, {
          display: 'block',
          left: `${this.boundary.x1 - tableViewScrollLeft}px`,
          top: `${this.boundary.y}px`,
          height: `${this.boundary.height + 1}px`,
          width: '1px'
        });

        css(this.top, {
          display: 'block',
          left: `${this.boundary.x - 1 - tableViewScrollLeft}px`,
          top: `${this.boundary.y}px`,
          width: `${this.boundary.width + 1}px`,
          height: '1px'
        });

        css(this.bottom, {
          display: 'block',
          left: `${this.boundary.x - 1 - tableViewScrollLeft}px`,
          top: `${this.boundary.y1 + 1}px`,
          width: `${this.boundary.width + 1}px`,
          height: '1px'
        });
      }

      // based on selectedTds compute positions of help lines
      // It is useful when selectedTds are not changed
      refreshHelpLinesPosition () {
        const startRect = getRelativeRect(
          this.selectedTds[0].domNode.getBoundingClientRect(),
          this.quill.root.parentNode
        );
        const endRect = getRelativeRect(
          this.selectedTds[this.selectedTds.length - 1].domNode.getBoundingClientRect(),
          this.quill.root.parentNode
        );
        this.boundary = computeBoundaryFromRects(startRect, endRect);
        this.repositionHelpLines();
      }

      destroy () {
        LINE_POSITIONS.forEach(direction => {
          this[direction].remove();
          this[direction] = null;
        });

        this.quill.root.removeEventListener('mousedown',
          this.selectingHandler,
        false);

        this.quill.off('text-change', this.clearSelectionHandler );

        return null
      }

      setSelection (startRect, endRect) {
        this.boundary = computeBoundaryFromRects(
          getRelativeRect(startRect, this.quill.root.parentNode),
          getRelativeRect(endRect, this.quill.root.parentNode)
        );
        this.correctBoundary();
        this.selectedTds = this.computeSelectedTds();
        this.repositionHelpLines();
      }

      clearSelection () {
        this.boundary = {};
        this.selectedTds = [];
        LINE_POSITIONS.forEach(direction => {
          this[direction] && css(this[direction], {
            display: 'none'
          });
        });
      }
    }

    function computeBoundaryFromRects (startRect, endRect) {
      let x = Math.min(
        startRect.x,
        endRect.x,
        startRect.x + startRect.width - 1,
        endRect.x + endRect.width - 1
      );

      let x1 = Math.max(
        startRect.x,
        endRect.x,
        startRect.x + startRect.width - 1,
        endRect.x + endRect.width - 1
      );

      let y = Math.min(
        startRect.y,
        endRect.y,
        startRect.y + startRect.height - 1,
        endRect.y + endRect.height - 1
      );

      let y1 = Math.max(
        startRect.y,
        endRect.y,
        startRect.y + startRect.height - 1,
        endRect.y + endRect.height - 1
      );

      let width = x1 - x;
      let height = y1 - y;

      return { x, x1, y, y1, width, height }
    }

    var insertColumnRight = "<svg width=\"18px\" height=\"18px\" viewBox=\"64 64 896 896\" focusable=\"false\" aria-hidden=\"true\"><path class=\"ql-fill\" d=\"M856 112h-80c-4.4 0-8 3.6-8 8v784c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8V120c0-4.4-3.6-8-8-8zm-200 0H192c-17.7 0-32 14.9-32 33.3v733.3c0 18.4 14.3 33.3 32 33.3h464c17.7 0 32-14.9 32-33.3V145.3c0-18.4-14.3-33.3-32-33.3zM392 840H232V664h160v176zm0-240H232V424h160v176zm0-240H232V184h160v176zm224 480H456V664h160v176zm0-240H456V424h160v176zm0-240H456V184h160v176z\"></path></svg>";

    var insertColumnLeft = "<svg width=\"18px\" height=\"18px\" viewBox=\"64 64 896 896\" focusable=\"false\" aria-hidden=\"true\"><path class=\"ql-fill\" d=\"M248 112h-80c-4.4 0-8 3.6-8 8v784c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8V120c0-4.4-3.6-8-8-8zm584 0H368c-17.7 0-32 14.9-32 33.3v733.3c0 18.4 14.3 33.3 32 33.3h464c17.7 0 32-14.9 32-33.3V145.3c0-18.4-14.3-33.3-32-33.3zM568 840H408V664h160v176zm0-240H408V424h160v176zm0-240H408V184h160v176zm224 480H632V664h160v176zm0-240H632V424h160v176zm0-240H632V184h160v176z\"></path></svg>";

    var insertRowAbove = "<svg width=\"18px\" height=\"18px\" viewBox=\"64 64 896 896\" focusable=\"false\" aria-hidden=\"true\"><path class=\"ql-fill\" d=\"M878.7 336H145.3c-18.4 0-33.3 14.3-33.3 32v464c0 17.7 14.9 32 33.3 32h733.3c18.4 0 33.3-14.3 33.3-32V368c.1-17.7-14.8-32-33.2-32zM360 792H184V632h176v160zm0-224H184V408h176v160zm240 224H424V632h176v160zm0-224H424V408h176v160zm240 224H664V632h176v160zm0-224H664V408h176v160zm64-408H120c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8z\"></path></svg>";

    var insertRowBelow = "<svg width=\"18px\" height=\"18px\" viewBox=\"64 64 896 896\" focusable=\"false\" aria-hidden=\"true\"><path class=\"ql-fill\" d=\"M904 768H120c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8zm-25.3-608H145.3c-18.4 0-33.3 14.3-33.3 32v464c0 17.7 14.9 32 33.3 32h733.3c18.4 0 33.3-14.3 33.3-32V192c.1-17.7-14.8-32-33.2-32zM360 616H184V456h176v160zm0-224H184V232h176v160zm240 224H424V456h176v160zm0-224H424V232h176v160zm240 224H664V456h176v160zm0-224H664V232h176v160z\"></path></svg>";

    var mergeCells = "<svg width=\"18px\" height=\"18px\" viewBox=\"64 64 896 896\" focusable=\"false\" aria-hidden=\"true\"><path class=\"ql-fill\" d=\"M482.2 508.4L331.3 389c-3-2.4-7.3-.2-7.3 3.6V478H184V184h204v128c0 2.2 1.8 4 4 4h60c2.2 0 4-1.8 4-4V144c0-15.5-12.5-28-28-28H144c-15.5 0-28 12.5-28 28v736c0 15.5 12.5 28 28 28h284c15.5 0 28-12.5 28-28V712c0-2.2-1.8-4-4-4h-60c-2.2 0-4 1.8-4 4v128H184V546h140v85.4c0 3.8 4.4 6 7.3 3.6l150.9-119.4a4.5 4.5 0 000-7.2zM880 116H596c-15.5 0-28 12.5-28 28v168c0 2.2 1.8 4 4 4h60c2.2 0 4-1.8 4-4V184h204v294H700v-85.4c0-3.8-4.3-6-7.3-3.6l-151 119.4a4.52 4.52 0 000 7.1l151 119.5c2.9 2.3 7.3.2 7.3-3.6V546h140v294H636V712c0-2.2-1.8-4-4-4h-60c-2.2 0-4 1.8-4 4v168c0 15.5 12.5 28 28 28h284c15.5 0 28-12.5 28-28V144c0-15.5-12.5-28-28-28z\"></path></svg>";

    var splitCells = "<svg width=\"18px\" height=\"18px\" viewBox=\"64 64 896 896\" focusable=\"false\" aria-hidden=\"true\"><path class=\"ql-fill\" d=\"M938.2 508.4L787.3 389c-3-2.4-7.3-.2-7.3 3.6V478H636V184h204v128c0 2.2 1.8 4 4 4h60c2.2 0 4-1.8 4-4V144c0-15.5-12.5-28-28-28H596c-15.5 0-28 12.5-28 28v736c0 15.5 12.5 28 28 28h284c15.5 0 28-12.5 28-28V712c0-2.2-1.8-4-4-4h-60c-2.2 0-4 1.8-4 4v128H636V546h144v85.4c0 3.8 4.4 6 7.3 3.6l150.9-119.4a4.5 4.5 0 000-7.2zM428 116H144c-15.5 0-28 12.5-28 28v168c0 2.2 1.8 4 4 4h60c2.2 0 4-1.8 4-4V184h204v294H244v-85.4c0-3.8-4.3-6-7.3-3.6l-151 119.4a4.52 4.52 0 000 7.1l151 119.5c2.9 2.3 7.3.2 7.3-3.6V546h144v294H184V712c0-2.2-1.8-4-4-4h-60c-2.2 0-4 1.8-4 4v168c0 15.5 12.5 28 28 28h284c15.5 0 28-12.5 28-28V144c0-15.5-12.5-28-28-28z\"></path></svg>";

    var deleteColumn = "<svg width=\"18px\" height=\"18px\" viewBox=\"64 64 896 896\" focusable=\"false\" aria-hidden=\"true\"><path class=\"ql-fill\" d=\"M651.1 641.9a7.84 7.84 0 00-5.1-1.9h-54.7c-2.4 0-4.6 1.1-6.1 2.9L512 730.7l-73.1-87.8a8.1 8.1 0 00-6.1-2.9H378c-1.9 0-3.7.7-5.1 1.9a7.97 7.97 0 00-1 11.3L474.2 776 371.8 898.9a8.06 8.06 0 006.1 13.2h54.7c2.4 0 4.6-1.1 6.1-2.9l73.1-87.8 73.1 87.8a8.1 8.1 0 006.1 2.9h55c1.9 0 3.7-.7 5.1-1.9 3.4-2.8 3.9-7.9 1-11.3L549.8 776l102.4-122.9c2.8-3.4 2.3-8.4-1.1-11.2zM472 544h80c4.4 0 8-3.6 8-8V120c0-4.4-3.6-8-8-8h-80c-4.4 0-8 3.6-8 8v416c0 4.4 3.6 8 8 8zM350 386H184V136c0-3.3-2.7-6-6-6h-60c-3.3 0-6 2.7-6 6v292c0 16.6 13.4 30 30 30h208c3.3 0 6-2.7 6-6v-60c0-3.3-2.7-6-6-6zm556-256h-60c-3.3 0-6 2.7-6 6v250H674c-3.3 0-6 2.7-6 6v60c0 3.3 2.7 6 6 6h208c16.6 0 30-13.4 30-30V136c0-3.3-2.7-6-6-6z\"></path></svg>";

    var deleteRow = "<svg width=\"18px\" height=\"18px\" viewBox=\"64 64 896 896\" focusable=\"false\" aria-hidden=\"true\"><path class=\"ql-fill\" d=\"M819.8 512l102.4-122.9a8.06 8.06 0 00-6.1-13.2h-54.7c-2.4 0-4.6 1.1-6.1 2.9L782 466.7l-73.1-87.8a8.1 8.1 0 00-6.1-2.9H648c-1.9 0-3.7.7-5.1 1.9a7.97 7.97 0 00-1 11.3L744.2 512 641.8 634.9a8.06 8.06 0 006.1 13.2h54.7c2.4 0 4.6-1.1 6.1-2.9l73.1-87.8 73.1 87.8a8.1 8.1 0 006.1 2.9h55c1.9 0 3.7-.7 5.1-1.9 3.4-2.8 3.9-7.9 1-11.3L819.8 512zM536 464H120c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8h416c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8zm-84 204h-60c-3.3 0-6 2.7-6 6v166H136c-3.3 0-6 2.7-6 6v60c0 3.3 2.7 6 6 6h292c16.6 0 30-13.4 30-30V674c0-3.3-2.7-6-6-6zM136 184h250v166c0 3.3 2.7 6 6 6h60c3.3 0 6-2.7 6-6V142c0-16.6-13.4-30-30-30H136c-3.3 0-6 2.7-6 6v60c0 3.3 2.7 6 6 6z\"></path></svg>";

    const MENU_MIN_HEIHGT = 150;
    const MENU_WIDTH = 200;
    const ERROR_LIMIT = 5;
    const DEFAULT_CELL_COLORS = ['white', 'red', 'yellow', 'blue'];
    const DEFAULT_COLOR_SUBTITLE = 'Background Colors';

    const MENU_ITEMS_DEFAULT = {
      insertColumnRight: {
        text: 'Insert Column Right',
        iconSrc: insertColumnRight,
        handler() {
          const tableContainer = Quill.find(this.table);
          let colIndex = getColToolCellIndexByBoundary(
            this.columnToolCells,
            this.boundary,
            (cellRect, boundary) => {
              return Math.abs(cellRect.x + cellRect.width - boundary.x1) <= ERROR_LIMIT;
            },
            this.quill.root.parentNode,
          );

          const newColumn = tableContainer.insertColumn(
            this.boundary,
            colIndex,
            true,
            this.quill.root.parentNode,
          );

          this.tableColumnTool.updateToolCells();
          this.quill.update(Quill.sources.USER);
          this.quill.setSelection(this.quill.getIndex(newColumn[0]), 0, Quill.sources.SILENT);
          this.tableSelection.setSelection(
            newColumn[0].domNode.getBoundingClientRect(),
            newColumn[0].domNode.getBoundingClientRect(),
          );
        },
      },

      insertColumnLeft: {
        text: 'Insert Column Left',
        iconSrc: insertColumnLeft,
        handler() {
          const tableContainer = Quill.find(this.table);
          let colIndex = getColToolCellIndexByBoundary(
            this.columnToolCells,
            this.boundary,
            (cellRect, boundary) => {
              return Math.abs(cellRect.x - boundary.x) <= ERROR_LIMIT;
            },
            this.quill.root.parentNode,
          );

          const newColumn = tableContainer.insertColumn(
            this.boundary,
            colIndex,
            false,
            this.quill.root.parentNode,
          );

          this.tableColumnTool.updateToolCells();
          this.quill.update(Quill.sources.USER);
          this.quill.setSelection(this.quill.getIndex(newColumn[0]), 0, Quill.sources.SILENT);
          this.tableSelection.setSelection(
            newColumn[0].domNode.getBoundingClientRect(),
            newColumn[0].domNode.getBoundingClientRect(),
          );
        },
      },

      insertRowUp: {
        text: 'Insert Row Above',
        iconSrc: insertRowAbove,
        handler() {
          const tableContainer = Quill.find(this.table);
          const affectedCells = tableContainer.insertRow(
            this.boundary,
            false,
            this.quill.root.parentNode,
          );
          this.quill.update(Quill.sources.USER);
          this.quill.setSelection(this.quill.getIndex(affectedCells[0]), 0, Quill.sources.SILENT);
          this.tableSelection.setSelection(
            affectedCells[0].domNode.getBoundingClientRect(),
            affectedCells[0].domNode.getBoundingClientRect(),
          );
        },
      },

      insertRowDown: {
        text: 'Insert Row Below',
        iconSrc: insertRowBelow,
        handler() {
          const tableContainer = Quill.find(this.table);
          const affectedCells = tableContainer.insertRow(
            this.boundary,
            true,
            this.quill.root.parentNode,
          );
          this.quill.update(Quill.sources.USER);
          this.quill.setSelection(this.quill.getIndex(affectedCells[0]), 0, Quill.sources.SILENT);
          this.tableSelection.setSelection(
            affectedCells[0].domNode.getBoundingClientRect(),
            affectedCells[0].domNode.getBoundingClientRect(),
          );
        },
      },

      mergeCells: {
        text: 'Merge Selected Cells',
        iconSrc: mergeCells,
        handler() {
          const tableContainer = Quill.find(this.table);
          // compute merged Cell rowspan, equal to length of selected rows
          const rowspan = tableContainer.rows().reduce((sum, row) => {
            let rowRect = getRelativeRect(
              row.domNode.getBoundingClientRect(),
              this.quill.root.parentNode,
            );
            if (
              rowRect.y > this.boundary.y - ERROR_LIMIT &&
              rowRect.y + rowRect.height < this.boundary.y + this.boundary.height + ERROR_LIMIT
            ) {
              sum += 1;
            }
            return sum;
          }, 0);

          // compute merged cell colspan, equal to length of selected cols
          const colspan = this.columnToolCells.reduce((sum, cell) => {
            let cellRect = getRelativeRect(cell.getBoundingClientRect(), this.quill.root.parentNode);
            if (
              cellRect.x > this.boundary.x - ERROR_LIMIT &&
              cellRect.x + cellRect.width < this.boundary.x + this.boundary.width + ERROR_LIMIT
            ) {
              sum += 1;
            }
            return sum;
          }, 0);

          const mergedCell = tableContainer.mergeCells(
            this.boundary,
            this.selectedTds,
            rowspan,
            colspan,
            this.quill.root.parentNode,
          );
          this.quill.update(Quill.sources.USER);
          this.tableSelection.setSelection(
            mergedCell.domNode.getBoundingClientRect(),
            mergedCell.domNode.getBoundingClientRect(),
          );
        },
      },

      unmergeCells: {
        text: 'Unmerge Cells',
        iconSrc: splitCells,
        handler() {
          const tableContainer = Quill.find(this.table);
          tableContainer.unmergeCells(this.selectedTds, this.quill.root.parentNode);
          this.quill.update(Quill.sources.USER);
          this.tableSelection.clearSelection();
        },
      },

      deleteColumn: {
        text: 'Delete Columns',
        iconSrc: deleteColumn,
        handler() {
          const tableContainer = Quill.find(this.table);
          let colIndexes = getColToolCellIndexesByBoundary(
            this.columnToolCells,
            this.boundary,
            (cellRect, boundary) => {
              return (
                cellRect.x + ERROR_LIMIT > boundary.x &&
                cellRect.x + cellRect.width - ERROR_LIMIT < boundary.x1
              );
            },
            this.quill.root.parentNode,
          );

          let isDeleteTable = tableContainer.deleteColumns(
            this.boundary,
            colIndexes,
            this.quill.root.parentNode,
          );
          if (!isDeleteTable) {
            this.tableColumnTool.updateToolCells();
            this.quill.update(Quill.sources.USER);
            this.tableSelection.clearSelection();
          }
        },
      },

      deleteRow: {
        text: 'Delete Rows',
        iconSrc: deleteRow,
        handler() {
          const tableContainer = Quill.find(this.table);
          tableContainer.deleteRow(this.boundary, this.quill.root.parentNode);
          this.quill.update(Quill.sources.USER);
          this.tableSelection.clearSelection();
        },
      },

      deleteTable: {
        text: 'Delete Table',
        iconSrc: deleteIcon,
        handler() {
          const betterTableModule = this.quill.getModule('better-table');
          const tableContainer = Quill.find(this.table);
          betterTableModule.hideTableTools();
          tableContainer.remove();
          this.quill.update(Quill.sources.USER);
        },
      },
    };

    class TableOperationMenu {
      constructor (params, quill, options) {
        const betterTableModule = quill.getModule('better-table');
        this.tableSelection = betterTableModule.tableSelection;
        this.table = params.table;
        this.quill = quill;
        this.options = options;
        this.menuItems = Object.assign({}, MENU_ITEMS_DEFAULT, options.items);
        this.tableColumnTool = betterTableModule.columnTool;
        this.boundary = this.tableSelection.boundary;
        this.selectedTds = this.tableSelection.selectedTds;
        this.destroyHandler = this.destroy.bind(this);
        this.columnToolCells = this.tableColumnTool.colToolCells();
        this.colorSubTitle = options.color && options.color.text ? options.color.text : DEFAULT_COLOR_SUBTITLE;
        this.cellColors = options.color && options.color.colors ? options.color.colors : DEFAULT_CELL_COLORS;

        this.menuInitial(params);
        this.mount();
        document.addEventListener("click", this.destroyHandler, false);
      }

      mount () {
        document.body.appendChild(this.domNode);
      }

      destroy () {
        this.domNode.remove();
        document.removeEventListener("click", this.destroyHandler, false);
        return null
      }

      menuInitial ({ table, left, top }) {
        this.domNode = document.createElement('div');
        this.domNode.classList.add('qlbt-operation-menu');
        css(this.domNode, {
          position: 'absolute',
          left: `${left}px`,
          top: `${top}px`,
          'min-height': `${MENU_MIN_HEIHGT}px`,
          width: `${MENU_WIDTH}px`
        });

        for (let name in this.menuItems) {
          if (this.menuItems[name]) {
            this.domNode.appendChild(
              this.menuItemCreator(
                Object.assign({}, MENU_ITEMS_DEFAULT[name], this.menuItems[name])
              )
            );

            if (['insertRowDown', 'unmergeCells'].indexOf(name) > -1) {
              this.domNode.appendChild(
                dividingCreator()
              );
            }
          }
        }

        // if colors option is false, disabled bg color
        if (this.options.color && this.options.color !== false) {
          this.domNode.appendChild(
            dividingCreator()
          );
          this.domNode.appendChild(
            subTitleCreator(this.colorSubTitle)
          );
          this.domNode.appendChild(this.colorsItemCreator(this.cellColors));
        }

        // create dividing line
        function dividingCreator () {
          const dividing = document.createElement('div');
          dividing.classList.add('qlbt-operation-menu-dividing');
          return dividing
        }

        // create subtitle for menu
        function subTitleCreator (title) {
          const subTitle = document.createElement('div');
          subTitle.classList.add('qlbt-operation-menu-subtitle');
          subTitle.innerText = title;
          return subTitle
        }
      }

      colorsItemCreator (colors) {
        const self = this;
        const node = document.createElement('div');
        node.classList.add('qlbt-operation-color-picker');

        colors.forEach(color => {
          let colorBox = colorBoxCreator(color);
          node.appendChild(colorBox);
        });

        function colorBoxCreator (color) {
          const box = document.createElement('div');
          box.classList.add('qlbt-operation-color-picker-item');
          box.setAttribute('data-color', color);
          box.style.backgroundColor = color;

          box.addEventListener('click', function () {
            const selectedTds = self.tableSelection.selectedTds;
            if (selectedTds && selectedTds.length > 0) {
              selectedTds.forEach(tableCell => {
                tableCell.format('cell-bg', color);
              });
            }
          }, false);

          return box
        }

        return node
      }

      menuItemCreator ({ text, iconSrc, handler }) {
        const node = document.createElement('div');
        node.classList.add('qlbt-operation-menu-item');

        const iconSpan = document.createElement('span');
        iconSpan.classList.add('qlbt-operation-menu-icon');
        iconSpan.innerHTML = iconSrc;

        const textSpan = document.createElement('span');
        textSpan.classList.add('qlbt-operation-menu-text');
        textSpan.innerText = text;

        node.appendChild(iconSpan);
        node.appendChild(textSpan);
        node.addEventListener('click', handler.bind(this), false);
        return node
      }
    }

    function getColToolCellIndexByBoundary (cells, boundary, conditionFn, container) {
      return cells.reduce((findIndex, cell) => {
        let cellRect = getRelativeRect(cell.getBoundingClientRect(), container);
        if (conditionFn(cellRect, boundary)) {
          findIndex = cells.indexOf(cell);
        }
        return findIndex
      }, false)
    }

    function getColToolCellIndexesByBoundary (cells, boundary, conditionFn, container) {
      return cells.reduce((findIndexes, cell) => {
        let cellRect = getRelativeRect(
          cell.getBoundingClientRect(),
          container
        );
        if (conditionFn(cellRect, boundary)) {
          findIndexes.push(cells.indexOf(cell));
        }
        return findIndexes
      }, [])
    }

    const Delta$1 = Quill.import('delta');

    // rebuild delta
    function matchTableCell (node, delta, scroll) {
      const row = node.parentNode;
      const table = row.parentNode.tagName === 'TABLE'
        ? row.parentNode
        : row.parentNode.parentNode;
      const rows = Array.from(table.querySelectorAll('tr'));
      const cells = Array.from(row.querySelectorAll('td'));
      const rowId = rows.indexOf(row) + 1;
      const cellId = cells.indexOf(node) + 1;
      const colspan = node.getAttribute('colspan') || false;
      const rowspan = node.getAttribute('rowspan') || false;
      const cellBg = node.getAttribute('data-cell-bg') || node.style.backgroundColor; // The td from external table has no 'data-cell-bg' 

      // bugfix: empty table cells copied from other place will be removed unexpectedly
      if (delta.length() === 0) {
        delta = new Delta$1().insert('\n', {
          'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan }
        });
        return delta
      }

      delta = delta.reduce((newDelta, op) => {
        if (op.insert && typeof op.insert === 'string') {
          const lines = [];
          let insertStr = op.insert;
          let start = 0;
          for (let i = 0; i < op.insert.length; i++) {
            if (insertStr.charAt(i) === '\n') {
              if (i === 0) {
                lines.push('\n');
              } else {
                lines.push(insertStr.substring(start, i));
                lines.push('\n');
              }
              start = i + 1;
            }
          }

          const tailStr = insertStr.substring(start);
          if (tailStr) lines.push(tailStr);

          lines.forEach(text => {
            text === '\n'
            ? newDelta.insert('\n', op.attributes)
            : newDelta.insert(text, _omit(op.attributes, ['table', 'table-cell-line']));
          });
        } else {
          newDelta.insert(op.insert, op.attributes);
        }

        return newDelta
      }, new Delta$1());
      
      return delta.reduce((newDelta, op) => {
        if (op.insert && typeof op.insert === 'string' &&
          op.insert.startsWith('\n')) {
          newDelta.insert(op.insert, Object.assign(
            {},
            Object.assign({}, { row: rowId }, op.attributes.table),
            { 'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan, 'cell-bg': cellBg } },
            _omit(op.attributes, ['table'])
          ));
        } else {
          // bugfix: remove background attr from the delta of table cell
          //         to prevent unexcepted background attr append.
          if (op.attributes && op.attributes.background && op.attributes.background === convertToHex(cellBg)) {
            newDelta.insert(op.insert, Object.assign(
              {},
              _omit(op.attributes, ['table', 'table-cell-line', 'background'])
            ));
          } else {
            newDelta.insert(op.insert, Object.assign(
              {},
              _omit(op.attributes, ['table', 'table-cell-line'])
            ));
          }
        }
        
        return newDelta
      }, new Delta$1())
    }

    // replace th tag with td tag
    function matchTableHeader (node, delta, scroll) {
      const row = node.parentNode;
      const table = row.parentNode.tagName === 'TABLE'
        ? row.parentNode
        : row.parentNode.parentNode;
      const rows = Array.from(table.querySelectorAll('tr'));
      const cells = Array.from(row.querySelectorAll('th'));
      const rowId = rows.indexOf(row) + 1;
      const cellId = cells.indexOf(node) + 1;
      const colspan = node.getAttribute('colspan') || false;
      const rowspan = node.getAttribute('rowspan') || false;

      // bugfix: empty table cells copied from other place will be removed unexpectedly
      if (delta.length() === 0) {
        delta = new Delta$1().insert('\n', {
          'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan }
        });
        return delta
      }

      delta = delta.reduce((newDelta, op) => {
        if (op.insert && typeof op.insert === 'string') {
          const lines = [];
          let insertStr = op.insert;
          let start = 0;
          for (let i = 0; i < op.insert.length; i++) {
            if (insertStr.charAt(i) === '\n') {
              if (i === 0) {
                lines.push('\n');
              } else {
                lines.push(insertStr.substring(start, i));
                lines.push('\n');
              }
              start = i + 1;
            }
          }

          const tailStr = insertStr.substring(start);
          if (tailStr) lines.push(tailStr);

          // bugfix: no '\n' in op.insert, push a '\n' to lines
          if (lines.indexOf('\n') < 0) {
            lines.push('\n');
          }

          lines.forEach(text => {
            text === '\n'
            ? newDelta.insert('\n', { 'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan } })
            : newDelta.insert(text, op.attributes);
          });
        } else {
          newDelta.insert(op.insert, op.attributes);
        }
        
        return newDelta
      }, new Delta$1());

      return delta.reduce((newDelta, op) => {
        if (op.insert && typeof op.insert === 'string' &&
          op.insert.startsWith('\n')) {
          newDelta.insert(op.insert, Object.assign(
            {},
            { 'table-cell-line': { row: rowId, cell: cellId, rowspan, colspan } }
          ));
        } else {
          newDelta.insert(op.insert, Object.assign(
            {},
            _omit(op.attributes, ['table', 'table-cell-line'])
          ));
        }

        return newDelta
      }, new Delta$1())
    }

    // supplement colgroup and col
    function matchTable (node, delta, scroll) {
      let newColDelta = new Delta$1();
      const topRow = node.querySelector('tr');

      // bugfix: empty table will return empty delta
      if (topRow === null) return newColDelta

      const cellsInTopRow = Array.from(topRow.querySelectorAll('td'))
        .concat(Array.from(topRow.querySelectorAll('th')));
      const maxCellsNumber = cellsInTopRow.reduce((sum, cell) => {
        const cellColspan = cell.getAttribute('colspan') || 1;
        sum = sum + parseInt(cellColspan, 10);
        return sum
      }, 0);
      const colsNumber = node.querySelectorAll('col').length;

      // issue #2
      // bugfix: the table copied from Excel had some default col tags missing
      //         add missing col tags
      if (colsNumber === maxCellsNumber) {
        return delta
      } else {
        for (let i = 0; i < maxCellsNumber - colsNumber; i++) {
          newColDelta.insert('\n', { 'table-col': true });
        }
        
        if (colsNumber === 0) return newColDelta.concat(delta)

        let lastNumber = 0;
        return delta.reduce((finalDelta, op) => {
          finalDelta.insert(op.insert, op.attributes);
      
          if (op.attributes && op.attributes['table-col']) {
            lastNumber += op.insert.length;
            if (lastNumber === colsNumber) {
              finalDelta = finalDelta.concat(newColDelta);
            }
          }
      
          return finalDelta
        }, new Delta$1())
      }
    }

    const Module$4 = Quill.import('core/module');
    const Delta = Quill.import('delta');

    class BetterTable extends Module$4 {
      static register() {
        Quill.register(TableCol, true);
        Quill.register(TableColGroup, true);
        Quill.register(TableCellLine, true);
        Quill.register(TableCell, true);
        Quill.register(TableRow, true);
        Quill.register(TableBody, true);
        Quill.register(TableContainer, true);
        Quill.register(TableViewWrapper, true);
        Quill.register(TableViewWrapper, true);
        // register customized Header，overwriting quill built-in Header
        // Quill.register('formats/header', Header, true);
      }

      constructor(quill, options) {
        super(quill, options);

        // handle click on quill-better-table
        this.quill.root.addEventListener('click', (evt) => {
          // bugfix: evt.path is undefined in Safari, FF, Micro Edge
          const path = getEventComposedPath(evt);

          if (!path || path.length <= 0) return

          const tableNode = path.filter(node => {
            return node.tagName &&
              node.tagName.toUpperCase() === 'TABLE' &&
              node.classList.contains('quill-better-table')
          })[0];

          if (tableNode) {
            // current table clicked
            if (this.table === tableNode) return
            // other table clicked
            if (this.table) this.hideTableTools();
            this.showTableTools(tableNode, quill, options);
          } else if (this.table) {
            // other clicked
            this.hideTableTools();
          }
        }, false);

        // handle right click on quill-better-table
        this.quill.root.addEventListener('contextmenu', (evt) => {
          if (!this.table) return true
          evt.preventDefault();

          // bugfix: evt.path is undefined in Safari, FF, Micro Edge
          const path = getEventComposedPath(evt);
          if (!path || path.length <= 0) return

          const tableNode = path.filter(node => {
            return node.tagName &&
              node.tagName.toUpperCase() === 'TABLE' &&
              node.classList.contains('quill-better-table')
          })[0];

          const rowNode = path.filter(node => {
            return node.tagName &&
              node.tagName.toUpperCase() === 'TR' &&
              node.getAttribute('data-row')
          })[0];

          const cellNode = path.filter(node => {
            return node.tagName &&
              node.tagName.toUpperCase() === 'TD' &&
              node.getAttribute('data-row')
          })[0];

          let isTargetCellSelected = this.tableSelection.selectedTds
            .map(tableCell => tableCell.domNode)
            .includes(cellNode);

          if (this.tableSelection.selectedTds.length <= 0 ||
            !isTargetCellSelected) {
            this.tableSelection.setSelection(
              cellNode.getBoundingClientRect(),
              cellNode.getBoundingClientRect()
            );
          }

          if (this.tableOperationMenu)
            this.tableOperationMenu = this.tableOperationMenu.destroy();

          if (tableNode) {
            this.tableOperationMenu = new TableOperationMenu({
              table: tableNode,
              row: rowNode,
              cell: cellNode,
              left: evt.pageX,
              top: evt.pageY
            }, quill, options.operationMenu);
          }
        }, false);

        // add keyboard binding：Backspace
        // prevent user hits backspace to delete table cell
        quill.getModule('keyboard');
        quill.keyboard.addBinding(
          { key: 'Backspace' },
          {},
          function (range, context) {
            if (range.index === 0 || this.quill.getLength() <= 1) return true;
            const [line] = this.quill.getLine(range.index);
            if (context.offset === 0) {
              const [prev] = this.quill.getLine(range.index - 1);
              if (prev != null) {
                if (prev.statics.blotName === 'table-cell-line' &&
                  line.statics.blotName !== 'table-cell-line') return false;
              }
            }
            return true
          });
        // since only one matched bindings callback will excute.
        // expected my binding callback excute first
        // I changed the order of binding callbacks
        let thisBinding = quill.keyboard.bindings['Backspace'].pop();
        quill.keyboard.bindings['Backspace'].splice(0, 1, thisBinding);

        // add Matchers to match and render quill-better-table for initialization
        // or pasting
        quill.clipboard.addMatcher('td', matchTableCell);
        quill.clipboard.addMatcher('th', matchTableHeader);
        quill.clipboard.addMatcher('table', matchTable);
        // quill.clipboard.addMatcher('h1, h2, h3, h4, h5, h6', matchHeader)

        // remove matcher for tr tag
        quill.clipboard.matchers = quill.clipboard.matchers.filter(matcher => {
          return matcher[0] !== 'tr'
        });
      }

      getTable(range = this.quill.getSelection()) {
        if (range == null) return [null, null, null, -1];
        const [cellLine, offset] = this.quill.getLine(range.index);
        if (cellLine == null || cellLine.statics.blotName !== TableCellLine.blotName) {
          return [null, null, null, -1];
        }
        const cell = cellLine.tableCell();
        const row = cell.row();
        const table = row.table();
        return [table, row, cell, offset];
      }

      insertTable(rows, columns) {
        const range = this.quill.getSelection(true);
        if (range == null) return
        let currentBlot = this.quill.getLeaf(range.index)[0];
        let delta = new Delta().retain(range.index);

        if (isInTableCell(currentBlot)) {
          console.warn(`Can not insert table into a table cell.`);
          return;
        }

        delta.insert('\n');
        // insert table column
        delta = new Array(columns).fill('\n').reduce((memo, text) => {
          memo.insert(text, { 'table-col': true });
          return memo
        }, delta);
        // insert table cell line with empty line
        delta = new Array(rows).fill(0).reduce(memo => {
          let tableRowId = rowId();
          return new Array(columns).fill('\n').reduce((memo, text) => {
            memo.insert(text, { 'table-cell-line': {row: tableRowId, cell: cellId()} });
            return memo
          }, memo)
        }, delta);

        this.quill.updateContents(delta, Quill.sources.USER);
        this.quill.setSelection(range.index + columns + 1, Quill.sources.API);
      }

      showTableTools (table, quill, options) {
        this.table = table;
        this.columnTool = new TableColumnTool(table, quill, options);
        this.tableSelection = new TableSelection(table, quill, options);
      }

      hideTableTools () {
        this.columnTool && this.columnTool.destroy();
        this.tableSelection && this.tableSelection.destroy();
        this.tableOperationMenu && this.tableOperationMenu.destroy();
        this.columnTool = null;
        this.tableSelection = null;
        this.tableOperationMenu = null;
        this.table = null;
      }
    }

    BetterTable.keyboardBindings = {
      'table-cell-line backspace': {
        key: 'Backspace',
        format: ['table-cell-line'],
        collapsed: true,
        offset: 0,
        handler(range, context) {
          const [line, offset] = this.quill.getLine(range.index);
          if (!line.prev || line.prev.statics.blotName !== 'table-cell-line') {
            return false
          }
          return true
        },
      },

      'table-cell-line delete': {
        key: 'Delete',
        format: ['table-cell-line'],
        collapsed: true,
        suffix: /^$/,
        handler() {},
      },

      'table-cell-line enter': {
        key: 'Enter',
        shiftKey: null,
        format: ['table-cell-line'],
        handler(range, context) {
          // bugfix: a unexpected new line inserted when user compositionend with hitting Enter
          if (this.quill.selection && this.quill.selection.composing) return
          const Scope = Quill.imports.parchment.Scope;
          if (range.length > 0) {
            this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
          }
          const lineFormats = Object.keys(context.format).reduce((formats, format) => {
            if (
              this.quill.scroll.query(format, Scope.BLOCK) &&
              !Array.isArray(context.format[format])
            ) {
              formats[format] = context.format[format];
            }
            return formats;
          }, {});
          // insert new cellLine with lineFormats
          this.quill.insertText(range.index, '\n', lineFormats['table-cell-line'], Quill.sources.USER);
          // Earlier scroll.deleteAt might have messed up our selection,
          // so insertText's built in selection preservation is not reliable
          this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
          this.quill.focus();
          Object.keys(context.format).forEach(name => {
            if (lineFormats[name] != null) return;
            if (Array.isArray(context.format[name])) return;
            if (name === 'link') return;
            this.quill.format(name, context.format[name], Quill.sources.USER);
          });
        },
      },

      'table-cell-line up': makeTableArrowHandler(true),
      'table-cell-line down': makeTableArrowHandler(false),
      'down-to-table': {
        key: 'ArrowDown',
        collapsed: true,
        handler(range, context) {
          const target = context.line.next;
          if (target && target.statics.blotName === 'table-view') {
            const targetCell = target.table().rows()[0].children.head;
            const targetLine = targetCell.children.head;
            
            this.quill.setSelection(
              targetLine.offset(this.quill.scroll),
              0,
              Quill.sources.USER
            );

            return false
          }
          return true
        }
      },
      'up-to-table': {
        key: 'ArrowUp',
        collapsed: true,
        handler(range, context) {
          const target = context.line.prev;
          if (target && target.statics.blotName === 'table-view') {
            const rows = target.table().rows();
            const targetCell = rows[rows.length - 1].children.head;
            const targetLine = targetCell.children.head;
            
            this.quill.setSelection(
              targetLine.offset(this.quill.scroll),
              0,
              Quill.sources.USER
            );

            return false
          }
          return true
        }
      }
    };

    function makeTableArrowHandler (up) {
      return {
        key: up ? 'ArrowUp' : 'ArrowDown',
        collapsed: true,
        format: ['table-cell-line'],
        handler(range, context) {
          // TODO move to table module
          const key = up ? 'prev' : 'next';
          const targetLine = context.line[key];
          if (targetLine != null) return true

          const cell = context.line.parent;
          const targetRow = cell.parent[key];

          if (targetRow != null && targetRow.statics.blotName === 'table-row') {
            let targetCell = targetRow.children.head;
            let totalColspanOfTargetCell = parseInt(targetCell.formats()['colspan'], 10);
            let cur = cell;
            let totalColspanOfCur = parseInt(cur.formats()['colspan'], 10);

            // get targetCell above current cell depends on colspan
            while (cur.prev != null) {
              cur = cur.prev;
              totalColspanOfCur += parseInt(cur.formats()['colspan'], 10);
            }
            
            while (targetCell.next != null && totalColspanOfTargetCell < totalColspanOfCur) {
              targetCell = targetCell.next;
              totalColspanOfTargetCell += parseInt(targetCell.formats()['colspan'], 10);
            }

            const index = targetCell.offset(this.quill.scroll);
            this.quill.setSelection(index, 0, Quill.sources.USER);
          } else {
            const targetLine = cell.table().parent[key];
            if (targetLine != null) {
              if (up) {
                this.quill.setSelection(
                  targetLine.offset(this.quill.scroll) + targetLine.length() - 1,
                  0,
                  Quill.sources.USER
                );
              } else {
                this.quill.setSelection(
                  targetLine.offset(this.quill.scroll),
                  0,
                  Quill.sources.USER
                );
              }
            }
          }
          return false;
        },
      };
    }

    function isTableCell (blot) {
      return blot.statics.blotName === TableCell.blotName
    }

    function isInTableCell (current) {
      return current && current.parent
        ? isTableCell(current.parent)
          ? true
          : isInTableCell(current.parent)
        : false
    }

    // 1.4.0: 图片的位置状态保存及复现（Delta中保存位置）
    // 参考：https://github.com/kensnyder/quill-image-resize-module/issues/10
    Quill.import('parchment');
    const BaseImage = Quill.import('formats/image');

    const ATTRIBUTES = ['alt', 'height', 'width', 'style'];

    const WHITE_STYLE = ['margin', 'display', 'float'];

    class Image extends BaseImage {
      static formats(domNode) {
        return ATTRIBUTES.reduce(function (formats, attribute) {
          if (domNode.hasAttribute(attribute)) {
            formats[attribute] = domNode.getAttribute(attribute);
          }
          return formats;
        }, {});
      }

      format(name, value) {
        if (ATTRIBUTES.indexOf(name) > -1) {
          if (value) {
            if (name === 'style') {
              value = this.sanitize_style(value);
            }
            this.domNode.setAttribute(name, value);
          } else {
            this.domNode.removeAttribute(name);
          }
        } else {
          super.format(name, value);
        }
      }

      sanitize_style(style) {
        let style_arr = style.split(';');
        let allow_style = '';
        style_arr.forEach((v, i) => {
          if (WHITE_STYLE.indexOf(v.trim().split(':')[0]) !== -1) {
            allow_style += v + ';';
          }
        });
        return allow_style;
      }
    }

    const QuillListItem = Quill.import('formats/list');
    Quill.import('formats/list');
    class ListItem extends QuillListItem {
      // 通过Delta数据重构Dom
      static create(value) {
        const node = super.create();
        if (value.indexOf('-') > 0) {
          const arr = value.split('-');
          node.setAttribute('data-list', arr[0]);
          node.style.setProperty('--list-item-start', arr[1]);
          node.setAttribute('data-start', arr[1]);
        } else {
          node.setAttribute('data-list', value);
        }
        return node;
      }

      // 保存在Delta中
      static formats(domNode) {
        if (domNode.hasAttribute('data-start') && domNode.getAttribute('data-start') !== '1') {
          return `${domNode.getAttribute('data-list')}-${domNode.getAttribute('data-start')}`;
        }
        return domNode.getAttribute('data-list') || undefined;
      }

      // 在CSS中使用变量，拼接样式，使用全局变量var，先定义变量：--list-item-start
      format(name, value) {
        if (name === this.statics.blotName && value) {
          if (value.indexOf('-') > 0) {
            const arr = value.split('-');
            this.domNode.setAttribute('data-list', arr[0]);
            this.domNode.style.setProperty('--list-item-start', arr[1]);
            this.domNode.setAttribute('data-start', arr[1]);
          } else {
            this.domNode.setAttribute('data-list', value);
          }
        } else {
          super.format(name, value);
        }
      }
    }

    // 给 Icon 添加 Tooltip 提示：在 offsetParent 中插入 Dom
    var showTitle = function (target, title) {
        var offsetLeft = target.offsetLeft, offsetTop = target.offsetTop, offsetHeight = target.offsetHeight, offsetParent = target.offsetParent;
        var position = "left:" + offsetLeft + "px;top:" + (offsetTop + offsetHeight + 6) + "px;";
        var tooltip = document.getElementsByClassName('quill-icon-tooltip');
        if (tooltip.length > 0) {
            tooltip[0].innerText = title;
            tooltip[0].setAttribute('style', position);
            target.addEventListener('mouseleave', function () {
                tooltip[0].style.display = 'none';
            }, false);
        }
        else {
            var t_1 = document.createElement('div');
            t_1.classList.add('quill-icon-tooltip');
            t_1.innerText = title;
            t_1.setAttribute('style', position);
            target.addEventListener('mouseleave', function () {
                t_1.style.display = 'none';
            }, false);
            (offsetParent || document.body).appendChild(t_1);
        }
    };

    const Module$3 = Quill.import('core/module');

    class LinkHandler extends Module$3 {
      constructor(quill, options) {
        super(quill, options);

        this.quill = quill;
        this.options = options || {};
        this.toolbar = quill.getModule('toolbar');
        this.editorContainer = quill.root.parentNode;
        this.tooltip = quill.theme?.tooltip;

        if (typeof this.toolbar !== 'undefined') {
          this.toolbar.addHandler('link', this.handleLinkClick.bind(this));
        }

        quill.on('selection-change', (range, oldRange, source) => {
          try {
            if (range == null || !quill?.hasFocus()) return;

            // 当选中link格式时，弹出tooltip并能修改保存
            if (source === 'user') {
              const LinkBlot = Quill.import('formats/link');
              const [link, offset] = quill.scroll.descendant(LinkBlot, range.index);
              if (link !== null) {
                // quill!.theme?.tooltip?.root?.classList.add('ql-editing');
                const [leaf] = quill.getLeaf(range.index + 1);
                this.tooltip?.edit('link', '');

                const start = range.index - offset;
                const len = link.length();
                const url = quill.getFormat(start, len).link;
                if (this.editorContainer) {
                  if (!this.wordDom) {
                    this.getDom(); // this.wordDom在没有点击toolbar时为空，没有初始化
                  }
                  this.wordDom.value = leaf.text;
                  this.urlDom.value = url;
                  this.saveDom.onclick = () => {
                    this.saveLink(start, len);
                  };
                  this.clearDom.onclick = () => this.clearLink(start, len);
                }
              } else {
                this.tooltipClose();
              }
            }
          } catch (e) {
            console.log('Link Listener Error: ', e);
          }
        });

        // 添加全局 Link Tooltip Dom，替换原 snow 的 tooltip
        if (this.quill.theme && this.quill.theme.tooltip) {
          this.quill.theme.tooltip.root.innerHTML = LinkHandler.linkTooltip(options.i18n);
        }
        // 编辑器有 text-change，关闭 tooltip
        quill.on('text-change', this.tooltipClose);
      }

      getDom = () => {
        if (this.editorContainer) {
          this.wordDom = this.editorContainer.querySelector('#link-words');
          this.urlDom = this.editorContainer.querySelector('#link-url');
          this.saveDom = this.editorContainer.querySelector('a.ql-link-save');
          this.jumpDom = this.editorContainer.querySelector('a.ql-link-jump');
          this.clearDom = this.editorContainer.querySelector('a.ql-link-clear');
          this.selection = this.quill.getSelection();
          this.jumpDom.onclick = this.jumpLink;
          this.clearDom.onclick = this.clearLink;
        }
      };
      handleLinkClick() {
        this.tooltip?.edit('link', '');
        this.getDom();

        // 当没有选中任何文本，直接弹出tooltip并能插入文本、超链接
        if (this.selection === null || this.selection.length === 0) {
          this.wordDom.value = '';
          this.urlDom.value = '';
          this.saveDom.onclick = () => {
            this.saveLink();
          };
        } else {
          // 当有选中文本，弹出tooltip后允许修改此文本，并能插入超链接
          const text = this.quill.getText(this.selection.index, this.selection.length);
          this.wordDom.value = text;

          let href = ''; // 最终超链接的地址value
          if (isEmail(text) && text.indexOf('mailto:') !== 0) {
            href = `mailto:${text}`;
          } else if (isUrl(text)) {
            href = normalizeUrl(text, { stripWWW: false });
          }
          this.urlDom.value = href;
          this.saveDom.onclick = () => {
            this.saveLink(this.selection.index, this.selection.length);
          };
        }
      }

      // 保存 Link 到编辑器，有startIndex且length>0代表需要替换
      saveLink(startIndex, length) {
        const url = this.urlDom.value;
        if (url && isUrl(url)) {
          const words = this.wordDom.value || url;
          if (startIndex !== undefined && length && length > 0) {
            this.quill.deleteText(startIndex, length);
          }
          this.quill.insertText(
            startIndex ?? (this.selection?.index || 0),
            words,
            'link',
            normalizeUrl(url, { stripWWW: false }),
            'user',
          );
          this.tooltipClose();
        } else {
          this.invalidUrlhandler();
        }
      }

      jumpLink = () => {
        const url = this.urlDom.value;
        if (url && isUrl(url)) {
          window.open(normalizeUrl(url, { stripWWW: false }), '_blank');
          this.tooltipClose();
        } else {
          this.invalidUrlhandler();
        }
      };
      clearLink = (startIndex, length) => {
        const url = this.urlDom.value;
        if (url && isUrl(url) && this.selection) {
          this.quill.removeFormat(startIndex ?? this.selection.index, length ?? this.selection.length);
        }
        this.tooltipClose();
      };

      tooltipClose = () => {
        if (this.tooltip && this.tooltip.hide) this.tooltip.hide();
      };

      invalidUrlhandler = () => {
        if (this.tooltip && this.tooltip.root) {
          const err = getI18nText('linkUrlErr', this.options.i18n);
          const tips = this.tooltip.root.querySelector('.err-tips');
          tips.innerText = err;
          this.urlDom.addEventListener('input', () => {
            if (tips.innerText) tips.innerText = '';
          });
        }
        this.urlDom.focus();
      };

      static linkTooltip = (i18n) => {
        const words = getI18nText(
          ['linkWords', 'linkUrl', 'linkSave', 'linkTarget', 'linkClear'],
          i18n,
        );
        return `
<p><span>${words[0]}：</span><input id="link-words" class="text-input" type="text" /></p>
<p class="flex flex-center">
<span>${words[1]}：</span><input id="link-url" class="text-input" type="text" />
<a class="ql-link-save">${words[2]}</a>
<a class="ql-link-jump" target="_blank">${genIconDom(iconsConfig.jumpIcon, words[3], 'ql-icon')}</a>
<a class="ql-link-clear">${genIconDom(iconsConfig.unlinkIcon, words[4], 'ql-icon')}</a>
</p>
<p class="err-tips"></p>
  `;
      };
    }

    const Module$2 = Quill.import('core/module');

    class TableHandler extends Module$2 {
      constructor(quill, options) {
        super(quill, options);

        this.quill = quill;
        this.options = options || {};
        this.toolbar = quill.getModule('toolbar');
        this.DEFAULT_COL = 9;
        this.DEFAULT_ROW = 9;
        if (typeof this.toolbar !== 'undefined') {
          this.toolbar.addHandler('table', this.handleTableClick.bind(this));
        }
      }

      handleTableClick() {
        this.tableDialogOpen();
        if (window.event) {
          window.event.cancelBubble = true;
          // 点击整个编辑器就消除table的弹出框
          this.quill.container.parentNode.addEventListener('click', () => {
            this.tableDialogClose();
          });
        } else {
          // 聚焦文本container就消除table的弹出框
          this.quill.container.addEventListener('click', () => {
            this.tableDialogClose();
          });
        }
        window.addEventListener('resize', () => {
          this.tableDialogClose();
        });
      }

      tableDialogOpen() {
        if (this.toolbar.container.querySelector('.ql-table-dialog')) {
          this.tableDialog.remove();
        } else {
          this.showTableDialog();
          Array.from(this.tableDialog.getElementsByClassName('table-dialog-item')).forEach((dom) => {
            dom.addEventListener('mouseover', () => {
              this.tableDialog.querySelector('#table-row-number').innerText =
                Number(dom.dataset.row) + 1;
              this.tableDialog.querySelector('#table-col-number').innerText =
                Number(dom.dataset.column) + 1;
              this.itemBackgroundChange(dom.dataset.row, dom.dataset.column);
            });
            dom.addEventListener('click', () => {
              this.createTable(Number(dom.dataset.row) + 1, Number(dom.dataset.column) + 1);
            });
          });
        }
      }

      showTableDialog() {
        const toolbarContainer = this.toolbar.container;
        if (!this.tableDialog) {
          this.tableDialog = document.createElement('div');
          this.tableDialog.classList.add('ql-table-dialog');
          const { dialogRows, dialogColumns } = this.options; // 生成dialogRows * dialogColumns的格子弹框
          const tableDialogLabel = getI18nText('tableDialogLabel', this.options.i18n);
          const dialogContent = `${TableHandler.genNumArr(
        Number(dialogRows) > 0 ? Number(dialogRows) : this.DEFAULT_ROW,
      )
        .map(
          (row) =>
            `<div class="table-dialog-tr">${TableHandler.genNumArr(
              Number(dialogColumns) > 0 ? Number(dialogColumns) : this.DEFAULT_COL,
            )
              .map(
                (column) =>
                  `<div class="table-dialog-item" data-row="${row}" data-column="${column}"></div>`,
              )
              .join('')}</div>`,
        )
        .join('')}
        <p><label>${tableDialogLabel}</label><span><span id="table-row-number">0</span> X <span id="table-col-number">0</span></span></p>
      `;
          
          this.tableDialog.innerHTML = dialogContent;
        } else {
          this.itemBackgroundChange(-1, 0); // 每次打开都清空之前被 hover 过的格子
        }

        const tableIcon = toolbarContainer.querySelector('.ql-table');
        this.tableDialog.style = this.dialogPosition(tableIcon);
        toolbarContainer.append(this.tableDialog);
      }

      tableDialogClose() {
        if (this.tableDialog) {
          this.tableDialog.remove();
        }
      }
      dialogPosition = (clickDom) =>{
        const parent = clickDom.offsetParent;
        const width = 200;
        if (parent.offsetWidth - clickDom.offsetLeft + 6 > width) {
          return `top:${clickDom.offsetTop + 24}px;left:${clickDom.offsetLeft + 6}px;`;
        } else {
          return `top:${clickDom.offsetTop + 24}px;left:${parent.offsetWidth - width}px;`;
        }
      }

      createTable(row, column) {
        this.tableDialogClose();
        this.quill.getModule('better-table').insertTable(row, column);
      }

      itemBackgroundChange(row, column) {
        Array.from(this.tableDialog.getElementsByClassName('table-dialog-item')).forEach((dom) => {
          if (dom.dataset.row <= row && dom.dataset.column <= column) {
            dom.className = 'table-dialog-item item-hover';
          } else {
            dom.className = 'table-dialog-item';
          }
        });
      }
      static genNumArr = (max) => new Array(max).fill(0).map((i, index) => index);
    }

    const Module$1 = Quill.import('core/module');

    class ImageHandler extends Module$1 {
      constructor(quill, options) {
        super(quill, options);

        this.quill = quill;
        this.options = options || {};
        this.toolbar = quill.getModule('toolbar');
        if (typeof this.toolbar !== 'undefined') {
          this.toolbar.addHandler('image', this.handleImageClick.bind(this));
        }
      }

      handleImageClick() {
        this.imageDialogOpen();
        if (window.event) {
          window.event.cancelBubble = true;
          // 点击整个编辑器就消除image的弹出框
          this.quill.container.parentNode.addEventListener('click', () => {
            this.imageDialogClose();
          });
        } else {
          // 聚焦文本container就消除image的弹出框
          this.quill.container.addEventListener('click', () => {
            this.imageDialogClose();
          });
        }
        window.addEventListener('resize', () =>{
          this.imageDialogClose();
        });
      }

      imageDialogOpen() {
        if (this.toolbar.container.querySelector('.ql-image-dialog')) {
          this.imageDialog.remove();
        } else {
          this.showImageDialog();
        }
      }

      showImageDialog() {
        const toolbarContainer = this.toolbar.container;
        if (!this.imageDialog) {
          this.imageDialog = document.createElement('div');
          this.imageDialog.classList.add('ql-image-dialog');
          const words = getI18nText(['imageDialogLocal', 'imageDialogUrlLabel', 'iamgeDialogInsert'], this.options.i18n);
          this.imageDialog.innerHTML = `
      <input type="file" class="ql-image-upload" accept="${
        this.options.imageAccept || 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon'
      }" />
      <button class="local-image">${words[0]}</button>
      <p class="err-tips err-file"></p>
      <p class="url-label">${words[1]}</p>
      <div class="image-url-form"><input class="text-input" type="text" placeholder="https://example.com/img.png" /><span class="url-submit">${
        words[2]
      }</span></div>
      <p class="err-tips err-url"></p>
      `;

          
          this.fileInput = this.imageDialog.querySelector('input.ql-image-upload[type=file]');
          const urlInput = this.imageDialog.querySelector('input.text-input');
          urlInput.onclick = (e) => {
            e.stopPropagation();
          }; // 阻止冒泡导致 imageDialog 消失
          this.imageDialog.querySelector('.url-submit').onclick = (e) => {
            e.stopPropagation();
            const url = urlInput.value;
            if (url && isUrl(url)) {
              this.insertImage(url);
              this.imageDialogClose();
              urlInput.value = '';
              this.quill.enable(true);
            } else {
              const tips = this.imageDialog.querySelector('.err-tips.err-url');
              tips.innerText = getI18nText('linkUrlErr', this.options.i18n);
              urlInput?.addEventListener('input', () => {
                if (tips.innerText) tips.innerText = '';
              });
            }
          };
          this.imageDialog.querySelector('button.local-image').onclick = (e) => {
            e.stopPropagation();
            this.fileInput.click();
            this.imageDialog.querySelector('.err-tips.err-file').innerText = ''; // 删除之前的 errtips
          };

          this.fileInput.onchange = () => {
            const { files } = this.fileInput;

            if (!files || !files.length) {
              return;
            }

            // // 请求图片保存API
            // const { imgUploadApi, uploadSuccCB, uploadFailCB } = this.options;
            // if (imgUploadApi) {
            //   ImageHandler.uploadImg(
            //     files[0],
            //     imgUploadApi,
            //     (url) => {
            //       this.insertImage(url);
            //       if (uploadSuccCB) uploadSuccCB(url);
            //     },
            //     (error) => {
            //       this.quill.enable(true);
            //       if (uploadFailCB) uploadFailCB(error);
            //     },
            //   );
            // }

            // 先将图片转 base64 插入编辑器中，再由 imagePasteDrop上传，用户能更快看到图片，后台上传
            this.beforeUpload(files[0]); // 上传先一张一张来
          };
        } else {
          this.imageDialog.querySelector('input.text-input').value = '';
        }

        const imageIcon = toolbarContainer.querySelector('.ql-image');
        this.imageDialog.style = this.dialogPosition(imageIcon);
        toolbarContainer.append(this.imageDialog);
      }

      beforeUpload(file) {
        if (this.imageDialog) {
          const tips = this.imageDialog.querySelector('.err-tips.err-file');
          const words = getI18nText(['imageDialogTypeErr', 'imageDialogSizeErr'], this.options.i18n);
          // 判断文件的后缀，至于用户强制改变文件后缀，这里不做考虑
          if (!file.type.startsWith('image/')) {
            tips.innerText = words[0];
            this.showImageDialog();
            return;
          }
          const isLt5M = file.size / 1024 /1024 < (this.options.maxSize || 5);
          if (!isLt5M) {
            tips.innerText = words[1].replace('$', this.options.maxSize || 5);
            this.showImageDialog();
            return;
          }

          const reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = (e) => {
            const base64Str = e.target.result;
            this.insertImage(base64Str);
          };
        }
      }
      
      imageDialogClose() {
        if (this.imageDialog) {
          this.imageDialog.remove();
        }
      }
      dialogPosition = (clickDom) => {
        const parent = clickDom.offsetParent;
        const width = 280;
        if (parent.offsetWidth - clickDom.offsetLeft + 6 > width) {
          return `top:${clickDom.offsetTop + 24}px;left:${clickDom.offsetLeft + 6}px;`;
        } else {
          return `top:${clickDom.offsetTop + 24}px;left:${parent.offsetWidth - width}px;`;
        }
      }

      insertImage = (url) => {
        this.imageDialogClose();
        this.quill.enable(true);
        const range = this.quill.getSelection(true);
        this.quill.insertEmbed(range.index, 'image', url);
        this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
        this.fileInput.value = '';
      };
    }

    const Module = Quill.import('core/module');

    class CodeHandler extends Module {
      constructor(quill, options) {
        super(quill, options);

        this.quill = quill;
        this.options = options || {};
        this.toolbar = quill.getModule('toolbar');
        if (typeof this.toolbar !== 'undefined') {
          this.toolbar.addHandler('code-block', this.handleCodeClick.bind(this));
        }
      }

      handleCodeClick() {
        const selection = this.quill.getSelection();
        if (!selection) return;
        // this.quill.updateContents(new Delta().retain(selection.index).insert('\n').insert('aw', {'code-block': true}).insert('\n'));
        
        // 当代码块下无内容，自动加一个空行
        if (this.quill.getText(selection.index) === '\n') {
          this.quill.insertText(selection.index, '\n');
          this.quill.formatLine(selection.index, 1, 'code-block', true);
          this.quill.setSelection(selection.index);
        } else {
          this.quill.formatLine(selection.index, 1, 'code-block', true);
        }
      }
    }

    var toolbarInit = function (quill, i18n) {
        var container = quill.getModule('toolbar').container;
        // 设置 toolbar 中的 i18n 的 label，css 中使用 data-before 来作为 content
        var setDataSet = function (cssQuery, i18nKey) {
            var domList = container.querySelector(cssQuery);
            if (domList) {
                domList.setAttribute('data-before', i18nConfig[i18n][i18nKey]);
            }
        };
        setDataSet('.ql-toolbar .ql-font .ql-picker-label[data-value="system"]', 'toolbarFont');
        setDataSet('.ql-toolbar .ql-font .ql-picker-item[data-value="system"]', 'toolbarFont');
        setDataSet('.ql-snow .ql-picker.ql-header .ql-picker-item', 'toolbarHeader');
        setDataSet('.ql-snow .ql-picker.ql-header .ql-picker-label', 'toolbarHeader');
        setDataSet('.ql-toolbar .ql-font .ql-picker-label[data-value="wsYaHei"]', 'fontYahei');
        setDataSet('.ql-toolbar .ql-font .ql-picker-item[data-value="wsYaHei"]', 'fontYahei');
        setDataSet('.ql-toolbar .ql-font .ql-picker-label[data-value="songTi"]', 'fontSong');
        setDataSet('.ql-toolbar .ql-font .ql-picker-item[data-value="songTi"]', 'fontSong');
        setDataSet('.ql-toolbar .ql-font .ql-picker-label[data-value="kaiTi"]', 'fontKai');
        setDataSet('.ql-toolbar .ql-font .ql-picker-item[data-value="kaiTi"]', 'fontKai');
        window.showTitle = showTitle; // 全局添加 Icon hover 显示tootip函数
    };
    var undoHandler = function (quill) {
        var _a;
        (_a = quill === null || quill === void 0 ? void 0 : quill.history) === null || _a === void 0 ? void 0 : _a.undo();
    };
    var redoHandler = function (quill) {
        var _a;
        (_a = quill === null || quill === void 0 ? void 0 : quill.history) === null || _a === void 0 ? void 0 : _a.redo();
    };

    var CopyIcon = "<svg width=\"22\" height=\"22\" fill=\"none\"><path class=\"ql-fill\" d=\"M6.188 8.25v8.25h6.875V8.25H6.186zm8.25-.688v9.702c0 .337-.288.611-.642.611H5.454c-.354 0-.641-.274-.641-.611V7.486c0-.337.287-.611.641-.611h8.296c.38 0 .688.308.688.688zm2.548-3.236a.685.685 0 01.201.487v8.593c0 .19-.153.344-.343.344h-.688a.344.344 0 01-.343-.344V5.5H9.28a.344.344 0 01-.344-.344V4.47c0-.19.154-.344.344-.344H16.5c.19 0 .362.077.486.201z\" fill=\"#646A73\"></path></svg>";

    // const Parchment = Quill.import('parchment');
    const BaseSyntax = Quill.import('modules/syntax');
    const CodeBlock = Quill.import('formats/code-block');

    class QSyntax extends BaseSyntax {
      constructor(quill, options) {
        super(quill, options);
        this.listener();
      }

      // 参考 BaseSyntax的initListener重构
      listener() {
        this.quill.on(Quill.events.SCROLL_BLOT_MOUNT, (blot) => {
          // if (!(blot instanceof CodeBlockContainer)) return;
          if (blot.domNode.getAttribute('class') !== 'ql-code-block-container') return;
          const container = this.quill.root.ownerDocument.createElement('div');
          const copy = this.quill.root.ownerDocument.createElement('span');
          const copyLabel = '<span>Copy</span>';
          copy.innerHTML = `${CopyIcon}${copyLabel}`;
          copy.className = 'ql-code-copy';
          copy.addEventListener('click', () => {
            const text = blot.domNode.innerHTML;
            window.navigator.clipboard.writeText(QSyntax.filterCode(text.split(copyLabel)[1]));
            copy.querySelector('span').innerHTML = 'Copied';
            setTimeout(() => {
              copy.querySelector('span').innerHTML = 'Copy';
            }, 2000);
          });

          const select = this.quill.root.ownerDocument.createElement('select');
          this.options.languages.forEach(({ key, label }) => {
            const option = select.ownerDocument.createElement('option');
            option.textContent = label;
            option.setAttribute('value', key);
            select.appendChild(option);
          });
          select.addEventListener('change', () => {
            blot.format(CodeBlock.blotName, select.value);
            this.quill.root.focus(); // Prevent scrolling
            this.highlight(blot, true);
          });
          container.append(select, copy);
          // if (blot.uiNode == null) {
          blot.attachUI(container); // blot.uiNode是有的，在BaseSyntax中已被创建，这里需要覆盖
          if (blot.prev && blot.prev.domNode) {
            select.value = CodeBlock.formats(blot.prev.domNode);
          } // 编辑器中 content 再次渲染需要自动选上语言
          // }
        });
      }

      static filterCode(html) {
        return html
          .match(/(?<=<div[^<>]+?>)(.+?)(?=<\/div>)/g)
          .map((line) => htmlDecode(line.replace(/<[^<>]+>/g, '')))
          .join('\n');
      }
    }

    var keyboardBinds = {
        // 有序列表只能输入“1. ”才会触发，改变比如输入“30. ”会变为“1. ”开始的有序列表的行为
        'list autofill': {
            key: ' ',
            collapsed: true,
            prefix: /^\d+\.$/,
            format: {
                list: false,
                'code-block': false,
                blockquote: false,
                header: false,
                table: false,
                'table-cell-line': false,
            },
            handler: function (range, context) {
                var prefix = context.prefix; context.line;
                var start = parseInt(prefix.replace('.', ''), 10);
                if (start !== 1) {
                    this.quill.formatLine(range.index, 1, 'list', "ordered-" + start);
                    // // 这个ol在编辑器中本身没啥作用，编辑器css已经将ol的样式设置为none，主要样式在li的伪类中定义；主要给转html等富文本使用
                    // const ol = line?.next?.parent?.domNode;
                    // ol.setAttribute('start', start);
                    // ol.style.setProperty('--list-item-start', start);
                    // // 真正设置有序列表起始值
                    // const li = line?.next?.domNode;
                    // li.dataset.reset = parseInt(prefix.replace('.', ''), 10);
                    // li.style.setProperty('counter-set', `list-0 ${parseInt(prefix.replace('.', ''), 10)}`);
                    this.quill.formatLine(range.index, 1, 'list', "ordered-" + start);
                }
                else {
                    this.quill.formatLine(range.index, 1, 'list', 'ordered');
                    this.quill.formatLine(range.index, 1, 'list', 'ordered');
                }
                this.quill.deleteText(range.index - prefix.length, prefix.length);
                // this.quill.setSelection(range.index, 1);
            },
        },
        // bugfix: 当最开始是code块、list、引用块时，无法使用Backspace删除样式
        'code backspace': {
            key: 'Backspace',
            format: ['code-block', 'list', 'blockquote'],
            handler: function (range, context) {
                var _a, _b;
                if (this.quill) {
                    var line = this.quill.getLine(range.index)[0];
                    var isEmpty = !line.children.head.text || line.children.head.text.trim() === '';
                    var format = this.quill.getFormat(range);
                    var allCode = (_b = (_a = context === null || context === void 0 ? void 0 : context.line) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.cachedText;
                    // 当是起始，代码块且整块中已无字符，或引用/列表且当前行为空，去除当前行格式；其他情况执行默认Backspace的handler
                    if (range.index === 0 &&
                        context.suffix === '' &&
                        ((format['code-block'] && (allCode === '\n' || allCode === '')) ||
                            (!format['code-block'] && isEmpty))) {
                        this.quill.removeFormat(range.index, range.length);
                        return false;
                    }
                }
                return true;
            },
        },
    };

    Quill.register(Image, true); // 允许图片的样式保存在Delta中
    Quill.register(ListItem, true); // 允许图片的样式保存在Delta中
    Quill.register({
        'modules/imageResize': ImageResize,
        'modules/imageDrop': ImageDrop,
        'modules/magicUrl': MagicUrl,
        'modules/markdownShortcuts': MarkdownShortcuts,
        'modules/tableHandler': TableHandler,
        'modules/linkHandler': LinkHandler,
        'modules/imageHandler': ImageHandler,
        'modules/codeHandler': CodeHandler,
        'modules/qSyntax': QSyntax,
    }, true);

    var RichTextEditor = function (props) {
        var _a = props.modules, modules = _a === void 0 ? {} : _a, content = props.content, _b = props.i18n, i18n = _b === void 0 ? 'en' : _b, _c = props.style, style = _c === void 0 ? {} : _c, _d = props.readOnly, readOnly = _d === void 0 ? false : _d;
        var quillModules = React.useRef({});
        var toolbarHandlers = React.useRef({});
        var quillRef = React.useRef();
        var editorId = React.useRef(new Date().getTime() + (100 * Math.random()).toFixed(0));
        var uploadedImgsList = React.useRef([]); // 已上传图片，主要给onComplete使用，可以用来判断哪些已上传图片实际并没有被使用
        // 处理外部传入的modules
        React.useEffect(function () {
            if (Object.keys(modules).length > 0) {
                var table = modules.table, codeHighlight = modules.codeHighlight, _a = modules.imageResize, imageResize = _a === void 0 ? true : _a, _b = modules.imageDrop, imageDrop = _b === void 0 ? true : _b, _c = modules.magicUrl, magicUrl = _c === void 0 ? true : _c, _d = modules.markdown, markdown = _d === void 0 ? true : _d, _e = modules.link, link = _e === void 0 ? true : _e, imageHandler = modules.imageHandler;
                if (table) {
                    quillModules.current.table = false;
                    quillModules.current['better-table'] = {
                        i18n: i18n,
                        operationMenu: {
                            items: (typeof table !== 'boolean' && table.operationMenu) ||
                                (i18n === 'zh'
                                    ? {
                                        insertColumnRight: {
                                            text: '右侧插入列',
                                        },
                                        insertColumnLeft: {
                                            text: '左侧插入列',
                                        },
                                        insertRowUp: {
                                            text: '上方插入行',
                                        },
                                        insertRowDown: {
                                            text: '下方插入行',
                                        },
                                        mergeCells: {
                                            text: '合并单元格',
                                        },
                                        unmergeCells: {
                                            text: '取消单元格合并',
                                        },
                                        deleteColumn: {
                                            text: '删除列',
                                        },
                                        deleteRow: {
                                            text: '删除行',
                                        },
                                        deleteTable: {
                                            text: '删除表格',
                                        },
                                    }
                                    : {}),
                            color: __assign({ colors: ['#dbc8ff', '#6918b4', '#4a90e2', '#999', '#fff'], text: getI18nText('tableBackground', i18n) }, (typeof table !== 'boolean' ? table.backgroundColors : null)),
                        },
                    };
                    quillModules.current.tableHandler = __assign({ i18n: i18n }, (typeof table !== 'boolean' ? table.toolbarOptions : {})); // 添加table的工具栏处理函数，需要先registry，在DidMount中
                }
                if (codeHighlight) {
                    // quillModules.current.syntax = {
                    //   hljs: highlightInit(),
                    // };
                    quillModules.current.qSyntax = {
                        i18n: i18n,
                        hljs: highlightInit(),
                        languages: typeof codeHighlight !== 'boolean'
                            ? codeHighlight
                            : [
                                { key: 'plain', label: 'Plain' },
                                { key: 'javascript', label: 'Javascript' },
                                { key: 'java', label: 'Java' },
                                { key: 'python', label: 'Python' },
                                { key: 'cpp', label: 'C++/C' },
                                { key: 'csharp', label: 'C#' },
                                { key: 'php', label: 'PHP' },
                                { key: 'sql', label: 'SQL' },
                                { key: 'json', label: 'JSON' },
                                { key: 'bash', label: 'Bash' },
                                { key: 'go', label: 'Go' },
                                { key: 'objectivec', label: 'Object-C' },
                                { key: 'xml', label: 'Html/xml' },
                                { key: 'css', label: 'CSS' },
                                { key: 'ruby', label: 'Ruby' },
                                { key: 'swift', label: 'Swift' },
                                { key: 'scala', label: 'Scala' },
                            ],
                    };
                }
                // 默认添加图片缩放功能
                if (imageResize) {
                    quillModules.current.imageResize =
                        imageResize === false
                            ? imageResize
                            : __assign({ i18n: i18n }, (typeof imageResize === 'object' ? imageResize : null));
                }
                // 默认图片拖拽/复制到富文本
                if (imageDrop) {
                    quillModules.current.imageDrop =
                        imageDrop === false
                            ? imageDrop
                            : __assign({ i18n: i18n,
                                imageHandler: imageHandler, uploadedImgsList: uploadedImgsList.current }, (typeof imageDrop === 'object' ? imageDrop : null));
                }
                // 默认支持自动识别URL
                quillModules.current.magicUrl = magicUrl;
                // 默认支持自动识别markdown语法
                quillModules.current.markdownShortcuts = markdown;
                // toolbar handler处理
                if (link) {
                    quillModules.current.linkHandler = { i18n: i18n };
                }
                quillModules.current.imageHandler = __assign({ i18n: i18n }, imageHandler);
                quillModules.current.codeHandler = true;
                toolbarHandlers.current.undo = function () { return undoHandler(quillRef.current); };
                toolbarHandlers.current.redo = function () { return redoHandler(quillRef.current); };
            }
            // 设置自定义字体/大小
            var toolbarOptions = modules.toolbarOptions;
            var fontList = ['system', 'wsYaHei', 'songTi', 'serif', 'arial'];
            var sizeList = ['12px', '14px', '18px', '36px'];
            if (toolbarOptions) {
                toolbarOptions.forEach(function (formats) {
                    if (Array.isArray(formats)) {
                        formats.forEach(function (format) {
                            if (typeof format === 'object') {
                                if (format.font && Array.isArray(format.font)) {
                                    fontList = format.font;
                                }
                                if (format.size && Array.isArray(format.size)) {
                                    sizeList = format.size;
                                }
                            }
                        });
                    }
                });
            }
            var SizeStyle = Quill.import('attributors/style/size');
            SizeStyle.whitelist = sizeList;
            Quill.register(SizeStyle, true);
            var FontStyle = Quill.import('formats/font');
            FontStyle.whitelist = fontList;
            Quill.register(FontStyle, true);
            // 设置重做撤销Icon
            var icons = Quill.import('ui/icons');
            icons.undo = IconUndo;
            icons.redo = IconRedo;
        }, [modules]);
        React.useEffect(function () {
            var placeholder = props.placeholder, getQuill = props.getQuill, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur;
            if (quillModules.current['better-table']) {
                Quill.register({
                    'modules/better-table': BetterTable,
                }, true);
            }
            // Quill.register(Image, true); // 允许图片的样式保存在Delta中
            // Quill.register(ListItem, true); // 允许图片的样式保存在Delta中
            // Quill.register(
            //   {
            //     'modules/imageResize': ImageResize,
            //     'modules/imageDrop': ImageDrop,
            //     'modules/magicUrl': MagicUrl,
            //     'modules/markdownShortcuts': MarkdownShortcuts,
            //     'modules/tableHandler': TableHandler,
            //     'modules/linkHandler': LinkHandler,
            //     'modules/imageHandler': ImageHandler,
            //     'modules/codeHandler': CodeHandler,
            //     'modules/qSyntax': QSyntax,
            //   },
            //   true,
            // );
            var lineBreakMatcher = function () {
                var newDelta = new Delta_1();
                newDelta.insert({ break: '' });
                return newDelta;
            };
            var toolbarOptions = modules.toolbarOptions || [
                ['undo', 'redo', 'clean'],
                [
                    { font: ['system', 'wsYaHei', 'songTi', 'serif', 'arial'] },
                    { size: ['12px', false, '18px', '36px'] },
                    { header: [false, 1, 2, 3, 4] },
                ],
                ['bold', 'italic', 'underline', 'strike', { color: [] }, { background: [] }],
                [
                    { list: 'ordered' },
                    { list: 'bullet' },
                    { list: 'check' },
                    { indent: '-1' },
                    { indent: '+1' },
                    { align: [] },
                ],
                [
                    'blockquote',
                    modules.codeHighlight ? 'code-block' : undefined,
                    modules.link !== false ? 'link' : undefined,
                    'image',
                    { script: 'sub' },
                    { script: 'super' },
                    quillModules.current['better-table'] ? 'table' : undefined,
                ],
            ];
            quillRef.current = new Quill("#editor" + editorId.current, {
                debug: false,
                modules: __assign(__assign({}, quillModules.current), { toolbar: {
                        container: toolbarOptions,
                        handlers: __assign({}, toolbarHandlers.current),
                    }, clipboard: {
                        matchers: [['BR', lineBreakMatcher]],
                    }, keyboard: {
                        bindings: __assign(__assign({}, BetterTable.keyboardBindings), keyboardBinds),
                    }, history: {
                        delay: 2000,
                        maxStack: 100,
                        userOnly: true,
                    } }),
                placeholder: placeholder || getI18nText('placeholder', i18n),
                readOnly: readOnly,
                bounds: document.querySelector("#editor" + editorId.current),
                theme: 'snow',
            });
            toolbarInit(quillRef.current, i18n);
            quillRef.current.on('selection-change', function (range, oldRange, source) {
                var _a;
                if (range == null || !((_a = quillRef.current) === null || _a === void 0 ? void 0 : _a.hasFocus()))
                    return;
                // 当新建table或者选中table时，禁止部分toolbar options，添加table时触发的source=api
                if (modules.table && quillRef.current) {
                    var disableInTable = ['header', 'blockquote', 'code-block', 'hr', 'list'];
                    var format = quillRef.current.getFormat() || {};
                    if (format && format['table-cell-line']) {
                        optionDisableToggle(quillRef.current, disableInTable, true);
                    }
                    else {
                        optionDisableToggle(quillRef.current, disableInTable, false);
                    }
                }
            });
            content && setContent(content, quillRef.current); // 设置初始内容
            getQuill && getQuill(quillRef.current, uploadedImgsList.current);
            if (onChange) {
                quillRef.current.on('text-change', function (delta, old, source) {
                    source === 'user' && onChange(delta, old);
                });
            }
            if (onFocus || onBlur) {
                quillRef.current.on('selection-change', function (range, oldRange, source) {
                    var hasFocus = range && !oldRange;
                    var hasBlur = !range && oldRange;
                    if (onFocus && hasFocus)
                        onFocus(range);
                    if (onBlur && hasBlur)
                        onBlur(oldRange);
                });
            }
            // 解决中文拼音输入时placeholder无法消失的问题
            var dom = document.getElementById("editor" + editorId.current).querySelector('.ql-editor');
            dom.addEventListener('input', throttle(function () {
                if (dom.innerText !== '\n' && dom.classList.contains('ql-blank')) {
                    quillRef.current.root.setAttribute('data-placeholder', '');
                }
                else if (dom.innerText === '\n') {
                    quillRef.current.root.setAttribute('data-placeholder', placeholder || getI18nText('placeholder', i18n)); // 输入拼音又删除的情况，需要将placeholder再展示出来
                }
            }, 100));
            // 当把placeholder置为空，当内容删为空时，placeholder无法出来
            quillRef.current.on('text-change', throttle(function () {
                if (quillRef.current.getText() === '\n' &&
                    quillRef.current.root.getAttribute('data-placeholder') === '') {
                    quillRef.current.root.setAttribute('data-placeholder', placeholder || getI18nText('placeholder', i18n));
                }
            }));
        }, []);
        React.useEffect(function () {
            if (content) {
                setContent(content, quillRef.current);
            }
        }, [content]);
        React.useEffect(function () {
            if (quillRef.current) {
                if (readOnly) {
                    quillRef.current.enable(false);
                }
                else {
                    quillRef.current.enable();
                }
            }
        }, [readOnly]);
        return (React.createElement("div", { className: "ql-editor-container", style: style },
            React.createElement("div", { id: "editor" + editorId.current })));
    };

    return RichTextEditor;

}));
